const std = @import("std");
pub fn buildSceSysmemForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSysmemForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSysmemForDriver_0990_SceSysmemForDriver_ksceKernelProcMemcpyToUserRo.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDClose.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDCreate.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDGetClass.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDGetName.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDGetObject.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDKernelCreate.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDName.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDOpenByName.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDReferObject.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDReferObjectWithClass.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDReferObjectWithClassLevel.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDReferObjectWithLevel.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDReferObjectWithSubclass.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDReleaseObject.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceGUIDSetName.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelAllocHeapMemory.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelAllocHeapMemoryWithOpt.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelAllocHeapMemoryWithOption.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelAllocMemBlock.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelAllocMemBlockWithInfo.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelAllocUncacheHeapMemory.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelAllocUncacheHeapMemoryWithOption.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelCopyFromToUser.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelCopyFromToUserProc.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelCopyFromUser.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelCopyFromUserProc.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelCopyToUser.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelCopyToUserProc.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelCountFillValue64FromUser.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelCountFillValue64FromUserProc.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelCountFillValueFromUser.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelCountFillValueFromUserProc.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelCreateHeap.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelDecRefCountMemBlock.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelDeleteHeap.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelFindMemBlockByAddr.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelFindProcMemBlockByAddr.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelFreeHeapMemory.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelFreeMemBlock.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelFreeUncacheHeapMemory.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelGetMemBlockAllocMapSize.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelGetMemBlockBase.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelGetMemBlockInfo.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelGetMemBlockMappedBase.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelGetMemBlockMemtypeByAddr.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelGetMemBlockPARange.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelGetMemBlockPAVector.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelGetMemBlockVBase.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelGetPhysicalMemoryType.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelGetUIDClass.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelIncRefCountMemBlock.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelIsAccessibleRange.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelIsAccessibleRangeProc.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelIsEqualAccessibleRangeProcBySW.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelLockRange.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelLockRangeProc.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelLockRangeWithMode.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelMapMemBlock.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelMapMemBlockWithFlag.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelMemBlockGetInfoEx.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelMemBlockType2Memtype.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelMemBlockTypeGetPrivileges.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelProcModeVAtoPA.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelProcUserMap.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelProcessGetContext.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelProcessSwitchContext.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelRemapMemBlock.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelStrncpyFromUser.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelStrncpyFromUserProc.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelStrncpyToUser.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelStrncpyToUserProc.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelStrnlenFromUser.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelStrnlenFromUserProc.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelSwitchVmaForPid.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelUnlockRange.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelUnlockRangeProc.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelUnlockRangeWithMode.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelUnmapMemBlock.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelUserMap.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelUserMapWithFlags.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelUserUnmap.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelVARangeToPARange.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelVARangeToPARangeByHW.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelVARangeToPARangeBySW.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelVARangeToPAVector.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelVARangeToPAVectorByHW.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelVARangeToPAVectorBySW.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelVAtoPA.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceKernelVAtoPABySW.S",
            "SceSysmemForDriver_SceSysmemForDriver_kscePUIDClose.S",
            "SceSysmemForDriver_SceSysmemForDriver_kscePUIDGetClass.S",
            "SceSysmemForDriver_SceSysmemForDriver_kscePUIDGetName.S",
            "SceSysmemForDriver_SceSysmemForDriver_kscePUIDGetObject.S",
            "SceSysmemForDriver_SceSysmemForDriver_kscePUIDOpenByGUID.S",
            "SceSysmemForDriver_SceSysmemForDriver_kscePUIDOpenByGUIDWithFlags.S",
            "SceSysmemForDriver_SceSysmemForDriver_kscePUIDOpenByName.S",
            "SceSysmemForDriver_SceSysmemForDriver_kscePUIDOpenByNameWithClass.S",
            "SceSysmemForDriver_SceSysmemForDriver_kscePUIDSetName.S",
            "SceSysmemForDriver_SceSysmemForDriver_kscePUIDtoGUID.S",
            "SceSysmemForDriver_SceSysmemForDriver_kscePUIDtoGUIDWithClass.S",
            "SceSysmemForDriver_SceSysmemForDriver_ksceUIDClassInitClass.S",
        },
    });
}
pub fn buildSceStdio(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceStdio",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceStdio_0931_SceStdio_sceKernelStderr.S",
            "SceStdio_0931_SceStdio_sceKernelStdin.S",
            "SceStdio_0931_SceStdio_sceKernelStdout.S",
        },
    });
}
pub fn buildSceIntrmgrForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceIntrmgrForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceIntrmgrForKernel_363_SceIntrmgrForKernel_ksceKernelQueryIntrHandlerInfo.S",
            "SceIntrmgrForKernel_SceIntrmgrForKernel_ksceKernelQueryIntrHandlerInfo.S",
        },
    });
}
pub fn buildSceProcessmgrForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceProcessmgrForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceProcessmgrForKernel_363_SceProcessmgrForKernel_ksceKernelCreateProcess.S",
            "SceProcessmgrForKernel_363_SceProcessmgrForKernel_ksceKernelExitProcess.S",
            "SceProcessmgrForKernel_363_SceProcessmgrForKernel_ksceKernelGetProcessKernelBuf.S",
            "SceProcessmgrForKernel_363_SceProcessmgrForKernel_ksceKernelGetProcessMainThread.S",
            "SceProcessmgrForKernel_363_SceProcessmgrForKernel_ksceKernelGetProcessModuleInfo.S",
            "SceProcessmgrForKernel_363_SceProcessmgrForKernel_ksceKernelGetProcessSelfAuthInfo.S",
            "SceProcessmgrForKernel_363_SceProcessmgrForKernel_ksceKernelGetUIDProcessClass.S",
            "SceProcessmgrForKernel_363_SceProcessmgrForKernel_ksceKernelLibcGettimeofday.S",
            "SceProcessmgrForKernel_363_SceProcessmgrForKernel_ksceKernelLibcTime.S",
            "SceProcessmgrForKernel_363_SceProcessmgrForKernel_ksceKernelResumeProcess.S",
            "SceProcessmgrForKernel_363_SceProcessmgrForKernel_ksceKernelSuspendProcess.S",
            "SceProcessmgrForKernel_SceProcessmgrForKernel_ksceKernelCreateProcess.S",
            "SceProcessmgrForKernel_SceProcessmgrForKernel_ksceKernelExitProcess.S",
            "SceProcessmgrForKernel_SceProcessmgrForKernel_ksceKernelGetProcessKernelBuf.S",
            "SceProcessmgrForKernel_SceProcessmgrForKernel_ksceKernelGetProcessMainThread.S",
            "SceProcessmgrForKernel_SceProcessmgrForKernel_ksceKernelGetProcessModuleInfo.S",
            "SceProcessmgrForKernel_SceProcessmgrForKernel_ksceKernelGetProcessSelfAuthInfo.S",
            "SceProcessmgrForKernel_SceProcessmgrForKernel_ksceKernelGetUIDProcessClass.S",
            "SceProcessmgrForKernel_SceProcessmgrForKernel_ksceKernelLibcGettimeofday.S",
            "SceProcessmgrForKernel_SceProcessmgrForKernel_ksceKernelLibcTime.S",
            "SceProcessmgrForKernel_SceProcessmgrForKernel_ksceKernelResumeProcess.S",
            "SceProcessmgrForKernel_SceProcessmgrForKernel_ksceKernelSuspendProcess.S",
        },
    });
}
pub fn buildSceExcpmgrForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceExcpmgrForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceExcpmgrForKernel_363_SceExcpmgrForKernel_ksceExcpmgrGetData.S",
            "SceExcpmgrForKernel_363_SceExcpmgrForKernel_ksceExcpmgrRegisterHandler.S",
            "SceExcpmgrForKernel_SceExcpmgrForKernel_ksceExcpmgrGetData.S",
            "SceExcpmgrForKernel_SceExcpmgrForKernel_ksceExcpmgrRegisterHandler.S",
        },
    });
}
pub fn buildSceSysmemForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSysmemForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceGUIDGetObjectWithClass.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceGUIDGetUIDVectorByClass.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceGUIDKernelCreateWithAttr.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceGUIDKernelCreateWithOpt.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceGUIDOpenByGUID.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelAddressSpaceFreeAllMemBlock.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelAddressSpaceSetPhyMemPart.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelAddressSpaceUnmap.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelAddressSpaceVAtoPA.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelAlloc.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelAllocPartitionMemBlock.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelCopyToUserDomain.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelCopyToUserProcTextDomain.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelCopyToUserTextDomain.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelCreateAddressSpace.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelDeleteAddressSpace.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelFindClassByName.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelFree.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelFreeSimpleMemBlock.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelGetFixedHeapInfoByPointer.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelGetHeapInfo.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelGetHeapInfoByPtr.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelGetMemBlockType.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelGetUIDDLinkClass.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelGetUIDHeapClass.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelGetUIDMemBlockClass.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelNameHeapGetInfo.S",
            "SceSysmemForKernel_363_SceSysmemForKernel_ksceKernelUIDEntryHeapGetInfo.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceGUIDGetObjectWithClass.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceGUIDGetUIDVectorByClass.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceGUIDKernelCreateWithAttr.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceGUIDKernelCreateWithOpt.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceGUIDOpenByGUID.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelAddressSpaceFreeAllMemBlock.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelAddressSpaceSetPhyMemPart.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelAddressSpaceUnmap.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelAddressSpaceVAtoPA.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelAlloc.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelAllocPartitionMemBlock.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelCopyToUserDomain.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelCopyToUserProcTextDomain.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelCopyToUserTextDomain.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelCreateAddressSpace.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelDeleteAddressSpace.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelFindClassByName.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelFree.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelFreeSimpleMemBlock.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelGetFixedHeapInfoByPointer.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelGetHeapInfo.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelGetHeapInfoByPtr.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelGetMemBlockType.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelGetUIDDLinkClass.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelGetUIDHeapClass.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelGetUIDMemBlockClass.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelNameHeapGetInfo.S",
            "SceSysmemForKernel_SceSysmemForKernel_ksceKernelUIDEntryHeapGetInfo.S",
        },
    });
}
pub fn buildSceUartForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUartForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUartForKernel_363_SceUartForKernel_ksceUartInit.S",
            "SceUartForKernel_363_SceUartForKernel_ksceUartRead.S",
            "SceUartForKernel_363_SceUartForKernel_ksceUartReadAvailable.S",
            "SceUartForKernel_363_SceUartForKernel_ksceUartWrite.S",
            "SceUartForKernel_SceUartForKernel_ksceUartInit.S",
            "SceUartForKernel_SceUartForKernel_ksceUartRead.S",
            "SceUartForKernel_SceUartForKernel_ksceUartReadAvailable.S",
            "SceUartForKernel_SceUartForKernel_ksceUartWrite.S",
        },
    });
}
pub fn buildSceDebugForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceDebugForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceDebugForKernel_363_SceDebugForKernel_ksceKernelDebugPutchar.S",
            "SceDebugForKernel_363_SceDebugForKernel_ksceKernelEnableCrashDump.S",
            "SceDebugForKernel_363_SceDebugForKernel_ksceKernelGetDebugPutcharHandler.S",
            "SceDebugForKernel_363_SceDebugForKernel_ksceKernelRegisterDebugPutcharHandler.S",
            "SceDebugForKernel_363_SceDebugForKernel_ksceKernelRegisterKprintfHandler.S",
            "SceDebugForKernel_363_SceDebugForKernel_ksceKernelSetAssertLevel.S",
            "SceDebugForKernel_SceDebugForKernel_ksceKernelDebugPutchar.S",
            "SceDebugForKernel_SceDebugForKernel_ksceKernelEnableCrashDump.S",
            "SceDebugForKernel_SceDebugForKernel_ksceKernelGetDebugPutcharHandler.S",
            "SceDebugForKernel_SceDebugForKernel_ksceKernelRegisterDebugPutcharHandler.S",
            "SceDebugForKernel_SceDebugForKernel_ksceKernelRegisterKprintfHandler.S",
            "SceDebugForKernel_SceDebugForKernel_ksceKernelSetAssertLevel.S",
        },
    });
}
pub fn buildSceCpuForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCpuForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelAtomicAdd32AndGet64InHiLoRange.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelAtomicAdd32AndGet64InRange.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelAtomicAddAndGetPositive32InRange.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelAtomicDecIfLowPositive32.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelAtomicGet32AndSet64.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelAtomicGet32AndSet64_2.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelAtomicIncrementHighwaterCounter.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelAtomicLimit64.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelAtomicSubIfGreater64.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelCorelockInitialize.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelCorelockLock.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelCorelockUnlock.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelCpuBranchPredictorInvalidateAll.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelCpuBranchPredictorInvalidateAllIS.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelCpuGetCONTEXTIDR.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelCpuUpdateSCTLR.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelGetVmaccessRange.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelIcacheInvalidateRange.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelL1DcacheClean.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelL1DcacheCleanAll.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelL1DcacheCleanInvalidate.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelL1DcacheCleanInvalidateAll.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelL1DcacheCleanInvalidateRange.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelL1DcacheCleanRange.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelL1DcacheInvalidate.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelL1DcacheInvalidateAll.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelL1DcacheInvalidateRange.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelL1IcacheInvalidateEntire.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelL1IcacheInvalidateEntireAllCore.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelL1IcacheInvalidateRange.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelMMUGetMemoryType.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelMMUVAtoPA.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelMMUVAtoPAWithMode.S",
            "SceCpuForKernel_363_SceCpuForKernel_ksceKernelPleFlushRequest.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelAtomicAdd32AndGet64InHiLoRange.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelAtomicAdd32AndGet64InRange.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelAtomicAddAndGetPositive32InRange.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelAtomicDecIfLowPositive32.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelAtomicGet32AndSet64.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelAtomicGet32AndSet64_2.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelAtomicIncrementHighwaterCounter.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelAtomicLimit64.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelAtomicSubIfGreater64.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelCorelockInitialize.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelCorelockLock.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelCorelockUnlock.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelCpuBranchPredictorInvalidateAll.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelCpuBranchPredictorInvalidateAllIS.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelCpuGetCONTEXTIDR.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelCpuUpdateSCTLR.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelDomainTextMemcpy.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelGetVmaccessRange.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelIcacheInvalidateRange.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelL1DcacheClean.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelL1DcacheCleanAll.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelL1DcacheCleanInvalidate.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelL1DcacheCleanInvalidateAll.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelL1DcacheCleanInvalidateRange.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelL1DcacheCleanRange.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelL1DcacheInvalidate.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelL1DcacheInvalidateAll.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelL1DcacheInvalidateRange.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelL1IcacheInvalidateEntire.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelL1IcacheInvalidateEntireAllCore.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelL1IcacheInvalidateRange.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelMMUGetMemoryType.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelMMUVAtoPA.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelMMUVAtoPAWithMode.S",
            "SceCpuForKernel_SceCpuForKernel_ksceKernelPleFlushRequest.S",
        },
    });
}
pub fn buildSceThreadmgrForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceThreadmgrForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceThreadmgrForKernel_363_SceThreadmgrForKernel_ksceKernelGetThreadContextInfo.S",
            "SceThreadmgrForKernel_SceThreadmgrForKernel_ksceKernelGetThreadContextInfo.S",
        },
    });
}
pub fn buildSceModulemgrForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceModulemgrForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelFinalizeKbl.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetExportedLibraryListInModule.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetImportedLibraryListInModule.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetLibEntCBListForSyslibtrace.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetLibraryClientList.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetLibraryDBFlags.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetLibraryExportInfoForDebugger.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetLibraryInfoForDebugger.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetLibraryList.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetLostLibraryInfo.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetLostLibraryList.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetLostLibraryListInModule.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetMetaDataForDebugger.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetModuleCB.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetModuleCBByAddr.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetModuleEntryPoint.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetModuleFingerprint.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetModuleIdByAddrForDebugger.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetModuleIdByPid.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetModuleInfo.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetModuleInfoForDebugger.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetModuleInfoMinByAddr.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetModuleIsSharedByAddr.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetModuleList.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetModulePath.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetProgramIdentificationInfo.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetStubInfoForDebugger.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetStubList.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelGetStubNidTableForDebugger.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelLoadModuleForPid.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelLoadPreloadingModules.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelLoadProcessImage.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelLoadPtLoadSegForFwloader.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelModuleUnloadMySelf.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelMountBootfs.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelRegisterModulesAfterBoot.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelRegisterSyscall.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelStartModuleForPid.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelStartPreloadingModules.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelStopModuleForPid.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelUmountBootfs.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelUnloadModuleForPid.S",
            "SceModulemgrForKernel_363_SceModulemgrForKernel_ksceKernelUnloadProcessModules.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelFinalizeKbl.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetExportedLibraryListInModule.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetImportedLibraryListInModule.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetLibEntCBListForSyslibtrace.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetLibraryClientList.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetLibraryDBFlags.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetLibraryExportInfoForDebugger.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetLibraryInfoForDebugger.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetLibraryList.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetLostLibraryInfo.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetLostLibraryList.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetLostLibraryListInModule.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetMetaDataForDebugger.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetModuleCB.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetModuleCBByAddr.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetModuleEntryPoint.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetModuleFingerprint.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetModuleIdByAddrForDebugger.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetModuleIdByPid.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetModuleInfo.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetModuleInfoForDebugger.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetModuleInfoMinByAddr.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetModuleIsSharedByAddr.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetModuleList.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetModulePath.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetProgramIdentificationInfo.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetStubInfoForDebugger.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetStubList.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelGetStubNidTableForDebugger.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelLoadModuleForPid.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelLoadPreloadingModules.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelLoadProcessImage.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelLoadPtLoadSegForFwloader.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelModuleUnloadMySelf.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelMountBootfs.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelRegisterModulesAfterBoot.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelRegisterSyscall.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelStartModuleForPid.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelStartPreloadingModules.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelStopModuleForPid.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelUmountBootfs.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelUnloadModuleForPid.S",
            "SceModulemgrForKernel_SceModulemgrForKernel_ksceKernelUnloadProcessModules.S",
        },
    });
}
pub fn buildSceLibG729(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLibG729",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLibG729_SceG729_sceG729DecodeCore.S",
            "SceLibG729_SceG729_sceG729DecodeGetContextSize.S",
            "SceLibG729_SceG729_sceG729DecodeInit.S",
            "SceLibG729_SceG729_sceG729DecodeReset.S",
            "SceLibG729_SceG729_sceG729EncodeCore.S",
            "SceLibG729_SceG729_sceG729EncodeGetContextSize.S",
            "SceLibG729_SceG729_sceG729EncodeInit.S",
            "SceLibG729_SceG729_sceG729EncodeReset.S",
        },
    });
}
pub fn buildSceIntrmgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceIntrmgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelClearIntrPending.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelDisableIntr.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelDisableSubIntr.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelEnableIntr.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelEnableSubIntr.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelGetIntrPriority.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelGetIntrTarget.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelIsIntrAllowedInCurrentContext.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelIsIntrPending.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelIsSubInterruptOccurred.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelRegisterIntrHandler.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelRegisterIntrHookHandler.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelRegisterSubIntrHandler.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelReleaseIntrHandler.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelReleaseIntrHookHandler.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelReleaseSubIntrHandler.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelResumeIntr.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelResumeSubIntr.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelSetIntrPriority.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelSetIntrTarget.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelSuspendIntr.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelSuspendSubIntr.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelTriggerSGI.S",
            "SceIntrmgrForDriver_SceIntrmgrForDriver_ksceKernelTriggerSubIntr.S",
        },
    });
}
pub fn buildSceClockgenForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceClockgenForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceClockgenForDriver_SceClockgenForDriver_ksceClockgenWlanBtClkDisable.S",
        },
    });
}
pub fn buildSceTeleportServer(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceTeleportServer",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceTeleportServer_SceTeleportServer_sceTeleportServerSendInitialInfo.S",
        },
    });
}
pub fn buildSceLocationExtension(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLocationExtension",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLocationExtension_SceLibLocationExtension_sceLocationCancelQueryLocationWifiHistory.S",
            "SceLocationExtension_SceLibLocationExtension_sceLocationGetLocationWifiHistory.S",
            "SceLocationExtension_SceLibLocationExtension_sceLocationQueryLocationWifiHistory.S",
        },
    });
}
pub fn buildSceOledForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceOledForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceOledForDriver_SceOledForDriver_ksceOledDisplayOff.S",
            "SceOledForDriver_SceOledForDriver_ksceOledDisplayOn.S",
            "SceOledForDriver_SceOledForDriver_ksceOledGetBrightness.S",
            "SceOledForDriver_SceOledForDriver_ksceOledGetDDB.S",
            "SceOledForDriver_SceOledForDriver_ksceOledGetDisplayColorSpaceMode.S",
            "SceOledForDriver_SceOledForDriver_ksceOledSetBrightness.S",
            "SceOledForDriver_SceOledForDriver_ksceOledSetDisplayColorSpaceMode.S",
            "SceOledForDriver_SceOledForDriver_ksceOledWaitReady.S",
        },
    });
}
pub fn buildScePgf(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePgf",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePgf_ScePgf_sceFontClose.S",
            "ScePgf_ScePgf_sceFontDoneLib.S",
            "ScePgf_ScePgf_sceFontFindFont.S",
            "ScePgf_ScePgf_sceFontFindOptimumFont.S",
            "ScePgf_ScePgf_sceFontFlush.S",
            "ScePgf_ScePgf_sceFontGetCharGlyphImage.S",
            "ScePgf_ScePgf_sceFontGetCharGlyphImage_Clip.S",
            "ScePgf_ScePgf_sceFontGetCharImageRect.S",
            "ScePgf_ScePgf_sceFontGetCharInfo.S",
            "ScePgf_ScePgf_sceFontGetFontInfo.S",
            "ScePgf_ScePgf_sceFontGetFontInfoByIndexNumber.S",
            "ScePgf_ScePgf_sceFontGetFontList.S",
            "ScePgf_ScePgf_sceFontGetNumFontList.S",
            "ScePgf_ScePgf_sceFontNewLib.S",
            "ScePgf_ScePgf_sceFontOpen.S",
            "ScePgf_ScePgf_sceFontOpenUserFile.S",
            "ScePgf_ScePgf_sceFontOpenUserMemory.S",
            "ScePgf_ScePgf_sceFontPixelToPointH.S",
            "ScePgf_ScePgf_sceFontPixelToPointV.S",
            "ScePgf_ScePgf_sceFontPointToPixelH.S",
            "ScePgf_ScePgf_sceFontPointToPixelV.S",
            "ScePgf_ScePgf_sceFontSetAltCharacterCode.S",
            "ScePgf_ScePgf_sceFontSetResolution.S",
        },
    });
}
pub fn buildSceLocation(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLocation",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLocation_SceLibLocation_sceLocationCancelGetLocation.S",
            "SceLocation_SceLibLocation_sceLocationClose.S",
            "SceLocation_SceLibLocation_sceLocationConfirm.S",
            "SceLocation_SceLibLocation_sceLocationConfirmAbort.S",
            "SceLocation_SceLibLocation_sceLocationConfirmGetResult.S",
            "SceLocation_SceLibLocation_sceLocationConfirmGetStatus.S",
            "SceLocation_SceLibLocation_sceLocationDenyApplication.S",
            "SceLocation_SceLibLocation_sceLocationGetHeading.S",
            "SceLocation_SceLibLocation_sceLocationGetLocation.S",
            "SceLocation_SceLibLocation_sceLocationGetLocationWithTimeout.S",
            "SceLocation_SceLibLocation_sceLocationGetMethod.S",
            "SceLocation_SceLibLocation_sceLocationGetPermission.S",
            "SceLocation_SceLibLocation_sceLocationInit.S",
            "SceLocation_SceLibLocation_sceLocationOpen.S",
            "SceLocation_SceLibLocation_sceLocationReopen.S",
            "SceLocation_SceLibLocation_sceLocationSetGpsEmulationFile.S",
            "SceLocation_SceLibLocation_sceLocationSetThreadParameter.S",
            "SceLocation_SceLibLocation_sceLocationStartHeadingCallback.S",
            "SceLocation_SceLibLocation_sceLocationStartLocationCallback.S",
            "SceLocation_SceLibLocation_sceLocationStopHeadingCallback.S",
            "SceLocation_SceLibLocation_sceLocationStopLocationCallback.S",
            "SceLocation_SceLibLocation_sceLocationTerm.S",
        },
    });
}
pub fn buildSceNpSnsFacebook(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpSnsFacebook",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpSnsFacebook_SceNpSnsFacebook_sceNpSnsFacebookAbortRequest.S",
            "SceNpSnsFacebook_SceNpSnsFacebook_sceNpSnsFacebookCreateRequest.S",
            "SceNpSnsFacebook_SceNpSnsFacebook_sceNpSnsFacebookDeleteRequest.S",
            "SceNpSnsFacebook_SceNpSnsFacebook_sceNpSnsFacebookGetAccessToken.S",
            "SceNpSnsFacebook_SceNpSnsFacebook_sceNpSnsFacebookGetLongAccessToken.S",
            "SceNpSnsFacebook_SceNpSnsFacebook_sceNpSnsFacebookInit.S",
            "SceNpSnsFacebook_SceNpSnsFacebook_sceNpSnsFacebookTerm.S",
        },
    });
}
pub fn buildSceSysconForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSysconForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSysconForDriver_SceSysconForDriver_ksceSysconBatteryExecBLCommand.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconBatteryReadBLCommand.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconBatterySWReset.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconBatterySetBLCommand.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconBatteryStartBLMode.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconBatteryStopBLMode.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconBeginConfigstorageTransaction.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconClearTemperatureLog.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCmdExec.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCmdExecAsync.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCmdSync.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCommitConfigstorageTransaction.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlAccPower.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlDevKitUsbPower.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlDeviceReset.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlDolceLED.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlDolceUsbPower.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlHdmiCecPower.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlHostOutputViaDongle.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlLED.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlManualChargeMode.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlRMRPower.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlSdPower.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlWirelessPower.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconCtrlWirelessPowerDown.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconEnableHibernateIO.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconEndConfigstorageTransaction.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetBaryonTimestamp.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetBaryonVersion.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetBatteryCalibData.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetBatteryVersion.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetControlsInfo.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetHardwareInfo.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetHardwareInfo2.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetLogInfo.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetManualChargeMode.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetManufacturesStatus.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetMultiCnInfo.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetTemperatureLog.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetTouchpanelDeviceInfo.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconGetUsbDetStatus.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconIduModeClear.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconIduModeSet.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconIsDownLoaderMode.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconIsLowBatteryInhibitUpdateDownload.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconIsLowBatteryInhibitUpdateReboot.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconJigClosePort.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconJigOpenPort.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconJigSetConfig.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconLoadConfigstorageScript.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconLogReadData.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconLogStart.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconLogStartWaiting.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconNvsReadData.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconNvsSetRunMode.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconNvsWriteData.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconReadCommand.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconSendCommand.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconSetAlarmCallback.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconSetDebugHandlers.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconSetLowBatteryCallback.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconSetMultiCnPort.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconSetPowerMode.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconSetThermalAlertCallback.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconShowModeClear.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconShowModeSet.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconUpdaterCalcChecksum.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconUpdaterExecFinalize.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconUpdaterExecProgramming.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconUpdaterSetRunMode.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconUpdaterSetSegment.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconVerifyConfigstorageScript.S",
            "SceSysconForDriver_SceSysconForDriver_ksceSysconWaitInitialized.S",
        },
    });
}
pub fn buildSceTriggerUtil(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceTriggerUtil",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceTriggerUtil_SceTriggerUtil_sceTriggerUtilGetAutoStartStatus.S",
            "SceTriggerUtil_SceTriggerUtil_sceTriggerUtilGetDailyEventInfo.S",
            "SceTriggerUtil_SceTriggerUtil_sceTriggerUtilGetOneTimeEventInfo.S",
            "SceTriggerUtil_SceTriggerUtil_sceTriggerUtilGetRegisteredSystemTitleIdList.S",
            "SceTriggerUtil_SceTriggerUtil_sceTriggerUtilGetRegisteredUserTitleIdList.S",
            "SceTriggerUtil_SceTriggerUtil_sceTriggerUtilGetSystemAppInfo.S",
            "SceTriggerUtil_SceTriggerUtil_sceTriggerUtilGetUserAppInfo.S",
            "SceTriggerUtil_SceTriggerUtil_sceTriggerUtilRegisterDailyEvent.S",
            "SceTriggerUtil_SceTriggerUtil_sceTriggerUtilRegisterOneTimeEvent.S",
            "SceTriggerUtil_SceTriggerUtil_sceTriggerUtilUnregisterDailyEvent.S",
            "SceTriggerUtil_SceTriggerUtil_sceTriggerUtilUnregisterOneTimeEvent.S",
        },
    });
}
pub fn buildSceSystemGesture(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSystemGesture",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSystemGesture_SceSystemGesture_sceSystemGestureCreateTouchRecognizer.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureFinalizePrimitiveTouchRecognizer.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureGetPrimitiveTouchEventByIndex.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureGetPrimitiveTouchEventByPrimitiveID.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureGetPrimitiveTouchEvents.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureGetPrimitiveTouchEventsCount.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureGetTouchEventByEventID.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureGetTouchEventByIndex.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureGetTouchEvents.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureGetTouchEventsCount.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureGetTouchRecognizerInformation.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureInitializePrimitiveTouchRecognizer.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureResetPrimitiveTouchRecognizer.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureResetTouchRecognizer.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureUpdatePrimitiveTouchRecognizer.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureUpdateTouchRecognizer.S",
            "SceSystemGesture_SceSystemGesture_sceSystemGestureUpdateTouchRecognizerRectangle.S",
        },
    });
}
pub fn buildSceNpWebApi(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpWebApi",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpWebApi_SceNpWebApi_sceNpWebApiAbortHandle.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiAbortRequest.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiAddHttpRequestHeader.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiAddMultipartPart.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiCheckCallback.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiCreateExtdPushEventFilter.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiCreateHandle.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiCreateMultipartRequest.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiCreatePushEventFilter.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiCreateRequest.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiCreateServicePushEventFilter.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiDeleteExtdPushEventFilter.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiDeleteHandle.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiDeletePushEventFilter.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiDeleteRequest.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiDeleteServicePushEventFilter.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiGetErrorCode.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiGetHttpResponseHeaderValue.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiGetHttpResponseHeaderValueLength.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiGetHttpStatusCode.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiGetMemoryPoolStats.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiGetNpTitleId.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiInitialize.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiReadData.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiRegisterExtdPushEventCallback.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiRegisterPushEventCallback.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiRegisterServicePushEventCallback.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiSendMultipartRequest.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiSendMultipartRequest2.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiSendRequest.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiSendRequest2.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiSetMultipartContentType.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiSetNpTitleId.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiTerminate.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiUnregisterExtdPushEventCallback.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiUnregisterPushEventCallback.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiUnregisterServicePushEventCallback.S",
            "SceNpWebApi_SceNpWebApi_sceNpWebApiUtilityParseNpId.S",
        },
    });
}
pub fn buildSceRazorHud(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceRazorHud",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceRazorHud_SceRazorHud_sceRazorCpuHudSetUserMarkerTraceBuffer.S",
            "SceRazorHud_SceRazorHud_sceRazorCpuHudUserMarkerEnableAllThreads.S",
            "SceRazorHud_SceRazorHud_sceRazorCpuHudUserMarkerEnableThreadId.S",
            "SceRazorHud_SceRazorHud_sceRazorGpuLiveSetBuffer.S",
            "SceRazorHud_SceRazorHud_sceRazorGpuLiveSetMetricsGroup.S",
            "SceRazorHud_SceRazorHud_sceRazorGpuLiveStart.S",
            "SceRazorHud_SceRazorHud_sceRazorGpuLiveStop.S",
            "SceRazorHud_SceRazorHud_sceRazorGpuLiveTriggerDebugDump.S",
            "SceRazorHud_SceRazorHud_sceRazorGpuPerfGetMode.S",
            "SceRazorHud_SceRazorHud_sceRazorGpuTraceRingBufferSize.S",
            "SceRazorHud_SceRazorHud_sceRazorGpuTraceRingBufferUsed.S",
            "SceRazorHud_SceRazorHud_sceRazorGpuTraceSetFilename.S",
            "SceRazorHud_SceRazorHud_sceRazorGpuTraceSetMetricsGroup.S",
            "SceRazorHud_SceRazorHud_sceRazorGpuTraceTrigger.S",
            "SceRazorHud_SceRazorHud_sceRazorHudReloadSettings.S",
            "SceRazorHud_SceRazorHud_sceRazorHudSetDisplayEnabled.S",
            "SceRazorHud_SceRazorHud_sceRazorHudSetDisplayFrameCount.S",
        },
    });
}
pub fn buildSceSysmodule(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSysmodule",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSysmodule_SceSysmodule_sceSysmoduleIsLoaded.S",
            "SceSysmodule_SceSysmodule_sceSysmoduleIsLoadedInternal.S",
            "SceSysmodule_SceSysmodule_sceSysmoduleLoadModule.S",
            "SceSysmodule_SceSysmodule_sceSysmoduleLoadModuleInternal.S",
            "SceSysmodule_SceSysmodule_sceSysmoduleLoadModuleInternalWithArg.S",
            "SceSysmodule_SceSysmodule_sceSysmoduleUnloadModule.S",
            "SceSysmodule_SceSysmodule_sceSysmoduleUnloadModuleInternal.S",
            "SceSysmodule_SceSysmodule_sceSysmoduleUnloadModuleInternalWithArg.S",
        },
    });
}
pub fn buildScePvf(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePvf",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePvf_ScePvf___scePvfSetFt2DoneLibCHook.S",
            "ScePvf_ScePvf___scePvfSetFt2LibCHook.S",
            "ScePvf_ScePvf_scePvfClose.S",
            "ScePvf_ScePvf_scePvfDoneLib.S",
            "ScePvf_ScePvf_scePvfFindFont.S",
            "ScePvf_ScePvf_scePvfFindOptimumFont.S",
            "ScePvf_ScePvf_scePvfFlush.S",
            "ScePvf_ScePvf_scePvfGetCharGlyphImage.S",
            "ScePvf_ScePvf_scePvfGetCharGlyphImage_Clip.S",
            "ScePvf_ScePvf_scePvfGetCharGlyphOutline.S",
            "ScePvf_ScePvf_scePvfGetCharImageRect.S",
            "ScePvf_ScePvf_scePvfGetCharInfo.S",
            "ScePvf_ScePvf_scePvfGetFontInfo.S",
            "ScePvf_ScePvf_scePvfGetFontInfoByIndexNumber.S",
            "ScePvf_ScePvf_scePvfGetFontList.S",
            "ScePvf_ScePvf_scePvfGetKerningInfo.S",
            "ScePvf_ScePvf_scePvfGetNumFontList.S",
            "ScePvf_ScePvf_scePvfGetVertCharGlyphImage.S",
            "ScePvf_ScePvf_scePvfGetVertCharGlyphImage_Clip.S",
            "ScePvf_ScePvf_scePvfGetVertCharGlyphOutline.S",
            "ScePvf_ScePvf_scePvfGetVertCharImageRect.S",
            "ScePvf_ScePvf_scePvfGetVertCharInfo.S",
            "ScePvf_ScePvf_scePvfIsElement.S",
            "ScePvf_ScePvf_scePvfIsVertElement.S",
            "ScePvf_ScePvf_scePvfNewLib.S",
            "ScePvf_ScePvf_scePvfOpen.S",
            "ScePvf_ScePvf_scePvfOpenDefaultJapaneseFontOnSharedMemory.S",
            "ScePvf_ScePvf_scePvfOpenDefaultLatinFontOnSharedMemory.S",
            "ScePvf_ScePvf_scePvfOpenUserFile.S",
            "ScePvf_ScePvf_scePvfOpenUserFileWithSubfontIndex.S",
            "ScePvf_ScePvf_scePvfOpenUserMemory.S",
            "ScePvf_ScePvf_scePvfOpenUserMemoryWithSubfontIndex.S",
            "ScePvf_ScePvf_scePvfPixelToPointH.S",
            "ScePvf_ScePvf_scePvfPixelToPointV.S",
            "ScePvf_ScePvf_scePvfPointToPixelH.S",
            "ScePvf_ScePvf_scePvfPointToPixelV.S",
            "ScePvf_ScePvf_scePvfReleaseCharGlyphOutline.S",
            "ScePvf_ScePvf_scePvfSetAltCharacterCode.S",
            "ScePvf_ScePvf_scePvfSetCharSize.S",
            "ScePvf_ScePvf_scePvfSetEM.S",
            "ScePvf_ScePvf_scePvfSetEmboldenRate.S",
            "ScePvf_ScePvf_scePvfSetResolution.S",
            "ScePvf_ScePvf_scePvfSetSkewValue.S",
        },
    });
}
pub fn buildSceLsdb(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLsdb",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLsdb_SceLsdb_sceLsdbGetAppVer.S",
            "SceLsdb_SceLsdb_sceLsdbGetAttribute.S",
            "SceLsdb_SceLsdb_sceLsdbGetBootable.S",
            "SceLsdb_SceLsdb_sceLsdbGetCategory.S",
            "SceLsdb_SceLsdb_sceLsdbGetDiscId.S",
            "SceLsdb_SceLsdb_sceLsdbGetGameDataId.S",
            "SceLsdb_SceLsdb_sceLsdbGetMetaContentsPath.S",
            "SceLsdb_SceLsdb_sceLsdbGetName.S",
            "SceLsdb_SceLsdb_sceLsdbGetOriginalPath.S",
            "SceLsdb_SceLsdb_sceLsdbGetParentalLevel.S",
            "SceLsdb_SceLsdb_sceLsdbGetSelfPath.S",
            "SceLsdb_SceLsdb_sceLsdbGetStitle.S",
            "SceLsdb_SceLsdb_sceLsdbGetSystemVersion.S",
            "SceLsdb_SceLsdb_sceLsdbGetTitle.S",
            "SceLsdb_SceLsdb_sceLsdbGetType.S",
        },
    });
}
pub fn buildSceNpCommon(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpCommon",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpCommon_SceNpCommon_sceNpAuthAbortRequest.S",
            "SceNpCommon_SceNpCommon_sceNpAuthCreateStartRequest.S",
            "SceNpCommon_SceNpCommon_sceNpAuthDestroyRequest.S",
            "SceNpCommon_SceNpCommon_sceNpAuthGetEntitlementById.S",
            "SceNpCommon_SceNpCommon_sceNpAuthGetEntitlementByIdPrefix.S",
            "SceNpCommon_SceNpCommon_sceNpAuthGetEntitlementIdList.S",
            "SceNpCommon_SceNpCommon_sceNpAuthGetTicket.S",
            "SceNpCommon_SceNpCommon_sceNpAuthGetTicketParam.S",
            "SceNpCommon_SceNpCommon_sceNpAuthInit.S",
            "SceNpCommon_SceNpCommon_sceNpAuthTerm.S",
            "SceNpCommon_SceNpCommon_sceNpCmpNpId.S",
            "SceNpCommon_SceNpCommon_sceNpCmpNpIdInOrder.S",
            "SceNpCommon_SceNpCommon_sceNpCmpOnlineId.S",
            "SceNpCommon_SceNpCommon_sceNpCommonBase64Encode.S",
            "SceNpCommon_SceNpCommon_sceNpCommonFreeNpServerName.S",
            "SceNpCommon_SceNpCommon_sceNpCommonGetNpEnviroment.S",
            "SceNpCommon_SceNpCommon_sceNpCommonGetSystemSwVersion.S",
            "SceNpCommon_SceNpCommon_sceNpCommonMallocNpServerName.S",
            "SceNpCommon_SceNpCommon_sceNpGetPlatformType.S",
            "SceNpCommon_SceNpCommon_sceNpSetPlatformType.S",
        },
    });
}
pub fn buildSceNpTus(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpTus",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpTus_SceNpTus_sceNpTssGetData.S",
            "SceNpTus_SceNpTus_sceNpTssGetDataAsync.S",
            "SceNpTus_SceNpTus_sceNpTssGetDataNoLimit.S",
            "SceNpTus_SceNpTus_sceNpTssGetDataNoLimitAsync.S",
            "SceNpTus_SceNpTus_sceNpTssGetSmallStorage.S",
            "SceNpTus_SceNpTus_sceNpTssGetSmallStorageAsync.S",
            "SceNpTus_SceNpTus_sceNpTssGetStorage.S",
            "SceNpTus_SceNpTus_sceNpTssGetStorageAsync.S",
            "SceNpTus_SceNpTus_sceNpTusAbortRequest.S",
            "SceNpTus_SceNpTus_sceNpTusAddAndGetVariable.S",
            "SceNpTus_SceNpTus_sceNpTusAddAndGetVariableAsync.S",
            "SceNpTus_SceNpTus_sceNpTusAddAndGetVariableVUser.S",
            "SceNpTus_SceNpTus_sceNpTusAddAndGetVariableVUserAsync.S",
            "SceNpTus_SceNpTus_sceNpTusChangeModeForOtherSaveDataOwners.S",
            "SceNpTus_SceNpTus_sceNpTusCreateRequest.S",
            "SceNpTus_SceNpTus_sceNpTusCreateTitleCtx.S",
            "SceNpTus_SceNpTus_sceNpTusDeleteMultiSlotData.S",
            "SceNpTus_SceNpTus_sceNpTusDeleteMultiSlotDataAsync.S",
            "SceNpTus_SceNpTus_sceNpTusDeleteMultiSlotDataVUser.S",
            "SceNpTus_SceNpTus_sceNpTusDeleteMultiSlotDataVUserAsync.S",
            "SceNpTus_SceNpTus_sceNpTusDeleteMultiSlotVariable.S",
            "SceNpTus_SceNpTus_sceNpTusDeleteMultiSlotVariableAsync.S",
            "SceNpTus_SceNpTus_sceNpTusDeleteMultiSlotVariableVUser.S",
            "SceNpTus_SceNpTus_sceNpTusDeleteMultiSlotVariableVUserAsync.S",
            "SceNpTus_SceNpTus_sceNpTusDeleteRequest.S",
            "SceNpTus_SceNpTus_sceNpTusDeleteTitleCtx.S",
            "SceNpTus_SceNpTus_sceNpTusGetData.S",
            "SceNpTus_SceNpTus_sceNpTusGetDataAsync.S",
            "SceNpTus_SceNpTus_sceNpTusGetDataVUser.S",
            "SceNpTus_SceNpTus_sceNpTusGetDataVUserAsync.S",
            "SceNpTus_SceNpTus_sceNpTusGetFriendsDataStatus.S",
            "SceNpTus_SceNpTus_sceNpTusGetFriendsDataStatusAsync.S",
            "SceNpTus_SceNpTus_sceNpTusGetFriendsVariable.S",
            "SceNpTus_SceNpTus_sceNpTusGetFriendsVariableAsync.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiSlotDataStatus.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiSlotDataStatusAsync.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiSlotDataStatusVUser.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiSlotDataStatusVUserAsync.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiSlotVariable.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiSlotVariableAsync.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiSlotVariableVUser.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiSlotVariableVUserAsync.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiUserDataStatus.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiUserDataStatusAsync.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiUserDataStatusVUser.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiUserDataStatusVUserAsync.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiUserVariable.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiUserVariableAsync.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiUserVariableVUser.S",
            "SceNpTus_SceNpTus_sceNpTusGetMultiUserVariableVUserAsync.S",
            "SceNpTus_SceNpTus_sceNpTusInit.S",
            "SceNpTus_SceNpTus_sceNpTusPollAsync.S",
            "SceNpTus_SceNpTus_sceNpTusSetData.S",
            "SceNpTus_SceNpTus_sceNpTusSetDataAsync.S",
            "SceNpTus_SceNpTus_sceNpTusSetDataVUser.S",
            "SceNpTus_SceNpTus_sceNpTusSetDataVUserAsync.S",
            "SceNpTus_SceNpTus_sceNpTusSetMultiSlotVariable.S",
            "SceNpTus_SceNpTus_sceNpTusSetMultiSlotVariableAsync.S",
            "SceNpTus_SceNpTus_sceNpTusSetMultiSlotVariableVUser.S",
            "SceNpTus_SceNpTus_sceNpTusSetMultiSlotVariableVUserAsync.S",
            "SceNpTus_SceNpTus_sceNpTusSetTimeout.S",
            "SceNpTus_SceNpTus_sceNpTusTerm.S",
            "SceNpTus_SceNpTus_sceNpTusTryAndSetVariable.S",
            "SceNpTus_SceNpTus_sceNpTusTryAndSetVariableAsync.S",
            "SceNpTus_SceNpTus_sceNpTusTryAndSetVariableVUser.S",
            "SceNpTus_SceNpTus_sceNpTusTryAndSetVariableVUserAsync.S",
            "SceNpTus_SceNpTus_sceNpTusWaitAsync.S",
        },
    });
}
pub fn buildSceMtpIfDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceMtpIfDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceMtpIfDriver_SceMtpIf_sceMtpIfCancelTransfer.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfChangePhase.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfGetPort.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfIsConnected.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfRecvCommand.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfRecvDataWithParam.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfReset.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfSendDataWithParam.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfSendEvent.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfSendResponse.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfStartDriver.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfStartPort.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfStopDriver.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfStopPort.S",
            "SceMtpIfDriver_SceMtpIf_sceMtpIfWaitConnect.S",
        },
    });
}
pub fn buildSceLibJson(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLibJson",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLibJson_SceLibJson__ZN3sce4Json11Initializer10initializeEPKNS0_13InitParameterE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json11Initializer24setAllocatorInfoCallBackEPFviNS0_9ValueTypeEPvES3_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json11Initializer9terminateEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json11InitializerC1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json11InitializerC2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json11InitializerD1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json11InitializerD2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json12MemAllocator11notifyErrorEijPv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json12MemAllocatorC1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json12MemAllocatorC2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json12MemAllocatorD0Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json12MemAllocatorD1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json12MemAllocatorD2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array5clearEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array5eraseERKNS1_8iteratorE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array6insertERKNS1_8iteratorERKNS0_5ValueE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array8iterator7advanceEj.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array8iteratorC1ERKS2_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array8iteratorC1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array8iteratorC2ERKS2_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array8iteratorC2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array8iteratorD1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array8iteratorD2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array8iteratoraSERKS2_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array8iteratorppEi.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array8iteratorppEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array8pop_backEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Array9push_backERKNS0_5ValueE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ArrayC1ERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ArrayC1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ArrayC2ERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ArrayC2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ArrayD1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ArrayD2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ArrayaSERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value10referArrayEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value10referValueERKNS0_6StringE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value10referValueEj.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value11referObjectEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value11referStringEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value12referBooleanEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value12referIntegerEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value13referUIntegerEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value21setNullAccessCallbackEPFRKS1_NS0_9ValueTypeEPS2_PvES6_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value3setENS0_9ValueTypeE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value3setERKNS0_5ArrayE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value3setERKNS0_6ObjectE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value3setERKNS0_6StringE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value3setERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value3setEb.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value3setEd.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value3setEx.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value3setEy.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value4swapERS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value5clearEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value9referRealEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value9serializeERNS0_6StringE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5Value9serializeERNS0_6StringEPFiS3_PvES4_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC1ENS0_9ValueTypeE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC1ERKNS0_5ArrayE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC1ERKNS0_6ObjectE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC1ERKNS0_6StringE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC1ERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC1Eb.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC1Ed.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC1Ex.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC1Ey.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC2ENS0_9ValueTypeE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC2ERKNS0_5ArrayE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC2ERKNS0_6ObjectE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC2ERKNS0_6StringE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC2ERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC2Eb.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC2Ed.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC2Ex.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueC2Ey.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueD1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueD2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json5ValueaSERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object4PairC1ERKNS0_6StringERKNS0_5ValueE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object4PairC1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object4PairC2ERKNS0_6StringERKNS0_5ValueE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object4PairC2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object4PairD1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object4PairD2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object5clearEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object5eraseERKNS0_6StringE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object6insertERKNS1_4PairE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object8iterator7advanceEj.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object8iteratorC1ERKS2_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object8iteratorC1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object8iteratorC2ERKS2_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object8iteratorC2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object8iteratorD1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object8iteratorD2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object8iteratoraSERKS2_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object8iteratorppEi.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Object8iteratorppEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6ObjectC1ERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6ObjectC1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6ObjectC2ERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6ObjectC2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6ObjectD1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6ObjectD2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6ObjectaSERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6ObjectixERKNS0_6StringE.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Parser5parseERNS0_5ValueEPFiRcPvES5_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Parser5parseERNS0_5ValueEPKc.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6Parser5parseERNS0_5ValueEPKcj.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6String5clearEv.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6String6appendEPKc.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6String6appendEPKcj.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6String6appendERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6String6resizeEj.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6StringC1EPKc.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6StringC1ERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6StringC1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6StringC2EPKc.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6StringC2ERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6StringC2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6StringD1Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6StringD2Ev.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6StringaSERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6StringpLEPKc.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6StringpLEh.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Array3endEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Array4backEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Array4sizeEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Array5beginEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Array5emptyEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Array8iteratordeEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Array8iteratorneES2_.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Array8iteratorptEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value10getBooleanEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value10getIntegerEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value11getUIntegerEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value5countEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value7getRealEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value7getRootEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value7getTypeEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value8getArrayEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value8getValueERKNS0_6StringE.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value8getValueEj.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value8toStringERNS0_6StringE.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value9getObjectEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5Value9getStringEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5ValuecvbEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5ValueixEPKc.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5ValueixERKNS0_6StringE.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json5ValueixEj.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6Object3endEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6Object4findERKNS0_6StringE.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6Object4sizeEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6Object5beginEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6Object5emptyEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6Object8iteratordeEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6Object8iteratoreqES2_.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6Object8iteratorneES2_.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6Object8iteratorptEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String2atEj.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String4findEPKcj.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String4findEPKcjj.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String4findERKS1_j.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String4findEcj.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String4sizeEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String5c_strEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String5emptyEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String5rfindEPKcj.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String5rfindEPKcjj.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String5rfindERKS1_j.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String5rfindEcj.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String6lengthEv.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String6substrEjj.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String7compareEPKc.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6String7compareERKS1_.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6StringeqEPKc.S",
            "SceLibJson_SceLibJson__ZNK3sce4Json6StringeqERKS1_.S",
            "SceLibJson_SceLibJson__ZN3sce4Json6String4nposE.S",
        },
    });
}
pub fn buildSceError(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceError",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceError_SceError__sceErrorGetExternalString.S",
            "SceError_SceError__sceErrorHistoryClearError.S",
            "SceError_SceError__sceErrorHistoryGetError.S",
            "SceError_SceError__sceErrorHistoryPostError.S",
            "SceError_SceError__sceErrorHistorySetDefaultFormat.S",
            "SceError_SceError__sceErrorHistoryUpdateSequenceInfo.S",
            "SceError_SceErrorUser_sceErrorGetExternalString.S",
            "SceError_SceErrorUser_sceErrorHistoryClearError.S",
            "SceError_SceErrorUser_sceErrorHistoryGetError.S",
            "SceError_SceErrorUser_sceErrorHistoryPostError.S",
            "SceError_SceErrorUser_sceErrorHistorySetDefaultFormat.S",
            "SceError_SceErrorUser_sceErrorHistoryUpdateSequenceInfo.S",
        },
    });
}
pub fn buildSceLibDbg(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLibDbg",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLibDbg_SceDbg_sceDbgAssertionHandler.S",
            "SceLibDbg_SceDbg_sceDbgLoggingHandler.S",
            "SceLibDbg_SceDbg_sceDbgSetBreakOnErrorState.S",
            "SceLibDbg_SceDbg_sceDbgSetBreakOnWarningState.S",
            "SceLibDbg_SceDbg_sceDbgSetMinimumLogLevel.S",
        },
    });
}
pub fn buildSceUlobjMgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUlobjMgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUlobjMgr_SceUlobjMgr__sceUlobjMgrRegisterLibultProtocolRevision.S",
            "SceUlobjMgr_SceUlobjMgr__sceUlobjMgrStartSupportingUserlevelObject.S",
            "SceUlobjMgr_SceUlobjMgr__sceUlobjMgrStopSupportingUserlevelObject.S",
        },
    });
}
pub fn buildSceSqlite(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSqlite",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSqlite_SceSqlite_sceSqliteConfigMallocMethods.S",
            "SceSqlite_SceSqlite_sqlite3_aggregate_context.S",
            "SceSqlite_SceSqlite_sqlite3_aggregate_count.S",
            "SceSqlite_SceSqlite_sqlite3_auto_extension.S",
            "SceSqlite_SceSqlite_sqlite3_backup_finish.S",
            "SceSqlite_SceSqlite_sqlite3_backup_init.S",
            "SceSqlite_SceSqlite_sqlite3_backup_pagecount.S",
            "SceSqlite_SceSqlite_sqlite3_backup_remaining.S",
            "SceSqlite_SceSqlite_sqlite3_backup_step.S",
            "SceSqlite_SceSqlite_sqlite3_bind_blob.S",
            "SceSqlite_SceSqlite_sqlite3_bind_double.S",
            "SceSqlite_SceSqlite_sqlite3_bind_int.S",
            "SceSqlite_SceSqlite_sqlite3_bind_int64.S",
            "SceSqlite_SceSqlite_sqlite3_bind_null.S",
            "SceSqlite_SceSqlite_sqlite3_bind_parameter_count.S",
            "SceSqlite_SceSqlite_sqlite3_bind_parameter_index.S",
            "SceSqlite_SceSqlite_sqlite3_bind_parameter_name.S",
            "SceSqlite_SceSqlite_sqlite3_bind_text.S",
            "SceSqlite_SceSqlite_sqlite3_bind_text16.S",
            "SceSqlite_SceSqlite_sqlite3_bind_value.S",
            "SceSqlite_SceSqlite_sqlite3_bind_zeroblob.S",
            "SceSqlite_SceSqlite_sqlite3_blob_bytes.S",
            "SceSqlite_SceSqlite_sqlite3_blob_close.S",
            "SceSqlite_SceSqlite_sqlite3_blob_open.S",
            "SceSqlite_SceSqlite_sqlite3_blob_read.S",
            "SceSqlite_SceSqlite_sqlite3_blob_write.S",
            "SceSqlite_SceSqlite_sqlite3_busy_handler.S",
            "SceSqlite_SceSqlite_sqlite3_busy_timeout.S",
            "SceSqlite_SceSqlite_sqlite3_changes.S",
            "SceSqlite_SceSqlite_sqlite3_clear_bindings.S",
            "SceSqlite_SceSqlite_sqlite3_close.S",
            "SceSqlite_SceSqlite_sqlite3_collation_needed.S",
            "SceSqlite_SceSqlite_sqlite3_collation_needed16.S",
            "SceSqlite_SceSqlite_sqlite3_column_blob.S",
            "SceSqlite_SceSqlite_sqlite3_column_bytes.S",
            "SceSqlite_SceSqlite_sqlite3_column_bytes16.S",
            "SceSqlite_SceSqlite_sqlite3_column_count.S",
            "SceSqlite_SceSqlite_sqlite3_column_decltype.S",
            "SceSqlite_SceSqlite_sqlite3_column_decltype16.S",
            "SceSqlite_SceSqlite_sqlite3_column_double.S",
            "SceSqlite_SceSqlite_sqlite3_column_int.S",
            "SceSqlite_SceSqlite_sqlite3_column_int64.S",
            "SceSqlite_SceSqlite_sqlite3_column_name.S",
            "SceSqlite_SceSqlite_sqlite3_column_name16.S",
            "SceSqlite_SceSqlite_sqlite3_column_text.S",
            "SceSqlite_SceSqlite_sqlite3_column_text16.S",
            "SceSqlite_SceSqlite_sqlite3_column_type.S",
            "SceSqlite_SceSqlite_sqlite3_column_value.S",
            "SceSqlite_SceSqlite_sqlite3_commit_hook.S",
            "SceSqlite_SceSqlite_sqlite3_complete.S",
            "SceSqlite_SceSqlite_sqlite3_complete16.S",
            "SceSqlite_SceSqlite_sqlite3_config.S",
            "SceSqlite_SceSqlite_sqlite3_context_db_handle.S",
            "SceSqlite_SceSqlite_sqlite3_create_collation.S",
            "SceSqlite_SceSqlite_sqlite3_create_collation16.S",
            "SceSqlite_SceSqlite_sqlite3_create_collation_v2.S",
            "SceSqlite_SceSqlite_sqlite3_create_function.S",
            "SceSqlite_SceSqlite_sqlite3_create_function16.S",
            "SceSqlite_SceSqlite_sqlite3_create_module.S",
            "SceSqlite_SceSqlite_sqlite3_create_module_v2.S",
            "SceSqlite_SceSqlite_sqlite3_data_count.S",
            "SceSqlite_SceSqlite_sqlite3_db_config.S",
            "SceSqlite_SceSqlite_sqlite3_db_handle.S",
            "SceSqlite_SceSqlite_sqlite3_db_mutex.S",
            "SceSqlite_SceSqlite_sqlite3_db_status.S",
            "SceSqlite_SceSqlite_sqlite3_declare_vtab.S",
            "SceSqlite_SceSqlite_sqlite3_enable_load_extension.S",
            "SceSqlite_SceSqlite_sqlite3_enable_shared_cache.S",
            "SceSqlite_SceSqlite_sqlite3_errcode.S",
            "SceSqlite_SceSqlite_sqlite3_errmsg.S",
            "SceSqlite_SceSqlite_sqlite3_errmsg16.S",
            "SceSqlite_SceSqlite_sqlite3_exec.S",
            "SceSqlite_SceSqlite_sqlite3_expired.S",
            "SceSqlite_SceSqlite_sqlite3_extended_errcode.S",
            "SceSqlite_SceSqlite_sqlite3_extended_result_codes.S",
            "SceSqlite_SceSqlite_sqlite3_file_control.S",
            "SceSqlite_SceSqlite_sqlite3_finalize.S",
            "SceSqlite_SceSqlite_sqlite3_free.S",
            "SceSqlite_SceSqlite_sqlite3_free_table.S",
            "SceSqlite_SceSqlite_sqlite3_get_autocommit.S",
            "SceSqlite_SceSqlite_sqlite3_get_auxdata.S",
            "SceSqlite_SceSqlite_sqlite3_get_table.S",
            "SceSqlite_SceSqlite_sqlite3_global_recover.S",
            "SceSqlite_SceSqlite_sqlite3_initialize.S",
            "SceSqlite_SceSqlite_sqlite3_interrupt.S",
            "SceSqlite_SceSqlite_sqlite3_last_insert_rowid.S",
            "SceSqlite_SceSqlite_sqlite3_libversion.S",
            "SceSqlite_SceSqlite_sqlite3_libversion_number.S",
            "SceSqlite_SceSqlite_sqlite3_limit.S",
            "SceSqlite_SceSqlite_sqlite3_load_extension.S",
            "SceSqlite_SceSqlite_sqlite3_malloc.S",
            "SceSqlite_SceSqlite_sqlite3_memory_alarm.S",
            "SceSqlite_SceSqlite_sqlite3_memory_highwater.S",
            "SceSqlite_SceSqlite_sqlite3_memory_used.S",
            "SceSqlite_SceSqlite_sqlite3_mprintf.S",
            "SceSqlite_SceSqlite_sqlite3_mutex_alloc.S",
            "SceSqlite_SceSqlite_sqlite3_mutex_enter.S",
            "SceSqlite_SceSqlite_sqlite3_mutex_free.S",
            "SceSqlite_SceSqlite_sqlite3_mutex_leave.S",
            "SceSqlite_SceSqlite_sqlite3_mutex_try.S",
            "SceSqlite_SceSqlite_sqlite3_next_stmt.S",
            "SceSqlite_SceSqlite_sqlite3_open.S",
            "SceSqlite_SceSqlite_sqlite3_open16.S",
            "SceSqlite_SceSqlite_sqlite3_open_v2.S",
            "SceSqlite_SceSqlite_sqlite3_os_end.S",
            "SceSqlite_SceSqlite_sqlite3_os_init.S",
            "SceSqlite_SceSqlite_sqlite3_overload_function.S",
            "SceSqlite_SceSqlite_sqlite3_prepare.S",
            "SceSqlite_SceSqlite_sqlite3_prepare16.S",
            "SceSqlite_SceSqlite_sqlite3_prepare16_v2.S",
            "SceSqlite_SceSqlite_sqlite3_prepare_v2.S",
            "SceSqlite_SceSqlite_sqlite3_profile.S",
            "SceSqlite_SceSqlite_sqlite3_progress_handler.S",
            "SceSqlite_SceSqlite_sqlite3_randomness.S",
            "SceSqlite_SceSqlite_sqlite3_realloc.S",
            "SceSqlite_SceSqlite_sqlite3_release_memory.S",
            "SceSqlite_SceSqlite_sqlite3_reset.S",
            "SceSqlite_SceSqlite_sqlite3_reset_auto_extension.S",
            "SceSqlite_SceSqlite_sqlite3_result_blob.S",
            "SceSqlite_SceSqlite_sqlite3_result_double.S",
            "SceSqlite_SceSqlite_sqlite3_result_error.S",
            "SceSqlite_SceSqlite_sqlite3_result_error16.S",
            "SceSqlite_SceSqlite_sqlite3_result_error_code.S",
            "SceSqlite_SceSqlite_sqlite3_result_error_nomem.S",
            "SceSqlite_SceSqlite_sqlite3_result_error_toobig.S",
            "SceSqlite_SceSqlite_sqlite3_result_int.S",
            "SceSqlite_SceSqlite_sqlite3_result_int64.S",
            "SceSqlite_SceSqlite_sqlite3_result_null.S",
            "SceSqlite_SceSqlite_sqlite3_result_text.S",
            "SceSqlite_SceSqlite_sqlite3_result_text16.S",
            "SceSqlite_SceSqlite_sqlite3_result_text16be.S",
            "SceSqlite_SceSqlite_sqlite3_result_text16le.S",
            "SceSqlite_SceSqlite_sqlite3_result_value.S",
            "SceSqlite_SceSqlite_sqlite3_result_zeroblob.S",
            "SceSqlite_SceSqlite_sqlite3_rollback_hook.S",
            "SceSqlite_SceSqlite_sqlite3_set_authorizer.S",
            "SceSqlite_SceSqlite_sqlite3_set_auxdata.S",
            "SceSqlite_SceSqlite_sqlite3_shutdown.S",
            "SceSqlite_SceSqlite_sqlite3_sleep.S",
            "SceSqlite_SceSqlite_sqlite3_snprintf.S",
            "SceSqlite_SceSqlite_sqlite3_soft_heap_limit.S",
            "SceSqlite_SceSqlite_sqlite3_sourceid.S",
            "SceSqlite_SceSqlite_sqlite3_sql.S",
            "SceSqlite_SceSqlite_sqlite3_status.S",
            "SceSqlite_SceSqlite_sqlite3_step.S",
            "SceSqlite_SceSqlite_sqlite3_stmt_status.S",
            "SceSqlite_SceSqlite_sqlite3_strnicmp.S",
            "SceSqlite_SceSqlite_sqlite3_test_control.S",
            "SceSqlite_SceSqlite_sqlite3_thread_cleanup.S",
            "SceSqlite_SceSqlite_sqlite3_threadsafe.S",
            "SceSqlite_SceSqlite_sqlite3_total_changes.S",
            "SceSqlite_SceSqlite_sqlite3_trace.S",
            "SceSqlite_SceSqlite_sqlite3_transfer_bindings.S",
            "SceSqlite_SceSqlite_sqlite3_update_hook.S",
            "SceSqlite_SceSqlite_sqlite3_user_data.S",
            "SceSqlite_SceSqlite_sqlite3_value_blob.S",
            "SceSqlite_SceSqlite_sqlite3_value_bytes.S",
            "SceSqlite_SceSqlite_sqlite3_value_bytes16.S",
            "SceSqlite_SceSqlite_sqlite3_value_double.S",
            "SceSqlite_SceSqlite_sqlite3_value_int.S",
            "SceSqlite_SceSqlite_sqlite3_value_int64.S",
            "SceSqlite_SceSqlite_sqlite3_value_numeric_type.S",
            "SceSqlite_SceSqlite_sqlite3_value_text.S",
            "SceSqlite_SceSqlite_sqlite3_value_text16.S",
            "SceSqlite_SceSqlite_sqlite3_value_text16be.S",
            "SceSqlite_SceSqlite_sqlite3_value_text16le.S",
            "SceSqlite_SceSqlite_sqlite3_value_type.S",
            "SceSqlite_SceSqlite_sqlite3_vfs_find.S",
            "SceSqlite_SceSqlite_sqlite3_vfs_register.S",
            "SceSqlite_SceSqlite_sqlite3_vfs_unregister.S",
            "SceSqlite_SceSqlite_sqlite3_vmprintf.S",
            "SceSqlite_SceSqlite_sqlite3_temp_directory.S",
            "SceSqlite_SceSqlite_sqlite3_version.S",
        },
    });
}
pub fn buildSceNpParty(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpParty",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpParty_SceNpPartyGameUtil_sceNpPartyCheckCallback.S",
            "SceNpParty_SceNpPartyGameUtil_sceNpPartyGetGameSessionReadyState.S",
            "SceNpParty_SceNpPartyGameUtil_sceNpPartyGetId.S",
            "SceNpParty_SceNpPartyGameUtil_sceNpPartyGetMemberInfo.S",
            "SceNpParty_SceNpPartyGameUtil_sceNpPartyGetMemberSessionInfo.S",
            "SceNpParty_SceNpPartyGameUtil_sceNpPartyGetMemberVoiceInfo.S",
            "SceNpParty_SceNpPartyGameUtil_sceNpPartyGetMembers.S",
            "SceNpParty_SceNpPartyGameUtil_sceNpPartyGetState.S",
            "SceNpParty_SceNpPartyGameUtil_sceNpPartyInit.S",
            "SceNpParty_SceNpPartyGameUtil_sceNpPartyRegisterHandler.S",
            "SceNpParty_SceNpPartyGameUtil_sceNpPartyTerm.S",
        },
    });
}
pub fn buildSceLibMono(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLibMono",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLibMono_SceLibMono_mono_security_enable_core_clr.S",
        },
    });
}
pub fn buildSceHid(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceHid",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceHid_SceHid_sceHidConsumerControlEnumerate.S",
            "SceHid_SceHid_sceHidConsumerControlRead.S",
            "SceHid_SceHid_sceHidConsumerControlRegisterEnumHintCallback.S",
            "SceHid_SceHid_sceHidConsumerControlRegisterReadHintCallback.S",
            "SceHid_SceHid_sceHidConsumerControlUnregisterEnumHintCallback.S",
            "SceHid_SceHid_sceHidConsumerControlUnregisterReadHintCallback.S",
            "SceHid_SceHid_sceHidControllerEnumerate.S",
            "SceHid_SceHid_sceHidControllerRead.S",
            "SceHid_SceHid_sceHidControllerRegisterEnumHintCallback.S",
            "SceHid_SceHid_sceHidControllerRegisterReadHintCallback.S",
            "SceHid_SceHid_sceHidControllerUnregisterEnumHintCallback.S",
            "SceHid_SceHid_sceHidControllerUnregisterReadHintCallback.S",
            "SceHid_SceHid_sceHidKeyboardClear.S",
            "SceHid_SceHid_sceHidKeyboardEnumerate.S",
            "SceHid_SceHid_sceHidKeyboardGetIntercept.S",
            "SceHid_SceHid_sceHidKeyboardPeek.S",
            "SceHid_SceHid_sceHidKeyboardRead.S",
            "SceHid_SceHid_sceHidKeyboardRegisterEnumHintCallback.S",
            "SceHid_SceHid_sceHidKeyboardRegisterReadHintCallback.S",
            "SceHid_SceHid_sceHidKeyboardSetIntercept.S",
            "SceHid_SceHid_sceHidKeyboardUnregisterEnumHintCallback.S",
            "SceHid_SceHid_sceHidKeyboardUnregisterReadHintCallback.S",
            "SceHid_SceHid_sceHidMouseEnumerate.S",
            "SceHid_SceHid_sceHidMouseRead.S",
            "SceHid_SceHid_sceHidMouseRegisterEnumHintCallback.S",
            "SceHid_SceHid_sceHidMouseRegisterReadHintCallback.S",
            "SceHid_SceHid_sceHidMouseUnregisterEnumHintCallback.S",
            "SceHid_SceHid_sceHidMouseUnregisterReadHintCallback.S",
        },
    });
}
pub fn buildSceHidForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceHidForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceHidForDriver_SceHidForDriver_ksceHidConsumerControlEnumerate.S",
            "SceHidForDriver_SceHidForDriver_ksceHidConsumerControlRead.S",
            "SceHidForDriver_SceHidForDriver_ksceHidConsumerControlRegisterEnumHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidConsumerControlRegisterReadHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidConsumerControlUnregisterEnumHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidConsumerControlUnregisterReadHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidControllerEnumerate.S",
            "SceHidForDriver_SceHidForDriver_ksceHidControllerRead.S",
            "SceHidForDriver_SceHidForDriver_ksceHidControllerRegisterEnumHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidControllerRegisterReadHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidControllerUnregisterEnumHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidControllerUnregisterReadHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidKeyboardClear.S",
            "SceHidForDriver_SceHidForDriver_ksceHidKeyboardEnumerate.S",
            "SceHidForDriver_SceHidForDriver_ksceHidKeyboardGetIntercept.S",
            "SceHidForDriver_SceHidForDriver_ksceHidKeyboardPeek.S",
            "SceHidForDriver_SceHidForDriver_ksceHidKeyboardRead.S",
            "SceHidForDriver_SceHidForDriver_ksceHidKeyboardRegisterEnumHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidKeyboardRegisterReadHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidKeyboardSetIntercept.S",
            "SceHidForDriver_SceHidForDriver_ksceHidKeyboardUnregisterEnumHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidKeyboardUnregisterReadHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidMouseEnumerate.S",
            "SceHidForDriver_SceHidForDriver_ksceHidMouseRead.S",
            "SceHidForDriver_SceHidForDriver_ksceHidMouseRegisterEnumHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidMouseRegisterReadHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidMouseUnregisterEnumHintCallback.S",
            "SceHidForDriver_SceHidForDriver_ksceHidMouseUnregisterReadHintCallback.S",
        },
    });
}
pub fn buildSceSblFwLoaderForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblFwLoaderForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblFwLoaderForDriver_SceSblFwLoaderForDriver_ksceSblFwLoaderLoad.S",
            "SceSblFwLoaderForDriver_SceSblFwLoaderForDriver_ksceSblFwLoaderLock.S",
            "SceSblFwLoaderForDriver_SceSblFwLoaderForDriver_ksceSblFwLoaderUnlock.S",
        },
    });
}
pub fn buildSceSblPostSsMgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblPostSsMgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblPostSsMgr_SceSblLicMgr_sceSblLicMgrActivateDevkit.S",
            "SceSblPostSsMgr_SceSblLicMgr_sceSblLicMgrActivateFromFs.S",
            "SceSblPostSsMgr_SceSblLicMgr_sceSblLicMgrClearActivationData.S",
            "SceSblPostSsMgr_SceSblLicMgr_sceSblLicMgrGetActivationKey.S",
            "SceSblPostSsMgr_SceSblLicMgr_sceSblLicMgrGetExpireDate.S",
            "SceSblPostSsMgr_SceSblLicMgr_sceSblLicMgrGetIssueNo.S",
            "SceSblPostSsMgr_SceSblLicMgr_sceSblLicMgrGetLicenseStatus.S",
            "SceSblPostSsMgr_SceSblLicMgr_sceSblLicMgrGetUsageTimeLimit.S",
            "SceSblPostSsMgr_SceSblPmMgr_sceSblPmMgrAuthEtoI.S",
            "SceSblPostSsMgr_SceSblPmMgr_sceSblPmMgrGetCurrentMode.S",
            "SceSblPostSsMgr_SceSblPmMgr_sceSblPmMgrGetProductModeForUser.S",
            "SceSblPostSsMgr_SceSblPmMgr_sceSblPmMgrGetProductModeFromNVS.S",
            "SceSblPostSsMgr_SceSblPmMgr_sceSblPmMgrSetProductModeOffForUser.S",
            "SceSblPostSsMgr_SceSblRtcMgr_sceSblRtcMgrGetCpRtcLogical.S",
            "SceSblPostSsMgr_SceSblRtcMgr_sceSblRtcMgrGetCpRtcPhysicalForUser.S",
            "SceSblPostSsMgr_SceSblRtcMgr_sceSblRtcMgrGetCpSerialId.S",
            "SceSblPostSsMgr_SceSblRtcMgr_sceSblRtcMgrSetCpActivationKey.S",
            "SceSblPostSsMgr_SceSblRtcMgr_sceSblRtcMgrSetCpRtcLogical.S",
            "SceSblPostSsMgr_SceSblRtcMgr_sceSblRtcMgrSetCpRtcPhysicalAndKey.S",
            "SceSblPostSsMgr_SceSblRtcMgr_sceSblRtcMgrSetCpRtcPhysicalForUser.S",
            "SceSblPostSsMgr_SceSblUtMgr_sceSblUtMgrGetCurrentSecureTick.S",
            "SceSblPostSsMgr_SceSblUtMgr_sceSblUtMgrIsTrilithiumFlagEnabled.S",
            "SceSblPostSsMgr_SceSblUtMgr_sceSblUtMgrReadUtoken.S",
            "SceSblPostSsMgr_SceSblUtMgr_sceSblUtMgrResetUtokenFile.S",
            "SceSblPostSsMgr_SceSblUtMgr_sceSblUtMgrUpdateUtoken.S",
        },
    });
}
pub fn buildSceSblPostSsMgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblPostSsMgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver__ksceSblPostSsMgrExecutePmSmF00dCommand.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblLicMgrGetActivationKey.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblLicMgrGetLicenseStatus.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrActivate.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrDebugDecryptKeystone.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrDebugEncryptKeystone.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrDecryptSealedkey.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrEncryptSealedkey.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrExecutePmSmF00dCommand.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrExecutePmSmF00dCommand8.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrExecutePmSmSdF00dCommand.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrGetExpireDate.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrInitializeSpfsoCtx.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrReleaseSpfsoCtx.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrSetCpRtc.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrVerifyKeystone.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrVerifyKeystoneWithPasscode.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblPostSsMgrVerifySpfsoCtx.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblRSA2048CreateSignature.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblRSA2048VerifySignature.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblRtcMgrGetCpRtcLogical.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblRtcMgrGetCpRtcPhysical.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblUtMgrExecuteUtokenSmCommand1.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblUtMgrGetTrilithiumBuffer.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblUtMgrHasComTestFlag.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblUtMgrHasNpTestFlag.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblUtMgrHasStoreFlag.S",
            "SceSblPostSsMgrForDriver_SceSblPostSsMgrForDriver_ksceSblUtMgrResetUtokenFile.S",
        },
    });
}
pub fn buildSceBgAppUtil(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceBgAppUtil",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceBgAppUtil_SceBgAppUtil_sceBgAppUtilStartBgApp.S",
        },
    });
}
pub fn buildSceHandwriting(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceHandwriting",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceHandwriting_SceHandwriting_sceHandwritingGetBufferSize.S",
            "SceHandwriting_SceHandwriting_sceHandwritingInit.S",
            "SceHandwriting_SceHandwriting_sceHandwritingRecognize.S",
            "SceHandwriting_SceHandwriting_sceHandwritingRegisterDelete.S",
            "SceHandwriting_SceHandwriting_sceHandwritingRegisterGetResult.S",
            "SceHandwriting_SceHandwriting_sceHandwritingRegisterInfo.S",
            "SceHandwriting_SceHandwriting_sceHandwritingRegisterInit.S",
            "SceHandwriting_SceHandwriting_sceHandwritingRegisterSet.S",
            "SceHandwriting_SceHandwriting_sceHandwritingRegisterTerm.S",
            "SceHandwriting_SceHandwriting_sceHandwritingSetMode.S",
            "SceHandwriting_SceHandwriting_sceHandwritingTerm.S",
        },
    });
}
pub fn buildSceFiber(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceFiber",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceFiber_SceFiber__sceFiberAttachContextAndRun.S",
            "SceFiber_SceFiber__sceFiberAttachContextAndSwitch.S",
            "SceFiber_SceFiber__sceFiberInitializeImpl.S",
            "SceFiber_SceFiber__sceFiberInitializeWithInternalOptionImpl.S",
            "SceFiber_SceFiber_sceFiberFinalize.S",
            "SceFiber_SceFiber_sceFiberGetInfo.S",
            "SceFiber_SceFiber_sceFiberGetSelf.S",
            "SceFiber_SceFiber_sceFiberOptParamInitialize.S",
            "SceFiber_SceFiber_sceFiberPopUserMarkerWithHud.S",
            "SceFiber_SceFiber_sceFiberPushUserMarkerWithHud.S",
            "SceFiber_SceFiber_sceFiberRenameSelf.S",
            "SceFiber_SceFiber_sceFiberReturnToThread.S",
            "SceFiber_SceFiber_sceFiberRun.S",
            "SceFiber_SceFiber_sceFiberStartContextSizeCheck.S",
            "SceFiber_SceFiber_sceFiberStopContextSizeCheck.S",
            "SceFiber_SceFiber_sceFiberSwitch.S",
        },
    });
}
pub fn buildSceNetCtl(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNetCtl",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNetCtl_SceNetCtl_sceNetCtlAdhocDisconnect.S",
            "SceNetCtl_SceNetCtl_sceNetCtlAdhocGetInAddr.S",
            "SceNetCtl_SceNetCtl_sceNetCtlAdhocGetPeerList.S",
            "SceNetCtl_SceNetCtl_sceNetCtlAdhocGetResult.S",
            "SceNetCtl_SceNetCtl_sceNetCtlAdhocGetState.S",
            "SceNetCtl_SceNetCtl_sceNetCtlAdhocRegisterCallback.S",
            "SceNetCtl_SceNetCtl_sceNetCtlAdhocUnregisterCallback.S",
            "SceNetCtl_SceNetCtl_sceNetCtlCheckCallback.S",
            "SceNetCtl_SceNetCtl_sceNetCtlGetIfStat.S",
            "SceNetCtl_SceNetCtl_sceNetCtlGetNatInfo.S",
            "SceNetCtl_SceNetCtl_sceNetCtlGetPhoneMaxDownloadableSize.S",
            "SceNetCtl_SceNetCtl_sceNetCtlInetGetInfo.S",
            "SceNetCtl_SceNetCtl_sceNetCtlInetGetResult.S",
            "SceNetCtl_SceNetCtl_sceNetCtlInetGetState.S",
            "SceNetCtl_SceNetCtl_sceNetCtlInetRegisterCallback.S",
            "SceNetCtl_SceNetCtl_sceNetCtlInetUnregisterCallback.S",
            "SceNetCtl_SceNetCtl_sceNetCtlInit.S",
            "SceNetCtl_SceNetCtl_sceNetCtlTerm.S",
        },
    });
}
pub fn buildSceUsbdForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUsbdForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdBulkTransfer.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdBulkTransfer2.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdClosePipe.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdControlTransfer.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdGetDeviceLocation.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdGetDeviceSpeed.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdHostStart.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdHostStop.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdInterruptTransfer.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdIsochronousTransfer.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdOpenPipe.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdRegisterCompositeLdd.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdRegisterDriver.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdResume.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdScanStaticDescriptor.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdSuspend.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdSuspendPhase2.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdUnregisterCompositeLdd.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbdUnregisterDriver.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbd_05073925.S",
            "SceUsbdForDriver_SceUsbdForDriver_ksceUsbd_7938DAC7.S",
        },
    });
}
pub fn buildSceUsbd(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUsbd",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUsbd_SceUsbdForUser_sceUsbdAttach.S",
            "SceUsbd_SceUsbdForUser_sceUsbdAttachCompositeLdd.S",
            "SceUsbd_SceUsbdForUser_sceUsbdClosePipe.S",
            "SceUsbd_SceUsbdForUser_sceUsbdEnd.S",
            "SceUsbd_SceUsbdForUser_sceUsbdGetDescriptor.S",
            "SceUsbd_SceUsbdForUser_sceUsbdGetDescriptorSize.S",
            "SceUsbd_SceUsbdForUser_sceUsbdGetDeviceAddress.S",
            "SceUsbd_SceUsbdForUser_sceUsbdGetDeviceList.S",
            "SceUsbd_SceUsbdForUser_sceUsbdGetDeviceSpeed.S",
            "SceUsbd_SceUsbdForUser_sceUsbdGetIsochTransferStatus.S",
            "SceUsbd_SceUsbdForUser_sceUsbdGetTransferStatus.S",
            "SceUsbd_SceUsbdForUser_sceUsbdInit.S",
            "SceUsbd_SceUsbdForUser_sceUsbdIsochTransferData.S",
            "SceUsbd_SceUsbdForUser_sceUsbdOpenDefaultPipe.S",
            "SceUsbd_SceUsbdForUser_sceUsbdOpenPipe.S",
            "SceUsbd_SceUsbdForUser_sceUsbdReceiveEvent.S",
            "SceUsbd_SceUsbdForUser_sceUsbdRegisterCallback.S",
            "SceUsbd_SceUsbdForUser_sceUsbdRegisterCompositeLdd.S",
            "SceUsbd_SceUsbdForUser_sceUsbdRegisterLdd.S",
            "SceUsbd_SceUsbdForUser_sceUsbdResetDevice.S",
            "SceUsbd_SceUsbdForUser_sceUsbdTransferData.S",
            "SceUsbd_SceUsbdForUser_sceUsbdUnregisterCallback.S",
            "SceUsbd_SceUsbdForUser_sceUsbdUnregisterLdd.S",
        },
    });
}
pub fn buildSceCodecEnginePerf(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCodecEnginePerf",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCodecEnginePerf_SceCodecEnginePerf_sceCodecEnginePmonGetProcessorLoad.S",
            "SceCodecEnginePerf_SceCodecEnginePerf_sceCodecEnginePmonReset.S",
            "SceCodecEnginePerf_SceCodecEnginePerf_sceCodecEnginePmonStart.S",
            "SceCodecEnginePerf_SceCodecEnginePerf_sceCodecEnginePmonStop.S",
        },
    });
}
pub fn buildSceMsifForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceMsifForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceMsifForDriver_SceMsifForDriver_ksceMsifDisableSlowMode.S",
            "SceMsifForDriver_SceMsifForDriver_ksceMsifEnableSlowMode.S",
            "SceMsifForDriver_SceMsifForDriver_ksceMsifGetMsInfo.S",
            "SceMsifForDriver_SceMsifForDriver_ksceMsifGetSlowModeState.S",
            "SceMsifForDriver_SceMsifForDriver_ksceMsifReadSector.S",
            "SceMsifForDriver_SceMsifForDriver_ksceMsifWriteSector.S",
        },
    });
}
pub fn buildSceAtrac(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAtrac",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAtrac_SceAtrac_sceAtracAddStreamData.S",
            "SceAtrac_SceAtrac_sceAtracCreateDecoderGroup.S",
            "SceAtrac_SceAtrac_sceAtracDecode.S",
            "SceAtrac_SceAtrac_sceAtracDeleteDecoderGroup.S",
            "SceAtrac_SceAtrac_sceAtracGetContentInfo.S",
            "SceAtrac_SceAtrac_sceAtracGetDecoderGroupInfo.S",
            "SceAtrac_SceAtrac_sceAtracGetDecoderStatus.S",
            "SceAtrac_SceAtrac_sceAtracGetInternalError.S",
            "SceAtrac_SceAtrac_sceAtracGetLoopInfo.S",
            "SceAtrac_SceAtrac_sceAtracGetNextOutputPosition.S",
            "SceAtrac_SceAtrac_sceAtracGetOutputSamples.S",
            "SceAtrac_SceAtrac_sceAtracGetOutputableSamples.S",
            "SceAtrac_SceAtrac_sceAtracGetRemainSamples.S",
            "SceAtrac_SceAtrac_sceAtracGetStreamInfo.S",
            "SceAtrac_SceAtrac_sceAtracGetSubBufferInfo.S",
            "SceAtrac_SceAtrac_sceAtracGetVacantSize.S",
            "SceAtrac_SceAtrac_sceAtracIsSubBufferNeeded.S",
            "SceAtrac_SceAtrac_sceAtracQueryDecoderGroupMemSize.S",
            "SceAtrac_SceAtrac_sceAtracReleaseHandle.S",
            "SceAtrac_SceAtrac_sceAtracResetNextOutputPosition.S",
            "SceAtrac_SceAtrac_sceAtracSetDataAndAcquireHandle.S",
            "SceAtrac_SceAtrac_sceAtracSetLoopNum.S",
            "SceAtrac_SceAtrac_sceAtracSetOutputSamples.S",
            "SceAtrac_SceAtrac_sceAtracSetSubBuffer.S",
        },
    });
}
pub fn buildSceFios2(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceFios2",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceFios2_SceFios2_sceFiosArchiveGetDecompressorThreadCount.S",
            "SceFios2_SceFios2_sceFiosArchiveGetMountBufferSize.S",
            "SceFios2_SceFios2_sceFiosArchiveGetMountBufferSizeSync.S",
            "SceFios2_SceFios2_sceFiosArchiveMount.S",
            "SceFios2_SceFios2_sceFiosArchiveMountSync.S",
            "SceFios2_SceFios2_sceFiosArchiveSetDecompressorThreadCount.S",
            "SceFios2_SceFios2_sceFiosArchiveUnmount.S",
            "SceFios2_SceFios2_sceFiosArchiveUnmountSync.S",
            "SceFios2_SceFios2_sceFiosCacheContainsFileRangeSync.S",
            "SceFios2_SceFios2_sceFiosCacheContainsFileSync.S",
            "SceFios2_SceFios2_sceFiosCacheFlushFileRangeSync.S",
            "SceFios2_SceFios2_sceFiosCacheFlushFileSync.S",
            "SceFios2_SceFios2_sceFiosCacheFlushSync.S",
            "SceFios2_SceFios2_sceFiosCachePrefetchFH.S",
            "SceFios2_SceFios2_sceFiosCachePrefetchFHRange.S",
            "SceFios2_SceFios2_sceFiosCachePrefetchFHRangeSync.S",
            "SceFios2_SceFios2_sceFiosCachePrefetchFHSync.S",
            "SceFios2_SceFios2_sceFiosCachePrefetchFile.S",
            "SceFios2_SceFios2_sceFiosCachePrefetchFileRange.S",
            "SceFios2_SceFios2_sceFiosCancelAllOps.S",
            "SceFios2_SceFios2_sceFiosChangeStat.S",
            "SceFios2_SceFios2_sceFiosChangeStatSync.S",
            "SceFios2_SceFios2_sceFiosCloseAllFiles.S",
            "SceFios2_SceFios2_sceFiosDHClose.S",
            "SceFios2_SceFios2_sceFiosDHCloseSync.S",
            "SceFios2_SceFios2_sceFiosDHGetPath.S",
            "SceFios2_SceFios2_sceFiosDHOpen.S",
            "SceFios2_SceFios2_sceFiosDHOpenSync.S",
            "SceFios2_SceFios2_sceFiosDHRead.S",
            "SceFios2_SceFios2_sceFiosDHReadSync.S",
            "SceFios2_SceFios2_sceFiosDateFromComponents.S",
            "SceFios2_SceFios2_sceFiosDateFromSceDateTime.S",
            "SceFios2_SceFios2_sceFiosDateGetCurrent.S",
            "SceFios2_SceFios2_sceFiosDateToComponents.S",
            "SceFios2_SceFios2_sceFiosDateToSceDateTime.S",
            "SceFios2_SceFios2_sceFiosDeallocatePassthruFH.S",
            "SceFios2_SceFios2_sceFiosDebugDumpDH.S",
            "SceFios2_SceFios2_sceFiosDebugDumpDate.S",
            "SceFios2_SceFios2_sceFiosDebugDumpError.S",
            "SceFios2_SceFios2_sceFiosDebugDumpFH.S",
            "SceFios2_SceFios2_sceFiosDebugDumpOp.S",
            "SceFios2_SceFios2_sceFiosDelete.S",
            "SceFios2_SceFios2_sceFiosDeleteSync.S",
            "SceFios2_SceFios2_sceFiosDevctl.S",
            "SceFios2_SceFios2_sceFiosDevctlSync.S",
            "SceFios2_SceFios2_sceFiosDirectoryCreate.S",
            "SceFios2_SceFios2_sceFiosDirectoryCreateSync.S",
            "SceFios2_SceFios2_sceFiosDirectoryCreateWithMode.S",
            "SceFios2_SceFios2_sceFiosDirectoryCreateWithModeSync.S",
            "SceFios2_SceFios2_sceFiosDirectoryDelete.S",
            "SceFios2_SceFios2_sceFiosDirectoryDeleteSync.S",
            "SceFios2_SceFios2_sceFiosDirectoryExists.S",
            "SceFios2_SceFios2_sceFiosDirectoryExistsSync.S",
            "SceFios2_SceFios2_sceFiosExists.S",
            "SceFios2_SceFios2_sceFiosExistsSync.S",
            "SceFios2_SceFios2_sceFiosFHClose.S",
            "SceFios2_SceFios2_sceFiosFHCloseSync.S",
            "SceFios2_SceFios2_sceFiosFHGetOpenParams.S",
            "SceFios2_SceFios2_sceFiosFHGetPath.S",
            "SceFios2_SceFios2_sceFiosFHGetSize.S",
            "SceFios2_SceFios2_sceFiosFHIoctl.S",
            "SceFios2_SceFios2_sceFiosFHIoctlSync.S",
            "SceFios2_SceFios2_sceFiosFHOpen.S",
            "SceFios2_SceFios2_sceFiosFHOpenSync.S",
            "SceFios2_SceFios2_sceFiosFHOpenWithMode.S",
            "SceFios2_SceFios2_sceFiosFHOpenWithModeSync.S",
            "SceFios2_SceFios2_sceFiosFHPread.S",
            "SceFios2_SceFios2_sceFiosFHPreadSync.S",
            "SceFios2_SceFios2_sceFiosFHPreadv.S",
            "SceFios2_SceFios2_sceFiosFHPreadvSync.S",
            "SceFios2_SceFios2_sceFiosFHPwrite.S",
            "SceFios2_SceFios2_sceFiosFHPwriteSync.S",
            "SceFios2_SceFios2_sceFiosFHPwritev.S",
            "SceFios2_SceFios2_sceFiosFHPwritevSync.S",
            "SceFios2_SceFios2_sceFiosFHRead.S",
            "SceFios2_SceFios2_sceFiosFHReadSync.S",
            "SceFios2_SceFios2_sceFiosFHReadv.S",
            "SceFios2_SceFios2_sceFiosFHReadvSync.S",
            "SceFios2_SceFios2_sceFiosFHSeek.S",
            "SceFios2_SceFios2_sceFiosFHStat.S",
            "SceFios2_SceFios2_sceFiosFHStatSync.S",
            "SceFios2_SceFios2_sceFiosFHSync.S",
            "SceFios2_SceFios2_sceFiosFHSyncSync.S",
            "SceFios2_SceFios2_sceFiosFHTell.S",
            "SceFios2_SceFios2_sceFiosFHToFileno.S",
            "SceFios2_SceFios2_sceFiosFHTruncate.S",
            "SceFios2_SceFios2_sceFiosFHTruncateSync.S",
            "SceFios2_SceFios2_sceFiosFHWrite.S",
            "SceFios2_SceFios2_sceFiosFHWriteSync.S",
            "SceFios2_SceFios2_sceFiosFHWritev.S",
            "SceFios2_SceFios2_sceFiosFHWritevSync.S",
            "SceFios2_SceFios2_sceFiosFileDelete.S",
            "SceFios2_SceFios2_sceFiosFileDeleteSync.S",
            "SceFios2_SceFios2_sceFiosFileExists.S",
            "SceFios2_SceFios2_sceFiosFileExistsSync.S",
            "SceFios2_SceFios2_sceFiosFileGetSize.S",
            "SceFios2_SceFios2_sceFiosFileGetSizeSync.S",
            "SceFios2_SceFios2_sceFiosFileRead.S",
            "SceFios2_SceFios2_sceFiosFileReadSync.S",
            "SceFios2_SceFios2_sceFiosFileTruncate.S",
            "SceFios2_SceFios2_sceFiosFileTruncateSync.S",
            "SceFios2_SceFios2_sceFiosFileWrite.S",
            "SceFios2_SceFios2_sceFiosFileWriteSync.S",
            "SceFios2_SceFios2_sceFiosFilenoToFH.S",
            "SceFios2_SceFios2_sceFiosGetAllDHs.S",
            "SceFios2_SceFios2_sceFiosGetAllFHs.S",
            "SceFios2_SceFios2_sceFiosGetAllOps.S",
            "SceFios2_SceFios2_sceFiosGetDefaultOpAttr.S",
            "SceFios2_SceFios2_sceFiosGetGlobalDefaultOpAttr.S",
            "SceFios2_SceFios2_sceFiosGetSuspendCount.S",
            "SceFios2_SceFios2_sceFiosIOFilterAdd.S",
            "SceFios2_SceFios2_sceFiosIOFilterCache.S",
            "SceFios2_SceFios2_sceFiosIOFilterGetInfo.S",
            "SceFios2_SceFios2_sceFiosIOFilterPsarcDearchiver.S",
            "SceFios2_SceFios2_sceFiosIOFilterRemove.S",
            "SceFios2_SceFios2_sceFiosInitialize.S",
            "SceFios2_SceFios2_sceFiosIsIdle.S",
            "SceFios2_SceFios2_sceFiosIsInitialized.S",
            "SceFios2_SceFios2_sceFiosIsSuspended.S",
            "SceFios2_SceFios2_sceFiosIsValidHandle.S",
            "SceFios2_SceFios2_sceFiosOpCancel.S",
            "SceFios2_SceFios2_sceFiosOpDelete.S",
            "SceFios2_SceFios2_sceFiosOpGetActualCount.S",
            "SceFios2_SceFios2_sceFiosOpGetAttr.S",
            "SceFios2_SceFios2_sceFiosOpGetBuffer.S",
            "SceFios2_SceFios2_sceFiosOpGetError.S",
            "SceFios2_SceFios2_sceFiosOpGetOffset.S",
            "SceFios2_SceFios2_sceFiosOpGetPath.S",
            "SceFios2_SceFios2_sceFiosOpGetRequestCount.S",
            "SceFios2_SceFios2_sceFiosOpIsCancelled.S",
            "SceFios2_SceFios2_sceFiosOpIsDone.S",
            "SceFios2_SceFios2_sceFiosOpReschedule.S",
            "SceFios2_SceFios2_sceFiosOpRescheduleWithPriority.S",
            "SceFios2_SceFios2_sceFiosOpSyncWait.S",
            "SceFios2_SceFios2_sceFiosOpSyncWaitForIO.S",
            "SceFios2_SceFios2_sceFiosOpWait.S",
            "SceFios2_SceFios2_sceFiosOpWaitUntil.S",
            "SceFios2_SceFios2_sceFiosOverlayAdd.S",
            "SceFios2_SceFios2_sceFiosOverlayGetInfo.S",
            "SceFios2_SceFios2_sceFiosOverlayGetList.S",
            "SceFios2_SceFios2_sceFiosOverlayModify.S",
            "SceFios2_SceFios2_sceFiosOverlayRemove.S",
            "SceFios2_SceFios2_sceFiosOverlayResolveSync.S",
            "SceFios2_SceFios2_sceFiosPathNormalize.S",
            "SceFios2_SceFios2_sceFiosPathcmp.S",
            "SceFios2_SceFios2_sceFiosPathncmp.S",
            "SceFios2_SceFios2_sceFiosPrintf.S",
            "SceFios2_SceFios2_sceFiosRename.S",
            "SceFios2_SceFios2_sceFiosRenameSync.S",
            "SceFios2_SceFios2_sceFiosResolve.S",
            "SceFios2_SceFios2_sceFiosResolveSync.S",
            "SceFios2_SceFios2_sceFiosResume.S",
            "SceFios2_SceFios2_sceFiosSetGlobalDefaultOpAttr.S",
            "SceFios2_SceFios2_sceFiosShutdownAndCancelOps.S",
            "SceFios2_SceFios2_sceFiosStat.S",
            "SceFios2_SceFios2_sceFiosStatSync.S",
            "SceFios2_SceFios2_sceFiosStatisticsGet.S",
            "SceFios2_SceFios2_sceFiosStatisticsPrint.S",
            "SceFios2_SceFios2_sceFiosStatisticsReset.S",
            "SceFios2_SceFios2_sceFiosSuspend.S",
            "SceFios2_SceFios2_sceFiosSync.S",
            "SceFios2_SceFios2_sceFiosSyncSync.S",
            "SceFios2_SceFios2_sceFiosTerminate.S",
            "SceFios2_SceFios2_sceFiosTimeGetCurrent.S",
            "SceFios2_SceFios2_sceFiosTimeIntervalFromNanoseconds.S",
            "SceFios2_SceFios2_sceFiosTimeIntervalToNanoseconds.S",
            "SceFios2_SceFios2_sceFiosUpdateParameters.S",
            "SceFios2_SceFios2_sceFiosVprintf.S",
            "SceFios2_SceFios2User_sceFiosOverlayAddForProcess02.S",
            "SceFios2_SceFios2User_sceFiosOverlayGetInfoForProcess02.S",
            "SceFios2_SceFios2User_sceFiosOverlayGetList02.S",
            "SceFios2_SceFios2User_sceFiosOverlayGetRecommendedScheduler02.S",
            "SceFios2_SceFios2User_sceFiosOverlayModifyForProcess02.S",
            "SceFios2_SceFios2User_sceFiosOverlayRemoveForProcess02.S",
            "SceFios2_SceFios2User_sceFiosOverlayResolveSync02.S",
            "SceFios2_SceFios2User_sceFiosOverlayResolveWithRangeSync02.S",
            "SceFios2_SceFios2User_sceFiosOverlayThreadIsDisabled02.S",
            "SceFios2_SceFios2User_sceFiosOverlayThreadSetDisabled02.S",
        },
    });
}
pub fn buildSceDeci4pDbgpForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceDeci4pDbgpForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceDeci4pDbgpForDriver_SceDeci4pDbgpForDriver_ksceDbgpGetDTraceBreakpointHandler.S",
            "SceDeci4pDbgpForDriver_SceDeci4pDbgpForDriver_ksceDbgpGetDTraceUsdtHandler.S",
            "SceDeci4pDbgpForDriver_SceDeci4pDbgpForDriver_ksceDbgpSetDTraceBreakpointHandler.S",
            "SceDeci4pDbgpForDriver_SceDeci4pDbgpForDriver_ksceDbgpSetDTraceUsdtHandler.S",
        },
    });
}
pub fn buildSceNearDialogUtil(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNearDialogUtil",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNearDialogUtil_SceNearDialogUtil_sceNearDialogAbort.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearDialogGetResult.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearDialogGetStatus.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearDialogInit.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearDialogTerm.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityCloseDiscoveredGiftImage.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityCloseReceivedGiftData.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityConvertDiscoveredGiftParam.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityDeleteDiscoveredGift.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityDeleteGift.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityFinalize.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityGetDiscoveredGiftInfo.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityGetDiscoveredGiftSender.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityGetDiscoveredGiftStatus.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityGetDiscoveredGifts.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityGetGift.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityGetGiftStatus.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityGetLastNeighborFoundDateTime.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityGetMyStatus.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityGetNeighbors.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityGetNewNeighbors.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityGetRecentNeighbors.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityIgnoreDiscoveredGift.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityInitialize.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityLaunchNearAppForDownload.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityLaunchNearAppForUpdate.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityOpenDiscoveredGiftImage.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityOpenReceivedGiftData.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityReadDiscoveredGiftImage.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityReadReceivedGiftData.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilityRefresh.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilitySetGift.S",
            "SceNearDialogUtil_SceNearDialogUtil_sceNearUtilitySetGift2.S",
        },
    });
}
pub fn buildScePhotoExport(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePhotoExport",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePhotoExport_ScePhotoExport_scePhotoExportFromData.S",
            "ScePhotoExport_ScePhotoExport_scePhotoExportFromFile.S",
            "ScePhotoExport_ScePhotoExport_scePhotoExportIsAvailableFromData.S",
            "ScePhotoExport_ScePhotoExport_scePhotoExportIsAvailableFromFile.S",
        },
    });
}
pub fn buildSceAudioIn(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAudioIn",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAudioIn_SceAudioIn_sceAudioInGetAdopt.S",
            "SceAudioIn_SceAudioIn_sceAudioInGetInput.S",
            "SceAudioIn_SceAudioIn_sceAudioInGetMicGain.S",
            "SceAudioIn_SceAudioIn_sceAudioInGetStatus.S",
            "SceAudioIn_SceAudioIn_sceAudioInInput.S",
            "SceAudioIn_SceAudioIn_sceAudioInInputWithInputDeviceState.S",
            "SceAudioIn_SceAudioIn_sceAudioInOpenPort.S",
            "SceAudioIn_SceAudioIn_sceAudioInOpenPortForDiag.S",
            "SceAudioIn_SceAudioIn_sceAudioInReleasePort.S",
            "SceAudioIn_SceAudioIn_sceAudioInSelectInput.S",
            "SceAudioIn_SceAudioIn_sceAudioInSetMicGain.S",
            "SceAudioIn_SceAudioIn_sceAudioInSetMute.S",
        },
    });
}
pub fn buildSceFios2Kernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceFios2Kernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayAdd.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayAddForProcess.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayDHChstatSync.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayDHCloseSync.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayDHOpenSync.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayDHReadSync.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayDHStatSync.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayDHSyncSync.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayGetInfo.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayGetInfoForProcess.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayGetList.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayGetRecommendedScheduler.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayModify.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayModifyForProcess.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayRemove.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayRemoveForProcess.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayResolveSync.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayResolveWithRangeSync.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayThreadIsDisabled.S",
            "SceFios2Kernel_SceFios2Kernel__sceFiosKernelOverlayThreadSetDisabled.S",
            "SceFios2Kernel_SceFios2Kernel02_sceFiosKernelOverlayAddForProcess02.S",
            "SceFios2Kernel_SceFios2Kernel02_sceFiosKernelOverlayGetInfoForProcess02.S",
            "SceFios2Kernel_SceFios2Kernel02_sceFiosKernelOverlayGetList02.S",
            "SceFios2Kernel_SceFios2Kernel02_sceFiosKernelOverlayGetRecommendedScheduler02.S",
            "SceFios2Kernel_SceFios2Kernel02_sceFiosKernelOverlayModifyForProcess02.S",
            "SceFios2Kernel_SceFios2Kernel02_sceFiosKernelOverlayRemoveForProcess02.S",
            "SceFios2Kernel_SceFios2Kernel02_sceFiosKernelOverlayResolveSync02.S",
            "SceFios2Kernel_SceFios2Kernel02_sceFiosKernelOverlayResolveWithRangeSync02.S",
            "SceFios2Kernel_SceFios2Kernel02_sceFiosKernelOverlayThreadIsDisabled02.S",
            "SceFios2Kernel_SceFios2Kernel02_sceFiosKernelOverlayThreadSetDisabled02.S",
        },
    });
}
pub fn buildSceFios2KernelForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceFios2KernelForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayAdd.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayAddForProcess.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayGetInfo.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayGetInfoForProcess.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayGetList.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayGetRecommendedScheduler.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayModify.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayModifyForProcess.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayRemove.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayRemoveForProcess.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayResolveSync.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayResolveWithRangeSync.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayThreadIsDisabled.S",
            "SceFios2KernelForDriver_SceFios2KernelForDriver_ksceFiosKernelOverlayThreadSetDisabled.S",
        },
    });
}
pub fn buildSceUsbSerial(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUsbSerial",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUsbSerial_SceUsbSerial_sceUsbSerialClose.S",
            "SceUsbSerial_SceUsbSerial_sceUsbSerialGetRecvBufferSize.S",
            "SceUsbSerial_SceUsbSerial_sceUsbSerialRecv.S",
            "SceUsbSerial_SceUsbSerial_sceUsbSerialSend.S",
            "SceUsbSerial_SceUsbSerial_sceUsbSerialSetup.S",
            "SceUsbSerial_SceUsbSerial_sceUsbSerialStart.S",
            "SceUsbSerial_SceUsbSerial_sceUsbSerialStatus.S",
        },
    });
}
pub fn buildSceUsbSerialForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUsbSerialForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUsbSerialForDriver_SceUsbSerialForDriver_ksceUsbSerialClose.S",
            "SceUsbSerialForDriver_SceUsbSerialForDriver_ksceUsbSerialGetRecvBufferSize.S",
            "SceUsbSerialForDriver_SceUsbSerialForDriver_ksceUsbSerialRecv.S",
            "SceUsbSerialForDriver_SceUsbSerialForDriver_ksceUsbSerialSend.S",
            "SceUsbSerialForDriver_SceUsbSerialForDriver_ksceUsbSerialSetup.S",
            "SceUsbSerialForDriver_SceUsbSerialForDriver_ksceUsbSerialStart.S",
            "SceUsbSerialForDriver_SceUsbSerialForDriver_ksceUsbSerialStatus.S",
        },
    });
}
pub fn buildSceUdcd(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUdcd",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUdcd_SceUdcd_sceUdcdGetDeviceInfo.S",
            "SceUdcd_SceUdcd_sceUdcdGetDeviceState.S",
            "SceUdcd_SceUdcd_sceUdcdGetDrvState.S",
            "SceUdcd_SceUdcd_sceUdcdRegisterCallback.S",
            "SceUdcd_SceUdcd_sceUdcdUnregisterCallback.S",
            "SceUdcd_SceUdcd_sceUdcdWaitState.S",
        },
    });
}
pub fn buildSceUdcdForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUdcdForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdActivate.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdActivateInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdClearFIFO.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdClearFIFOInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdDeactivate.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdDeactivateInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdGetDeviceInfo.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdGetDeviceInfoInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdGetDeviceState.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdGetDeviceStateInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdGetDrvState.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdGetDrvStateInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdRegister.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdRegisterInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdReqCancelAll.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdReqRecv.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdReqRecvInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdReqSend.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdReqSendInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdStall.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdStallInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdStart.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdStartCurrentInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdStartInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdStop.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdStopCurrentInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdStopInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdUnregister.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdUnregisterInternal.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdWaitBusInitialized.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdWaitState.S",
            "SceUdcdForDriver_SceUdcdForDriver_ksceUdcdWaitStateInternal.S",
        },
    });
}
pub fn buildSceAvcodec(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAvcodec",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAvcodec_SceAvcodec__sceAudiodecClearContext.S",
            "SceAvcodec_SceAvcodec__sceAudiodecCreateDecoder.S",
            "SceAvcodec_SceAvcodec__sceAudiodecCreateDecoderExternal.S",
            "SceAvcodec_SceAvcodec__sceAudiodecCreateDecoderResident.S",
            "SceAvcodec_SceAvcodec__sceAudiodecDecode.S",
            "SceAvcodec_SceAvcodec__sceAudiodecDecodeNFrames.S",
            "SceAvcodec_SceAvcodec__sceAudiodecDecodeNStreams.S",
            "SceAvcodec_SceAvcodec__sceAudiodecDeleteDecoder.S",
            "SceAvcodec_SceAvcodec__sceAudiodecDeleteDecoderExternal.S",
            "SceAvcodec_SceAvcodec__sceAudiodecDeleteDecoderResident.S",
            "SceAvcodec_SceAvcodec__sceAudiodecGetContextSize.S",
            "SceAvcodec_SceAvcodec__sceAudiodecGetInternalError.S",
            "SceAvcodec_SceAvcodec__sceAudiodecInitLibrary.S",
            "SceAvcodec_SceAvcodec__sceAudiodecPartlyDecode.S",
            "SceAvcodec_SceAvcodec__sceAudiodecTermLibrary.S",
            "SceAvcodec_SceAvcodec__sceAudioencClearContext.S",
            "SceAvcodec_SceAvcodec__sceAudioencCreateEncoder.S",
            "SceAvcodec_SceAvcodec__sceAudioencCreateEncoderExternal.S",
            "SceAvcodec_SceAvcodec__sceAudioencCreateEncoderResident.S",
            "SceAvcodec_SceAvcodec__sceAudioencDeleteEncoder.S",
            "SceAvcodec_SceAvcodec__sceAudioencDeleteEncoderExternal.S",
            "SceAvcodec_SceAvcodec__sceAudioencDeleteEncoderResident.S",
            "SceAvcodec_SceAvcodec__sceAudioencEncode.S",
            "SceAvcodec_SceAvcodec__sceAudioencEncodeNFrames.S",
            "SceAvcodec_SceAvcodec__sceAudioencGetContextSize.S",
            "SceAvcodec_SceAvcodec__sceAudioencGetInternalError.S",
            "SceAvcodec_SceAvcodec__sceAudioencGetOptInfo.S",
            "SceAvcodec_SceAvcodec__sceAudioencInitLibrary.S",
            "SceAvcodec_SceAvcodec__sceAudioencTermLibrary.S",
            "SceAvcodec_SceAvcodec__sceAvcdecCreateDecoder.S",
            "SceAvcodec_SceAvcodec__sceAvcdecCreateDecoderInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcdecCreateDecoderNongameapp.S",
            "SceAvcodec_SceAvcodec__sceAvcdecCsc.S",
            "SceAvcodec_SceAvcodec__sceAvcdecCscInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecode.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeAuInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeAuNalAuInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeAuNalAuNongameapp.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeAuNongameapp.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeAvailableSize.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeFlush.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeGetPictureInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeGetPictureNongameapp.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeGetPictureWithWorkPictureInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeNalAu.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeNalAuWithWorkPicture.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeSetTrickModeNongameapp.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeSetUserDataSei1FieldMemSizeNongameapp.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeStop.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeStopWithWorkPicture.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDecodeWithWorkPicture.S",
            "SceAvcodec_SceAvcodec__sceAvcdecDeleteDecoder.S",
            "SceAvcodec_SceAvcodec__sceAvcdecGetSeiPictureTimingInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcdecGetSeiUserDataNongameapp.S",
            "SceAvcodec_SceAvcodec__sceAvcdecQueryDecoderMemSize.S",
            "SceAvcodec_SceAvcodec__sceAvcdecQueryDecoderMemSizeInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcdecQueryDecoderMemSizeNongameapp.S",
            "SceAvcodec_SceAvcodec__sceAvcdecRegisterCallbackInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcdecRegisterCallbackNongameapp.S",
            "SceAvcodec_SceAvcodec__sceAvcdecSetDecodeMode.S",
            "SceAvcodec_SceAvcodec__sceAvcdecSetDecodeModeInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcdecSetInterlacedStreamMode.S",
            "SceAvcodec_SceAvcodec__sceAvcdecSetLowDelayModeNongameapp.S",
            "SceAvcodec_SceAvcodec__sceAvcdecSetRecoveryPointSEIMode.S",
            "SceAvcodec_SceAvcodec__sceAvcdecUnregisterCallbackInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcdecUnregisterCallbackNongameapp.S",
            "SceAvcodec_SceAvcodec__sceAvcdecUnregisterCallbackWithCbidInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcdecUnregisterCallbackWithCbidNongameapp.S",
            "SceAvcodec_SceAvcodec__sceAvcencCreateEncoder.S",
            "SceAvcodec_SceAvcodec__sceAvcencCreateEncoderBasic.S",
            "SceAvcodec_SceAvcodec__sceAvcencCreateEncoderInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcencCsc.S",
            "SceAvcodec_SceAvcodec__sceAvcencDeleteEncoder.S",
            "SceAvcodec_SceAvcodec__sceAvcencEncode.S",
            "SceAvcodec_SceAvcodec__sceAvcencEncodeFlush.S",
            "SceAvcodec_SceAvcodec__sceAvcencEncodeStop.S",
            "SceAvcodec_SceAvcodec__sceAvcencGetNalUnit.S",
            "SceAvcodec_SceAvcodec__sceAvcencQueryEncoderMemSize.S",
            "SceAvcodec_SceAvcodec__sceAvcencQueryEncoderMemSizeBasic.S",
            "SceAvcodec_SceAvcodec__sceAvcencQueryEncoderMemSizeInternal.S",
            "SceAvcodec_SceAvcodec__sceAvcencSetAvailablePreset.S",
            "SceAvcodec_SceAvcodec__sceAvcencSetEncoderParameter.S",
            "SceAvcodec_SceAvcodec__sceJpegCreateSplitDecoder.S",
            "SceAvcodec_SceAvcodec__sceJpegCsc.S",
            "SceAvcodec_SceAvcodec__sceJpegDecodeMJpeg.S",
            "SceAvcodec_SceAvcodec__sceJpegDecodeMJpegYCbCr.S",
            "SceAvcodec_SceAvcodec__sceJpegDeleteSplitDecoder.S",
            "SceAvcodec_SceAvcodec__sceJpegEncoderCsc.S",
            "SceAvcodec_SceAvcodec__sceJpegEncoderEncode.S",
            "SceAvcodec_SceAvcodec__sceJpegEncoderEnd.S",
            "SceAvcodec_SceAvcodec__sceJpegEncoderGetContextSize.S",
            "SceAvcodec_SceAvcodec__sceJpegEncoderInit.S",
            "SceAvcodec_SceAvcodec__sceJpegEncoderInitWithParam.S",
            "SceAvcodec_SceAvcodec__sceJpegEncoderSetCompressionRatio.S",
            "SceAvcodec_SceAvcodec__sceJpegEncoderSetHeaderMode.S",
            "SceAvcodec_SceAvcodec__sceJpegEncoderSetOutputAddr.S",
            "SceAvcodec_SceAvcodec__sceJpegEncoderSetValidRegion.S",
            "SceAvcodec_SceAvcodec__sceJpegFinishMJpeg.S",
            "SceAvcodec_SceAvcodec__sceJpegGetOutputInfo.S",
            "SceAvcodec_SceAvcodec__sceJpegInitMJpeg.S",
            "SceAvcodec_SceAvcodec__sceJpegInitMJpegWithParam.S",
            "SceAvcodec_SceAvcodec__sceJpegMJpegCsc.S",
            "SceAvcodec_SceAvcodec__sceJpegSplitDecodeMJpeg.S",
            "SceAvcodec_SceAvcodec__sceM4vdecCreateDecoder.S",
            "SceAvcodec_SceAvcodec__sceM4vdecCreateDecoderInternal.S",
            "SceAvcodec_SceAvcodec__sceM4vdecCsc.S",
            "SceAvcodec_SceAvcodec__sceM4vdecDecode.S",
            "SceAvcodec_SceAvcodec__sceM4vdecDecodeAvailableSize.S",
            "SceAvcodec_SceAvcodec__sceM4vdecDecodeFlush.S",
            "SceAvcodec_SceAvcodec__sceM4vdecDecodeStop.S",
            "SceAvcodec_SceAvcodec__sceM4vdecDecodeStopWithWorkPicture.S",
            "SceAvcodec_SceAvcodec__sceM4vdecDecodeWithWorkPicture.S",
            "SceAvcodec_SceAvcodec__sceM4vdecDeleteDecoder.S",
            "SceAvcodec_SceAvcodec__sceM4vdecQueryDecoderMemSize.S",
            "SceAvcodec_SceAvcodec__sceM4vdecQueryDecoderMemSizeInternal.S",
            "SceAvcodec_SceAvcodec__sceVideodecInitLibrary.S",
            "SceAvcodec_SceAvcodec__sceVideodecInitLibraryInternal.S",
            "SceAvcodec_SceAvcodec__sceVideodecInitLibraryNongameapp.S",
            "SceAvcodec_SceAvcodec__sceVideodecInitLibraryWithUnmapMem.S",
            "SceAvcodec_SceAvcodec__sceVideodecInitLibraryWithUnmapMemInternal.S",
            "SceAvcodec_SceAvcodec__sceVideodecInitLibraryWithUnmapMemNongameapp.S",
            "SceAvcodec_SceAvcodec__sceVideodecQueryInstanceNongameapp.S",
            "SceAvcodec_SceAvcodec__sceVideodecQueryMemSize.S",
            "SceAvcodec_SceAvcodec__sceVideodecQueryMemSizeInternal.S",
            "SceAvcodec_SceAvcodec__sceVideodecQueryMemSizeNongameapp.S",
            "SceAvcodec_SceAvcodec__sceVideodecSetConfig.S",
            "SceAvcodec_SceAvcodec__sceVideodecSetConfigInternal.S",
            "SceAvcodec_SceAvcodec__sceVideodecTermLibrary.S",
            "SceAvcodec_SceAvcodec__sceVideoencInitLibrary.S",
            "SceAvcodec_SceAvcodec__sceVideoencInitLibraryInternal.S",
            "SceAvcodec_SceAvcodec__sceVideoencInitLibraryWithUnmapMem.S",
            "SceAvcodec_SceAvcodec__sceVideoencInitLibraryWithUnmapMemInternal.S",
            "SceAvcodec_SceAvcodec__sceVideoencQueryMemSize.S",
            "SceAvcodec_SceAvcodec__sceVideoencQueryMemSizeInternal.S",
            "SceAvcodec_SceAvcodec__sceVideoencTermLibrary.S",
        },
    });
}
pub fn buildSceAvcodecForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAvcodecForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencCreateEncoder.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencCreateEncoderBasic.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencCreateEncoderInternal.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencCsc.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencDeleteEncoder.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencEncode.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencEncodeFlush.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencEncodeStop.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencGetNalUnit.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencQueryEncoderMemSize.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencQueryEncoderMemSizeBasic.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencQueryEncoderMemSizeInternal.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencSetAvailablePreset.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceAvcencSetEncoderParameter.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceJpegEncoderCsc.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceJpegEncoderEncode.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceJpegEncoderEnd.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceJpegEncoderGetContextSize.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceJpegEncoderInit.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceJpegEncoderSetCompressionRatio.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceJpegEncoderSetHeaderMode.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceJpegEncoderSetOutputAddr.S",
            "SceAvcodecForDriver_SceAvcodecForDriver_ksceJpegEncoderSetValidRegion.S",
        },
    });
}
pub fn buildSceCoredump(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCoredump",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCoredump_SceCoredump_sceCoredumpRegisterCoredumpHandler.S",
            "SceCoredump_SceCoredump_sceCoredumpUnregisterCoredumpHandler.S",
            "SceCoredump_SceCoredumpNounlink_sceCoredumpWriteUserData.S",
        },
    });
}
pub fn buildSceCoredumpForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCoredumpForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpCafContextCreate.S",
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpCafContextDestroy.S",
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpCafCreateIv.S",
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpCafFinal.S",
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpCafHeaderFinal.S",
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpCafHeaderInit.S",
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpCafHeaderTransform.S",
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpCafInit.S",
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpCafSegmentFinal.S",
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpCafSegmentInit.S",
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpCafSegmentTransform.S",
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpCreateDump.S",
            "SceCoredumpForDriver_SceCoredumpForDriver_ksceCoredumpDeleteCrashReportCaf.S",
        },
    });
}
pub fn buildSceLcdForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLcdForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLcdForDriver_SceLcdForDriver_ksceLcdDisplayOff.S",
            "SceLcdForDriver_SceLcdForDriver_ksceLcdDisplayOn.S",
            "SceLcdForDriver_SceLcdForDriver_ksceLcdGetBrightness.S",
            "SceLcdForDriver_SceLcdForDriver_ksceLcdGetDDB.S",
            "SceLcdForDriver_SceLcdForDriver_ksceLcdGetDisplayColorSpaceMode.S",
            "SceLcdForDriver_SceLcdForDriver_ksceLcdSetBrightness.S",
            "SceLcdForDriver_SceLcdForDriver_ksceLcdSetDisplayColorSpaceMode.S",
            "SceLcdForDriver_SceLcdForDriver_ksceLcdWaitReady.S",
        },
    });
}
pub fn buildSceDeci4pUserp(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceDeci4pUserp",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceDeci4pUserp_SceDeci4pUserp_sceKernelDeci4pClose.S",
            "SceDeci4pUserp_SceDeci4pUserp_sceKernelDeci4pCreateHostProcess.S",
            "SceDeci4pUserp_SceDeci4pUserp_sceKernelDeci4pCreateHostProcessAndWait.S",
            "SceDeci4pUserp_SceDeci4pUserp_sceKernelDeci4pDisableWatchpoint.S",
            "SceDeci4pUserp_SceDeci4pUserp_sceKernelDeci4pEnableWatchpoint.S",
            "SceDeci4pUserp_SceDeci4pUserp_sceKernelDeci4pIsProcessAttached.S",
            "SceDeci4pUserp_SceDeci4pUserp_sceKernelDeci4pOpen.S",
            "SceDeci4pUserp_SceDeci4pUserp_sceKernelDeci4pRead.S",
            "SceDeci4pUserp_SceDeci4pUserp_sceKernelDeci4pRegisterCallback.S",
            "SceDeci4pUserp_SceDeci4pUserp_sceKernelDeci4pWrite.S",
        },
    });
}
pub fn buildSceSysmem(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSysmem",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSysmem_SceCpu_sceKernelGetCpuId.S",
            "SceSysmem_SceDebugLed_sceDebugLedInvokeHandle0.S",
            "SceSysmem_SceDebugLed_sceDebugLedInvokeHandle1.S",
            "SceSysmem_SceDebugLed_sceKernelGetGPI.S",
            "SceSysmem_SceDebugLed_sceKernelSetGPO.S",
            "SceSysmem_SceDipsw_sceKernelCheckDipsw.S",
            "SceSysmem_SceDipsw_sceKernelClearDipsw.S",
            "SceSysmem_SceDipsw_sceKernelSetDipsw.S",
            "SceSysmem_SceSysmem_sceKernelAllocMemBlock.S",
            "SceSysmem_SceSysmem_sceKernelAllocMemBlockForVM.S",
            "SceSysmem_SceSysmem_sceKernelAllocUnmapMemBlock.S",
            "SceSysmem_SceSysmem_sceKernelCheckModelCapability.S",
            "SceSysmem_SceSysmem_sceKernelCloseMemBlock.S",
            "SceSysmem_SceSysmem_sceKernelCloseVMDomain.S",
            "SceSysmem_SceSysmem_sceKernelFindMemBlockByAddr.S",
            "SceSysmem_SceSysmem_sceKernelFreeMemBlock.S",
            "SceSysmem_SceSysmem_sceKernelFreeMemBlockForVM.S",
            "SceSysmem_SceSysmem_sceKernelGetFreeMemorySize.S",
            "SceSysmem_SceSysmem_sceKernelGetMemBlockBase.S",
            "SceSysmem_SceSysmem_sceKernelGetMemBlockInfoByAddr.S",
            "SceSysmem_SceSysmem_sceKernelGetMemBlockInfoByRange.S",
            "SceSysmem_SceSysmem_sceKernelGetModel.S",
            "SceSysmem_SceSysmem_sceKernelGetModelForCDialog.S",
            "SceSysmem_SceSysmem_sceKernelGetSubbudgetInfo.S",
            "SceSysmem_SceSysmem_sceKernelIsPSVitaTV.S",
            "SceSysmem_SceSysmem_sceKernelOpenMemBlock.S",
            "SceSysmem_SceSysmem_sceKernelOpenVMDomain.S",
            "SceSysmem_SceSysmem_sceKernelSyncVMDomain.S",
        },
    });
}
pub fn buildSceCpuForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCpuForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicAddAndGet16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicAddAndGet32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicAddAndGet64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicAddAndGet8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicAddUnless16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicAddUnless32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicAddUnless64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicAddUnless8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicAndAndGet16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicAndAndGet32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicAndAndGet64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicAndAndGet8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicClearAndGet16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicClearAndGet32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicClearAndGet64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicClearAndGet8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicClearMask16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicClearMask32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicClearMask64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicClearMask8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicCompareAndSet16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicCompareAndSet32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicCompareAndSet64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicCompareAndSet8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicDecIfPositive16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicDecIfPositive32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicDecIfPositive64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicDecIfPositive8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndAdd16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndAdd32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndAdd64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndAdd8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndAnd16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndAnd32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndAnd64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndAnd8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndClear16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndClear32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndClear64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndClear8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndOr16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndOr32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndOr64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndOr8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndSet16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndSet32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndSet64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndSet8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndSub16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndSub32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndSub64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndSub8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndXor16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndXor32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndXor64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicGetAndXor8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicOrAndGet16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicOrAndGet32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicOrAndGet64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicOrAndGet8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicSet16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicSet32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicSet64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicSet8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicSetIfGreaterGet16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicSetIfGreaterGet32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicSetIfGreaterGet8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicSubAndGet16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicSubAndGet32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicSubAndGet64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicSubAndGet8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicXorAndGet16.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicXorAndGet32.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicXorAndGet64.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelAtomicXorAndGet8.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelCpuId.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelCpuResumeIntr.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelCpuSuspendIntr.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelDcacheCleanInvalidateRange.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelDcacheCleanInvalidateRangeForL1WBWA.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelDcacheCleanRange.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelDcacheCleanRangeForL1WBWA.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelDcacheInvalidateRange.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelDcacheInvalidateRangeForL1WBWA.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelIsUncacheAddressInTmpFsGame.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelRWSpinlockLowReadLock.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelRWSpinlockLowReadLockCpuSuspendIntr.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelRWSpinlockLowReadUnlock.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelRWSpinlockLowReadUnlockCpuResumeIntr.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelRWSpinlockLowTryReadLock.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelRWSpinlockLowTryReadLockCpuSuspendIntr.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelRWSpinlockLowTryWriteLock.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelRWSpinlockLowTryWriteLockCpuSuspendIntr.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelRWSpinlockLowWriteLock.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelRWSpinlockLowWriteLockCpuSuspendIntr.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelRWSpinlockLowWriteUnlock.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelRWSpinlockLowWriteUnlockCpuResumeIntr.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelSpinlockLowLock.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelSpinlockLowLockCpuSuspendIntr.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelSpinlockLowTrylock.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelSpinlockLowTrylockCpuSuspendIntr.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelSpinlockLowUnlock.S",
            "SceCpuForDriver_SceCpuForDriver_ksceKernelSpinlockLowUnlockCpuResumeIntr.S",
        },
    });
}
pub fn buildSceDebugForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceDebugForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceDebugForDriver_SceDebugForDriver_k_sceEventLogPut.S",
            "SceDebugForDriver_SceDebugForDriver_ksceEventLogGetInfo.S",
            "SceDebugForDriver_SceDebugForDriver_ksceEventLogPut.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelAssert.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelAssertLevel.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelGetAssertLevel.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelGetTtyInfo.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelPanic.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelPrintf.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelPrintfAssertLevel.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelPrintfLevel.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelPrintfLevelWithInfo.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelPrintfPanic.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelPrintfWithInfo.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelVprintf.S",
            "SceDebugForDriver_SceDebugForDriver_ksceKernelVprintfLevel.S",
        },
    });
}
pub fn buildSceDebugLedForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceDebugLedForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceDebugLedForDriver_SceDebugLedForDriver_ksceDebugLedInvokeHandle0.S",
            "SceDebugLedForDriver_SceDebugLedForDriver_ksceDebugLedInvokeHandle1.S",
            "SceDebugLedForDriver_SceDebugLedForDriver_ksceDebugLedRegisterHandle0.S",
            "SceDebugLedForDriver_SceDebugLedForDriver_ksceDebugLedRegisterHandle1.S",
            "SceDebugLedForDriver_SceDebugLedForDriver_ksceKernelGetGPI.S",
            "SceDebugLedForDriver_SceDebugLedForDriver_ksceKernelGetGPO.S",
            "SceDebugLedForDriver_SceDebugLedForDriver_ksceKernelSetGPI.S",
            "SceDebugLedForDriver_SceDebugLedForDriver_ksceKernelSetGPO.S",
            "SceDebugLedForDriver_SceDebugLedForDriver_ksceKernelSetGPOMask.S",
        },
    });
}
pub fn buildSceDipswForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceDipswForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceDipswForDriver_SceDipswForDriver_ksceKernelCheckDipsw.S",
            "SceDipswForDriver_SceDipswForDriver_ksceKernelClearDipsw.S",
            "SceDipswForDriver_SceDipswForDriver_ksceKernelGetDipswInfo.S",
            "SceDipswForDriver_SceDipswForDriver_ksceKernelSetDipsw.S",
        },
    });
}
pub fn buildSceKernelSuspendForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceKernelSuspendForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceKernelSuspendForDriver_SceKernelSuspendForDriver_ksceKernelPowerTick.S",
            "SceKernelSuspendForDriver_SceKernelSuspendForDriver_ksceKernelRegisterSysEventHandler.S",
            "SceKernelSuspendForDriver_SceKernelSuspendForDriver_ksceKernelSysEventDispatch.S",
            "SceKernelSuspendForDriver_SceKernelSuspendForDriver_ksceKernelUnregisterSysEventHandler.S",
        },
    });
}
pub fn buildSceKernelUtilsForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceKernelUtilsForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceAesDecrypt1.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceAesDecrypt2.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceAesEncrypt1.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceAesEncrypt2.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceAesInit1.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceAesInit2.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceAesInit3.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceDeflateDecompress.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceDeflateDecompressPartial.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceGzipDecompress.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceGzipGetComment.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceGzipGetCompressedData.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceGzipGetInfo.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceGzipGetName.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceGzipIsValid.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceHmacSha1Digest.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceHmacSha224Digest.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceHmacSha256Digest.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceMt19937GlobalInit.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceMt19937GlobalUninit.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceMt19937Init.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceMt19937UInt.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSfmt19937FillArray32.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSfmt19937FillArray64.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSfmt19937GenRand32.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSfmt19937GenRand64.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSfmt19937InitByArray.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSfmt19937InitGenRand.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSha1BlockInit.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSha1BlockResult.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSha1BlockUpdate.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSha1Digest.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSha224BlockInit.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSha224BlockResult.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSha224BlockUpdate.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSha224Digest.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSha256BlockInit.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSha256BlockResult.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSha256BlockUpdate.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceSha256Digest.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceZlibDecompress.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceZlibGetCompressedData.S",
            "SceKernelUtilsForDriver_SceKernelUtilsForDriver_ksceZlibGetInfo.S",
        },
    });
}
pub fn buildScePmMgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePmMgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePmMgrForDriver_ScePmMgrForDriver_kscePmMgrGetProductMode.S",
            "ScePmMgrForDriver_ScePmMgrForDriver_kscePmMgrIsExternalBootMode.S",
        },
    });
}
pub fn buildSceProcEventForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceProcEventForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceProcEventForDriver_SceProcEventForDriver_ksceKernelInvokeProcEventHandler.S",
            "SceProcEventForDriver_SceProcEventForDriver_ksceKernelRegisterProcEventHandler.S",
            "SceProcEventForDriver_SceProcEventForDriver_ksceKernelUnregisterProcEventHandler.S",
        },
    });
}
pub fn buildSceQafMgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceQafMgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceQafMgrForDriver_SceQafMgrForDriver_ksceSblQafMgrIsAllowControlIduAutoUpdate.S",
            "SceQafMgrForDriver_SceQafMgrForDriver_ksceSblQafMgrIsAllowDecryptedBootConfigLoad.S",
            "SceQafMgrForDriver_SceQafMgrForDriver_ksceSblQafMgrIsAllowDtcpIpReset.S",
            "SceQafMgrForDriver_SceQafMgrForDriver_ksceSblQafMgrIsAllowHost0Access.S",
            "SceQafMgrForDriver_SceQafMgrForDriver_ksceSblQafMgrIsAllowKeepCoreFile.S",
            "SceQafMgrForDriver_SceQafMgrForDriver_ksceSblQafMgrIsAllowLoadMagicGate.S",
            "SceQafMgrForDriver_SceQafMgrForDriver_ksceSblQafMgrIsAllowMarlinTest.S",
            "SceQafMgrForDriver_SceQafMgrForDriver_ksceSblQafMgrIsAllowNearTest.S",
            "SceQafMgrForDriver_SceQafMgrForDriver_ksceSblQafMgrIsAllowPSPEmuShowQAInfo.S",
            "SceQafMgrForDriver_SceQafMgrForDriver_ksceSblQafMgrIsAllowRemotePlayDebug.S",
            "SceQafMgrForDriver_SceQafMgrForDriver_ksceSblQafMgrIsAllowSystemAppDebug.S",
        },
    });
}
pub fn buildSceSblAIMgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblAIMgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrGetProductCode.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrGetProductSubCode.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrGetSMI.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsCEX.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsDEX.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsDolce.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsGenuineDolce.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsGenuineVITA.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsJapaneseFat.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsPrototypeRev2.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsPrototypeRev7.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsTest.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsTool.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsToolRev3.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsToolRev4.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsToolRev5.S",
            "SceSblAIMgrForDriver_SceSblAIMgrForDriver_ksceSblAimgrIsVITA.S",
        },
    });
}
pub fn buildSceSysclibForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSysclibForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSysclibForDriver_SceSysclibForDriver___aeabi_idiv.S",
            "SceSysclibForDriver_SceSysclibForDriver___aeabi_idivmod.S",
            "SceSysclibForDriver_SceSysclibForDriver___aeabi_lasr.S",
            "SceSysclibForDriver_SceSysclibForDriver___aeabi_lcmp.S",
            "SceSysclibForDriver_SceSysclibForDriver___aeabi_ldivmod.S",
            "SceSysclibForDriver_SceSysclibForDriver___aeabi_llsl.S",
            "SceSysclibForDriver_SceSysclibForDriver___aeabi_llsr.S",
            "SceSysclibForDriver_SceSysclibForDriver___aeabi_lmul.S",
            "SceSysclibForDriver_SceSysclibForDriver___aeabi_uidiv.S",
            "SceSysclibForDriver_SceSysclibForDriver___aeabi_uidivmod.S",
            "SceSysclibForDriver_SceSysclibForDriver___aeabi_ulcmp.S",
            "SceSysclibForDriver_SceSysclibForDriver___aeabi_uldivmod.S",
            "SceSysclibForDriver_SceSysclibForDriver___memcpy_chk.S",
            "SceSysclibForDriver_SceSysclibForDriver___memmove_chk.S",
            "SceSysclibForDriver_SceSysclibForDriver___memset_chk.S",
            "SceSysclibForDriver_SceSysclibForDriver___prnt.S",
            "SceSysclibForDriver_SceSysclibForDriver___snprintf_chk.S",
            "SceSysclibForDriver_SceSysclibForDriver___stack_chk_fail.S",
            "SceSysclibForDriver_SceSysclibForDriver___strlcat_chk.S",
            "SceSysclibForDriver_SceSysclibForDriver___strlcpy_chk.S",
            "SceSysclibForDriver_SceSysclibForDriver___strncat_chk.S",
            "SceSysclibForDriver_SceSysclibForDriver___strncat_chk2.S",
            "SceSysclibForDriver_SceSysclibForDriver___strncpy_chk.S",
            "SceSysclibForDriver_SceSysclibForDriver___strncpy_chk2.S",
            "SceSysclibForDriver_SceSysclibForDriver___vsnprintf_chk.S",
            "SceSysclibForDriver_SceSysclibForDriver_look_ctype_table.S",
            "SceSysclibForDriver_SceSysclibForDriver_memchr.S",
            "SceSysclibForDriver_SceSysclibForDriver_memcmp.S",
            "SceSysclibForDriver_SceSysclibForDriver_memcpy.S",
            "SceSysclibForDriver_SceSysclibForDriver_memmove.S",
            "SceSysclibForDriver_SceSysclibForDriver_memset.S",
            "SceSysclibForDriver_SceSysclibForDriver_snprintf.S",
            "SceSysclibForDriver_SceSysclibForDriver_strchr.S",
            "SceSysclibForDriver_SceSysclibForDriver_strcmp.S",
            "SceSysclibForDriver_SceSysclibForDriver_strlcat.S",
            "SceSysclibForDriver_SceSysclibForDriver_strlcpy.S",
            "SceSysclibForDriver_SceSysclibForDriver_strlen.S",
            "SceSysclibForDriver_SceSysclibForDriver_strncat.S",
            "SceSysclibForDriver_SceSysclibForDriver_strncmp.S",
            "SceSysclibForDriver_SceSysclibForDriver_strncpy.S",
            "SceSysclibForDriver_SceSysclibForDriver_strncpy_s.S",
            "SceSysclibForDriver_SceSysclibForDriver_strnlen.S",
            "SceSysclibForDriver_SceSysclibForDriver_strrchr.S",
            "SceSysclibForDriver_SceSysclibForDriver_strstr.S",
            "SceSysclibForDriver_SceSysclibForDriver_strtol.S",
            "SceSysclibForDriver_SceSysclibForDriver_strtoll.S",
            "SceSysclibForDriver_SceSysclibForDriver_strtoul.S",
            "SceSysclibForDriver_SceSysclibForDriver_timingsafe_memcmp.S",
            "SceSysclibForDriver_SceSysclibForDriver_tolower.S",
            "SceSysclibForDriver_SceSysclibForDriver_toupper.S",
            "SceSysclibForDriver_SceSysclibForDriver_vsnprintf.S",
            "SceSysclibForDriver_SceSysclibForDriver___stack_chk_guard.S",
        },
    });
}
pub fn buildSceSysrootForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSysrootForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSysrootForDriver_SceSysrootForDriver_ksceKernelInvokeInitCallback.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceKernelSysrootCheckModelCapability.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceKernelSysrootCoredumpTrigger.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceKernelSysrootGetShellPid.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceKernelSysrootGetSystemSwVersion.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceKernelSysrootRegisterCoredumpTrigger.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceKernelSysrootSetGetSystemSwVersionFunc.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceKernelSysrootSetProcessHandler.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceSysrootGetHardwareFlags.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceSysrootGetHardwareInfo.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceSysrootUseExternalStorage.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceSysrootUseInternalStorage.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceSysrootUtMgrHasNpTestFlag.S",
            "SceSysrootForDriver_SceSysrootForDriver_ksceSysrootUtMgrSetNpTestFlag.S",
        },
    });
}
pub fn buildSceSysrootForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSysrootForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelAllocHeapMemory2.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelIsColdBoot.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelIsSomeBootMode.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootAppMgrSpawnProcess.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootCheckRemapCodeForUser.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootDbgpSuspendProcessAndWaitResume.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootGetCurrentAddressSpaceCB.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootGetCurrentUIDEntryHeapCB.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootGetKblParam.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootGetModulePrivate.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootGetPUIDEntryHeap.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootGetProcessTitleId.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootGetSharedMemory.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootGetStatus.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootGetThreadAccessLevel.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootGetVbaseResetVector.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootIofilemgrStart.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootIsUserModeThread.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootProcessmgrStart2.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootRegisterDbgpHandler.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootSetSysroot.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceKernelSysrootUnregisterDbgpHandler.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootGetFactorySystemSwVersion.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootGetModuleInfoForPid.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootGetNidName.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootGetSelfAuthInfo.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootGetSelfInfo.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootGetSessionId.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootGetSysroot.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootGetWakeupFactor.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootIsBsodReboot.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootIsExternalBootMode.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootIsManufacturingMode.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootIsNonRemovableCardMode.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootIsSafeMode.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootIsUpdateMode.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootIsUsbEnumWakeup.S",
            "SceSysrootForKernel_SceSysrootForKernel_ksceSysrootRegisterLicMgrGetLicenseStatus.S",
        },
    });
}
pub fn buildSceAudio(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAudio",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAudio_SceAudio_sceAudioOutGetAdopt.S",
            "SceAudio_SceAudio_sceAudioOutGetConfig.S",
            "SceAudio_SceAudio_sceAudioOutGetPortVolume_forUser.S",
            "SceAudio_SceAudio_sceAudioOutGetRestSample.S",
            "SceAudio_SceAudio_sceAudioOutOpenExtPort.S",
            "SceAudio_SceAudio_sceAudioOutOpenPort.S",
            "SceAudio_SceAudio_sceAudioOutOutput.S",
            "SceAudio_SceAudio_sceAudioOutReleasePort.S",
            "SceAudio_SceAudio_sceAudioOutSetAdoptMode.S",
            "SceAudio_SceAudio_sceAudioOutSetAdopt_forUser.S",
            "SceAudio_SceAudio_sceAudioOutSetAlcMode.S",
            "SceAudio_SceAudio_sceAudioOutSetCompress.S",
            "SceAudio_SceAudio_sceAudioOutSetConfig.S",
            "SceAudio_SceAudio_sceAudioOutSetEffectType.S",
            "SceAudio_SceAudio_sceAudioOutSetPortVolume_forUser.S",
            "SceAudio_SceAudio_sceAudioOutSetVolume.S",
        },
    });
}
pub fn buildSceNearUtil(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNearUtil",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNearUtil_SceNearUtil_sceNearCloseDiscoveredGiftImage.S",
            "SceNearUtil_SceNearUtil_sceNearCloseReceivedGiftData.S",
            "SceNearUtil_SceNearUtil_sceNearConvertDiscoveredGiftParam.S",
            "SceNearUtil_SceNearUtil_sceNearDeleteDiscoveredGift.S",
            "SceNearUtil_SceNearUtil_sceNearDeleteGift.S",
            "SceNearUtil_SceNearUtil_sceNearFinalize.S",
            "SceNearUtil_SceNearUtil_sceNearFinalizeAndLaunchNearApp.S",
            "SceNearUtil_SceNearUtil_sceNearGetDiscoveredGiftInfo.S",
            "SceNearUtil_SceNearUtil_sceNearGetDiscoveredGiftSender.S",
            "SceNearUtil_SceNearUtil_sceNearGetDiscoveredGiftStatus.S",
            "SceNearUtil_SceNearUtil_sceNearGetDiscoveredGifts.S",
            "SceNearUtil_SceNearUtil_sceNearGetGift.S",
            "SceNearUtil_SceNearUtil_sceNearGetGiftStatus.S",
            "SceNearUtil_SceNearUtil_sceNearGetLastNeighborFoundDateTime.S",
            "SceNearUtil_SceNearUtil_sceNearGetMyStatus.S",
            "SceNearUtil_SceNearUtil_sceNearGetNeighbors.S",
            "SceNearUtil_SceNearUtil_sceNearGetNewNeighbors.S",
            "SceNearUtil_SceNearUtil_sceNearGetRecentNeighbors.S",
            "SceNearUtil_SceNearUtil_sceNearIgnoreDiscoveredGift.S",
            "SceNearUtil_SceNearUtil_sceNearInitialize.S",
            "SceNearUtil_SceNearUtil_sceNearLaunchNearAppForDownload.S",
            "SceNearUtil_SceNearUtil_sceNearLaunchNearAppForUpdate.S",
            "SceNearUtil_SceNearUtil_sceNearOpenDiscoveredGiftImage.S",
            "SceNearUtil_SceNearUtil_sceNearOpenReceivedGiftData.S",
            "SceNearUtil_SceNearUtil_sceNearReadDiscoveredGiftImage.S",
            "SceNearUtil_SceNearUtil_sceNearReadReceivedGiftData.S",
            "SceNearUtil_SceNearUtil_sceNearRefresh.S",
            "SceNearUtil_SceNearUtil_sceNearSetGift.S",
            "SceNearUtil_SceNearUtil_sceNearSetGift2.S",
        },
    });
}
pub fn buildSceLibMp4Recorder(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLibMp4Recorder",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLibMp4Recorder_SceLibMp4Recorder_sceMp4RecAddAudioSample.S",
            "SceLibMp4Recorder_SceLibMp4Recorder_sceMp4RecAddVideoSample.S",
            "SceLibMp4Recorder_SceLibMp4Recorder_sceMp4RecCreateRecorder.S",
            "SceLibMp4Recorder_SceLibMp4Recorder_sceMp4RecCsc.S",
            "SceLibMp4Recorder_SceLibMp4Recorder_sceMp4RecDeleteRecorder.S",
            "SceLibMp4Recorder_SceLibMp4Recorder_sceMp4RecInit.S",
            "SceLibMp4Recorder_SceLibMp4Recorder_sceMp4RecQueryPhysicalMemSize.S",
            "SceLibMp4Recorder_SceLibMp4Recorder_sceMp4RecRecorderEnd.S",
            "SceLibMp4Recorder_SceLibMp4Recorder_sceMp4RecRecorderInit.S",
            "SceLibMp4Recorder_SceLibMp4Recorder_sceMp4RecTerm.S",
        },
    });
}
pub fn buildSceUlt(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUlt",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUlt_SceUlt__sceUltConditionVariableCreate.S",
            "SceUlt_SceUlt__sceUltConditionVariableOptParamInitialize.S",
            "SceUlt_SceUlt__sceUltMutexCreate.S",
            "SceUlt_SceUlt__sceUltMutexOptParamInitialize.S",
            "SceUlt_SceUlt__sceUltQueueCreate.S",
            "SceUlt_SceUlt__sceUltQueueDataResourcePoolCreate.S",
            "SceUlt_SceUlt__sceUltQueueDataResourcePoolOptParamInitialize.S",
            "SceUlt_SceUlt__sceUltQueueOptParamInitialize.S",
            "SceUlt_SceUlt__sceUltReaderWriterLockCreate.S",
            "SceUlt_SceUlt__sceUltReaderWriterLockOptParamInitialize.S",
            "SceUlt_SceUlt__sceUltSemaphoreCreate.S",
            "SceUlt_SceUlt__sceUltSemaphoreOptParamInitialize.S",
            "SceUlt_SceUlt__sceUltUlthreadCreate.S",
            "SceUlt_SceUlt__sceUltUlthreadOptParamInitialize.S",
            "SceUlt_SceUlt__sceUltUlthreadRuntimeCreate.S",
            "SceUlt_SceUlt__sceUltUlthreadRuntimeOptParamInitialize.S",
            "SceUlt_SceUlt__sceUltWaitingQueueResourcePoolCreate.S",
            "SceUlt_SceUlt__sceUltWaitingQueueResourcePoolOptParamInitialize.S",
            "SceUlt_SceUlt_sceUltConditionVariableDestroy.S",
            "SceUlt_SceUlt_sceUltConditionVariableSignal.S",
            "SceUlt_SceUlt_sceUltConditionVariableSignalAll.S",
            "SceUlt_SceUlt_sceUltConditionVariableWait.S",
            "SceUlt_SceUlt_sceUltGetConditionVariableInfo.S",
            "SceUlt_SceUlt_sceUltGetMutexInfo.S",
            "SceUlt_SceUlt_sceUltGetQueueDataResourcePoolInfo.S",
            "SceUlt_SceUlt_sceUltGetQueueInfo.S",
            "SceUlt_SceUlt_sceUltGetReaderWriterLockInfo.S",
            "SceUlt_SceUlt_sceUltGetSemaphoreInfo.S",
            "SceUlt_SceUlt_sceUltGetUlthreadInfo.S",
            "SceUlt_SceUlt_sceUltGetUlthreadRuntimeInfo.S",
            "SceUlt_SceUlt_sceUltGetWaitingQueueResourcePoolInfo.S",
            "SceUlt_SceUlt_sceUltMutexDestroy.S",
            "SceUlt_SceUlt_sceUltMutexLock.S",
            "SceUlt_SceUlt_sceUltMutexTryLock.S",
            "SceUlt_SceUlt_sceUltMutexUnlock.S",
            "SceUlt_SceUlt_sceUltQueueDataResourcePoolDestroy.S",
            "SceUlt_SceUlt_sceUltQueueDataResourcePoolGetWorkAreaSize.S",
            "SceUlt_SceUlt_sceUltQueueDestroy.S",
            "SceUlt_SceUlt_sceUltQueuePop.S",
            "SceUlt_SceUlt_sceUltQueuePush.S",
            "SceUlt_SceUlt_sceUltQueueTryPop.S",
            "SceUlt_SceUlt_sceUltQueueTryPush.S",
            "SceUlt_SceUlt_sceUltReaderWriterLockDestroy.S",
            "SceUlt_SceUlt_sceUltReaderWriterLockLockRead.S",
            "SceUlt_SceUlt_sceUltReaderWriterLockLockWrite.S",
            "SceUlt_SceUlt_sceUltReaderWriterLockTryLockRead.S",
            "SceUlt_SceUlt_sceUltReaderWriterLockTryLockWrite.S",
            "SceUlt_SceUlt_sceUltReaderWriterLockUnlockRead.S",
            "SceUlt_SceUlt_sceUltReaderWriterLockUnlockWrite.S",
            "SceUlt_SceUlt_sceUltSemaphoreAcquire.S",
            "SceUlt_SceUlt_sceUltSemaphoreDestroy.S",
            "SceUlt_SceUlt_sceUltSemaphoreRelease.S",
            "SceUlt_SceUlt_sceUltSemaphoreTryAcquire.S",
            "SceUlt_SceUlt_sceUltUlthreadExit.S",
            "SceUlt_SceUlt_sceUltUlthreadGetSelf.S",
            "SceUlt_SceUlt_sceUltUlthreadJoin.S",
            "SceUlt_SceUlt_sceUltUlthreadRuntimeDestroy.S",
            "SceUlt_SceUlt_sceUltUlthreadRuntimeGetWorkAreaSize.S",
            "SceUlt_SceUlt_sceUltUlthreadTryJoin.S",
            "SceUlt_SceUlt_sceUltUlthreadYield.S",
            "SceUlt_SceUlt_sceUltWaitingQueueResourcePoolDestroy.S",
            "SceUlt_SceUlt_sceUltWaitingQueueResourcePoolGetWorkAreaSize.S",
        },
    });
}
pub fn buildSceIme(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceIme",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceIme_SceIme_sceImeClose.S",
            "SceIme_SceIme_sceImeOpen.S",
            "SceIme_SceIme_sceImeSetCaret.S",
            "SceIme_SceIme_sceImeSetPreeditGeometry.S",
            "SceIme_SceIme_sceImeSetText.S",
            "SceIme_SceIme_sceImeUpdate.S",
        },
    });
}
pub fn buildSceLiveArea(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLiveArea",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLiveArea_SceLiveAreaUtil_sceLiveAreaGetFrameRevision.S",
            "SceLiveArea_SceLiveAreaUtil_sceLiveAreaGetFrameUserData.S",
            "SceLiveArea_SceLiveAreaUtil_sceLiveAreaGetRevision.S",
            "SceLiveArea_SceLiveAreaUtil_sceLiveAreaGetStatus.S",
            "SceLiveArea_SceLiveAreaUtil_sceLiveAreaReplaceAllAsync.S",
            "SceLiveArea_SceLiveAreaUtil_sceLiveAreaReplaceAllSync.S",
            "SceLiveArea_SceLiveAreaUtil_sceLiveAreaUpdateFrameAsync.S",
            "SceLiveArea_SceLiveAreaUtil_sceLiveAreaUpdateFrameSync.S",
        },
    });
}
pub fn buildSceMotionDev(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceMotionDev",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceMotionDev_SceMotionDev_sceMotionDevGetAccCalibData.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetAccCalibData2.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetCalibrationData.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetCalibrationHeader.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetControllerType.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetCurrentMagnCalibData.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetCurrentMagnStabilityLevel.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetDeviceInfo.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetDeviceLocation.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetDs3CalibData.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetEvaInfo.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetFactoryMagnCalibData.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetGyroBias.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetGyroBias2.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetGyroCalibData.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetGyroCalibData2.S",
            "SceMotionDev_SceMotionDev_sceMotionDevGetMeasMode.S",
            "SceMotionDev_SceMotionDev_sceMotionDevIsReady.S",
            "SceMotionDev_SceMotionDev_sceMotionDevMagnSamplingStart.S",
            "SceMotionDev_SceMotionDev_sceMotionDevMagnSamplingStop.S",
            "SceMotionDev_SceMotionDev_sceMotionDevRead.S",
            "SceMotionDev_SceMotionDev_sceMotionDevRead2.S",
            "SceMotionDev_SceMotionDev_sceMotionDevRead3.S",
            "SceMotionDev_SceMotionDev_sceMotionDevReadForMagnCalib.S",
            "SceMotionDev_SceMotionDev_sceMotionDevSamplingStart.S",
            "SceMotionDev_SceMotionDev_sceMotionDevSamplingStart2.S",
            "SceMotionDev_SceMotionDev_sceMotionDevSamplingStop.S",
            "SceMotionDev_SceMotionDev_sceMotionDevSamplingStop2.S",
            "SceMotionDev_SceMotionDev_sceMotionDevSetGyroFeedBack.S",
            "SceMotionDev_SceMotionDev_sceMotionDevSetSamplingMode.S",
            "SceMotionDev_SceMotionDev_sceMotionDevUpdateMagnCalibData.S",
            "SceMotionDev_SceMotionDev_sceMotionDevUpdateMagnStabilityLevel.S",
        },
    });
}
pub fn buildSceMotionDevForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceMotionDevForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceMotionDevForDriver_SceMotionDevForDriver_ksceMotionDevGetCalibrationData.S",
            "SceMotionDevForDriver_SceMotionDevForDriver_ksceMotionDevGetCalibrationHeader.S",
            "SceMotionDevForDriver_SceMotionDevForDriver_ksceMotionDevGetDeviceInfo.S",
            "SceMotionDevForDriver_SceMotionDevForDriver_ksceMotionDevGetEvaInfo.S",
            "SceMotionDevForDriver_SceMotionDevForDriver_ksceMotionDevIsReady.S",
            "SceMotionDevForDriver_SceMotionDevForDriver_ksceMotionDevNoiseFilterIsAvailable.S",
            "SceMotionDevForDriver_SceMotionDevForDriver_ksceMotionDevRead.S",
            "SceMotionDevForDriver_SceMotionDevForDriver_ksceMotionDevRegisterVirtualMotionDriver.S",
            "SceMotionDevForDriver_SceMotionDevForDriver_ksceMotionDevSamplingStart.S",
            "SceMotionDevForDriver_SceMotionDevForDriver_ksceMotionDevSamplingStop.S",
            "SceMotionDevForDriver_SceMotionDevForDriver_ksceMotionDevSetSamplingMode.S",
        },
    });
}
pub fn buildSceSblACMgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblACMgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblACMgr_SceSblACMgr__sceSblACMgrIsGameProgram.S",
        },
    });
}
pub fn buildSceSblACMgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblACMgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrGetMediaType.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrGetProcessProgramAuthId.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrHasCapability.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsAllowedExtendedMemory.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsAllowedUsbSerial.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsAllowedVirtualMachine.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsDevelopmentMode.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsFself.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsGameProgram.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsMiniSettingsForQA.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsNonGameOrGameProgram.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsNonGameProgram.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsNotSandboxed.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsPSMDevAssistant.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsPSMRuntime.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsPspEmu.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsRootProgram.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsSIEApp.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsSceShell.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsSystemProgram.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsUpdaterUISetupperOrPkgInstallerSpawn.S",
            "SceSblACMgrForDriver_SceSblACMgrForDriver_ksceSblACMgrIsWebCoreOrWebKitProcess.S",
        },
    });
}
pub fn buildSceSblACMgrForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblACMgrForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblACMgrForKernel_SceSblACMgrForKernel_kscePfsACSetFSAttrByMode.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACIsSystemProgram.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrGetMediaType2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrGetProcessProgramAuthId2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrHasCapability2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsAllowedExtendedMemory2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsAllowedVirtualMachine2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsDevelopmentMode2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsFself2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsGameProgram2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsMiniSettingsForQA2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsNonGameOrGameProgram2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsNonGameProgram2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsNotSandboxed2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsPSMDevAssistant2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsPSMRuntime2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsPspEmu2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsRootProgram2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsSIEApp2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsSceShell2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsUpdaterUISetupperOrPkgInstallerSpawn2.S",
            "SceSblACMgrForKernel_SceSblACMgrForKernel_ksceSblACMgrIsWebCoreOrWebKitProcess2.S",
        },
    });
}
pub fn buildScePspnetAdhoc(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePspnetAdhoc",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocGetPdpStat.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocGetPtpStat.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocGetSocketAlert.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocInit.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPdpCreate.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPdpDelete.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPdpRecv.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPdpSend.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPollSocket.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPtpAccept.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPtpClose.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPtpConnect.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPtpFlush.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPtpListen.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPtpOpen.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPtpRecv.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocPtpSend.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocSetSocketAlert.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocTerm.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocctlGetAddrByName.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocctlGetAdhocId.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocctlGetEtherAddr.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocctlGetNameByAddr.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocctlGetParameter.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocctlGetPeerInfo.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocctlGetPeerList.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocctlInit.S",
            "ScePspnetAdhoc_ScePspnetAdhoc_sceNetAdhocctlTerm.S",
        },
    });
}
pub fn buildSceMusicExport(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceMusicExport",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceMusicExport_SceMusicExport_sceMusicExportFromFile.S",
        },
    });
}
pub fn buildSceNpMessage(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpMessage",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpMessage_SceNpMessage_sceNpMessageAbort.S",
            "SceNpMessage_SceNpMessage_sceNpMessageGetAttachedData.S",
            "SceNpMessage_SceNpMessage_sceNpMessageGetMessage.S",
            "SceNpMessage_SceNpMessage_sceNpMessageGetMessageEntries.S",
            "SceNpMessage_SceNpMessage_sceNpMessageGetMessageEntry.S",
            "SceNpMessage_SceNpMessage_sceNpMessageGetMessageEntryCount.S",
            "SceNpMessage_SceNpMessage_sceNpMessageInit.S",
            "SceNpMessage_SceNpMessage_sceNpMessageInitWithParam.S",
            "SceNpMessage_SceNpMessage_sceNpMessageSetAttachedDataUsedFlag.S",
            "SceNpMessage_SceNpMessage_sceNpMessageSyncMessage.S",
            "SceNpMessage_SceNpMessage_sceNpMessageTerm.S",
        },
    });
}
pub fn buildSceNetPsForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNetPsForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetAccept.S",
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetBind.S",
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetClose.S",
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetConnect.S",
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetGetpeername.S",
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetGetsockname.S",
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetGetsockopt.S",
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetListen.S",
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetRecvfrom.S",
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetSendto.S",
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetSetsockopt.S",
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetShutdown.S",
            "SceNetPsForDriver_SceNetPsForDriver_ksceNetSocket.S",
        },
    });
}
pub fn buildSceNetPs(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNetPs",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallAccept.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallBind.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallClose.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallConnect.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallControl.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallDescriptorClose.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallDescriptorCreate.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallDescriptorCtl.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallDumpAbort.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallDumpClose.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallDumpCreate.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallDumpRead.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallEpollAbort.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallEpollClose.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallEpollCreate.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallEpollCtl.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallEpollWait.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallGetIfList.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallGetSockinfo.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallGetpeername.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallGetsockname.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallGetsockopt.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallIcmConnect.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallIoctl.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallListen.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallRecvfrom.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallRecvmsg.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallSendmsg.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallSendto.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallSetsockopt.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallShutdown.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallSocket.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallSocketAbort.S",
            "SceNetPs_SceNetPsForSyscalls_sceNetSyscallSysctl.S",
        },
    });
}
pub fn buildSceVshBridge(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceVshBridge",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceVshBridge_SceDrmBridge__sceDrmBridgeGetCurrentSecureTick.S",
            "SceVshBridge_SceDrmBridge__sceDrmBridgeIsAllowRemotePlayDebug.S",
            "SceVshBridge_SceDrmBridge__sceDrmBridgeMlnpsnlAuth1.S",
            "SceVshBridge_SceDrmBridge__sceDrmBridgeMlnpsnlAuth2.S",
            "SceVshBridge_SceVshBridge__vshAppMgrAcInstGetAcdirParam.S",
            "SceVshBridge_SceVshBridge__vshAppMgrBgdlSetQueueStatus.S",
            "SceVshBridge_SceVshBridge__vshAppMgrCheckPfsMounted.S",
            "SceVshBridge_SceVshBridge__vshAppMgrCloudDataCreateHeader.S",
            "SceVshBridge_SceVshBridge__vshAppMgrCloudDataDstCreateMount.S",
            "SceVshBridge_SceVshBridge__vshAppMgrCloudDataGetMcId.S",
            "SceVshBridge_SceVshBridge__vshAppMgrCloudDataSetMcId.S",
            "SceVshBridge_SceVshBridge__vshAppMgrCloudDataSetupKey.S",
            "SceVshBridge_SceVshBridge__vshAppMgrCloudDataSrcMount.S",
            "SceVshBridge_SceVshBridge__vshAppMgrCloudDataVerifyHeader.S",
            "SceVshBridge_SceVshBridge__vshAppMgrFakeSaveDataCreateMount.S",
            "SceVshBridge_SceVshBridge__vshAppMgrIsExclusiveProcessRunning.S",
            "SceVshBridge_SceVshBridge__vshAppMgrLocalBackupGetOfflineId.S",
            "SceVshBridge_SceVshBridge__vshAppMgrLocalBackupVerifyOfflineHeader.S",
            "SceVshBridge_SceVshBridge__vshAppMgrRegisterPath.S",
            "SceVshBridge_SceVshBridge__vshAppMgrSaveDataLocalBackupTargetGetList.S",
            "SceVshBridge_SceVshBridge__vshAppMgrSaveDataLocalBackupTargetRemoveItem.S",
            "SceVshBridge_SceVshBridge__vshAppMgrSaveDataNotifyBackupFinished.S",
            "SceVshBridge_SceVshBridge__vshAppMgrSystemParamDateTimeSetConf.S",
            "SceVshBridge_SceVshBridge__vshAppMgrUpdateRifInfo.S",
            "SceVshBridge_SceVshBridge__vshCoredumpCafCreateIv.S",
            "SceVshBridge_SceVshBridge__vshCoredumpCafHeaderFinal.S",
            "SceVshBridge_SceVshBridge__vshCoredumpCafHeaderTransform.S",
            "SceVshBridge_SceVshBridge__vshCoredumpCafSegmentFinal.S",
            "SceVshBridge_SceVshBridge__vshCoredumpCafSegmentInit.S",
            "SceVshBridge_SceVshBridge__vshCoredumpCafSegmentTransform.S",
            "SceVshBridge_SceVshBridge__vshCoredumpCreateDump.S",
            "SceVshBridge_SceVshBridge__vshDisplayGetActualViewportConf.S",
            "SceVshBridge_SceVshBridge__vshDisplaySetViewportConf.S",
            "SceVshBridge_SceVshBridge__vshEventLogPut.S",
            "SceVshBridge_SceVshBridge__vshIdStorageCreateAtomicLeaves.S",
            "SceVshBridge_SceVshBridge__vshIoChstat.S",
            "SceVshBridge_SceVshBridge__vshIoDread.S",
            "SceVshBridge_SceVshBridge__vshIoGetstat.S",
            "SceVshBridge_SceVshBridge__vshIoMount.S",
            "SceVshBridge_SceVshBridge__vshKernelGetCompiledSdkVersionByPid.S",
            "SceVshBridge_SceVshBridge__vshKernelSearchModuleByName.S",
            "SceVshBridge_SceVshBridge__vshKernelShutdownSystem.S",
            "SceVshBridge_SceVshBridge__vshLedSetMode.S",
            "SceVshBridge_SceVshBridge__vshNpDrmEbootSigConvert.S",
            "SceVshBridge_SceVshBridge__vshNpDrmEbootSigGenMultiDisc.S",
            "SceVshBridge_SceVshBridge__vshNpDrmEbootSigGenPs1.S",
            "SceVshBridge_SceVshBridge__vshNpDrmEbootSigGenPsp.S",
            "SceVshBridge_SceVshBridge__vshNpDrmEbootSigVerify.S",
            "SceVshBridge_SceVshBridge__vshNpDrmGetLegacyDocKey.S",
            "SceVshBridge_SceVshBridge__vshNpDrmPspEbootSigGen.S",
            "SceVshBridge_SceVshBridge__vshNpDrmPspEbootVerify.S",
            "SceVshBridge_SceVshBridge__vshPowerSetBatteryFakeStatus.S",
            "SceVshBridge_SceVshBridge__vshRtcGetAlarmTick.S",
            "SceVshBridge_SceVshBridge__vshRtcGetCurrentSecureTick.S",
            "SceVshBridge_SceVshBridge__vshRtcGetSecureAlarmTick.S",
            "SceVshBridge_SceVshBridge__vshRtcSetAlarmTick.S",
            "SceVshBridge_SceVshBridge__vshRtcSetCurrentDebugNetworkTick.S",
            "SceVshBridge_SceVshBridge__vshRtcSetCurrentNetworkTick.S",
            "SceVshBridge_SceVshBridge__vshRtcSetCurrentSecureTick.S",
            "SceVshBridge_SceVshBridge__vshRtcSetCurrentTick.S",
            "SceVshBridge_SceVshBridge__vshRtcSetSecureAlarmTick.S",
            "SceVshBridge_SceVshBridge__vshSDfCtlSetBootParameter.S",
            "SceVshBridge_SceVshBridge__vshSblAimgrGetConsoleId.S",
            "SceVshBridge_SceVshBridge__vshSblAimgrGetPscode.S",
            "SceVshBridge_SceVshBridge__vshSblAimgrGetPscode2.S",
            "SceVshBridge_SceVshBridge__vshSblAimgrGetSMI.S",
            "SceVshBridge_SceVshBridge__vshSblAimgrGetVisibleId.S",
            "SceVshBridge_SceVshBridge__vshSblAuthMgrVerifySpsfo.S",
            "SceVshBridge_SceVshBridge__vshSblGcAuthMgrMlnpsnlAuth1.S",
            "SceVshBridge_SceVshBridge__vshSblGcAuthMgrMlnpsnlAuth2.S",
            "SceVshBridge_SceVshBridge__vshSblGetSystemSwVersion.S",
            "SceVshBridge_SceVshBridge__vshSblSsCreatePassPhrase.S",
            "SceVshBridge_SceVshBridge__vshSblSsDecryptWithPortability.S",
            "SceVshBridge_SceVshBridge__vshSblSsEncryptWithPortability.S",
            "SceVshBridge_SceVshBridge__vshSblSsGenerateAppKey.S",
            "SceVshBridge_SceVshBridge__vshSblSsGetNvsData.S",
            "SceVshBridge_SceVshBridge__vshSblSsSetNvsData.S",
            "SceVshBridge_SceVshBridge__vshSysconCtrlManualChargeMode.S",
            "SceVshBridge_SceVshBridge__vshSysconGetHardwareInfo.S",
            "SceVshBridge_SceVshBridge__vshSysconGetHardwareInfo2.S",
            "SceVshBridge_SceVshBridge__vshSysconGetManualChargeMode.S",
            "SceVshBridge_SceVshBridge__vshSysconGetManufacturesStatus.S",
            "SceVshBridge_SceVshBridge__vshSysconGetTemperatureLog.S",
            "SceVshBridge_SceVshBridge__vshSysconGetUsbDetStatus.S",
            "SceVshBridge_SceVshBridge__vshSysconLogReadData.S",
            "SceVshBridge_SceVshBridge__vshTouchSetTouchEmulationData.S",
            "SceVshBridge_SceVshBridge_vshAppMgrCheckContentInstallPeriod.S",
            "SceVshBridge_SceVshBridge_vshAppMgrCloudDataClearMcId.S",
            "SceVshBridge_SceVshBridge_vshAppMgrDebugSettingNotifyUpdate.S",
            "SceVshBridge_SceVshBridge_vshAppMgrGetPfsProcessStatus.S",
            "SceVshBridge_SceVshBridge_vshCoredumpCafContextCreate.S",
            "SceVshBridge_SceVshBridge_vshCoredumpCafContextDestroy.S",
            "SceVshBridge_SceVshBridge_vshCoredumpCafFinal.S",
            "SceVshBridge_SceVshBridge_vshCoredumpCafHeaderInit.S",
            "SceVshBridge_SceVshBridge_vshCoredumpCafInit.S",
            "SceVshBridge_SceVshBridge_vshCoredumpDeleteCrashReportCaf.S",
            "SceVshBridge_SceVshBridge_vshCtrlChangePortAssign.S",
            "SceVshBridge_SceVshBridge_vshCtrlGetActiveControllerPort.S",
            "SceVshBridge_SceVshBridge_vshCtrlIsBdRemoconConnected.S",
            "SceVshBridge_SceVshBridge_vshCtrlRegisterNotifyCallBack.S",
            "SceVshBridge_SceVshBridge_vshCtrlSetIdleCancelKey.S",
            "SceVshBridge_SceVshBridge_vshCtrlSetIdleCancelThreshold.S",
            "SceVshBridge_SceVshBridge_vshCtrlSetTurnOffInterval.S",
            "SceVshBridge_SceVshBridge_vshCtrlSetVibrationSetting.S",
            "SceVshBridge_SceVshBridge_vshCtrlUnregisterNotifyCallBack.S",
            "SceVshBridge_SceVshBridge_vshDisplayRegisterFrameBufCallback.S",
            "SceVshBridge_SceVshBridge_vshDisplaySetInvertColors.S",
            "SceVshBridge_SceVshBridge_vshHdmiCecCmdForcedPollingMsg.S",
            "SceVshBridge_SceVshBridge_vshHdmiDisableCec.S",
            "SceVshBridge_SceVshBridge_vshHdmiEnableCec.S",
            "SceVshBridge_SceVshBridge_vshIdStorageCreateLeaf.S",
            "SceVshBridge_SceVshBridge_vshIdStorageDeleteLeaf.S",
            "SceVshBridge_SceVshBridge_vshIdStorageFlush.S",
            "SceVshBridge_SceVshBridge_vshIdStorageFormat.S",
            "SceVshBridge_SceVshBridge_vshIdStorageGetFreeLeaves.S",
            "SceVshBridge_SceVshBridge_vshIdStorageGetLeafSize.S",
            "SceVshBridge_SceVshBridge_vshIdStorageIsDirty.S",
            "SceVshBridge_SceVshBridge_vshIdStorageIsFormatted.S",
            "SceVshBridge_SceVshBridge_vshIdStorageIsReadOnly.S",
            "SceVshBridge_SceVshBridge_vshIdStorageLookup.S",
            "SceVshBridge_SceVshBridge_vshIdStorageReadLeaf.S",
            "SceVshBridge_SceVshBridge_vshIdStorageRestart.S",
            "SceVshBridge_SceVshBridge_vshIdStorageUnformat.S",
            "SceVshBridge_SceVshBridge_vshIdStorageUpdate.S",
            "SceVshBridge_SceVshBridge_vshIdStorageWriteLeaf.S",
            "SceVshBridge_SceVshBridge_vshIoClearErrorEvent.S",
            "SceVshBridge_SceVshBridge_vshIoCreateErrorEvent.S",
            "SceVshBridge_SceVshBridge_vshIoCreateMountEvent.S",
            "SceVshBridge_SceVshBridge_vshIoDeleteErrorEvent.S",
            "SceVshBridge_SceVshBridge_vshIoDeleteMountEvent.S",
            "SceVshBridge_SceVshBridge_vshIoFlock.S",
            "SceVshBridge_SceVshBridge_vshIoGetProcessDefaultPriorityForSystem.S",
            "SceVshBridge_SceVshBridge_vshIoSetProcessDefaultPriorityForSystem.S",
            "SceVshBridge_SceVshBridge_vshIoUmount.S",
            "SceVshBridge_SceVshBridge_vshKernelCheckModelCapability.S",
            "SceVshBridge_SceVshBridge_vshKernelDisableAutoClockDown.S",
            "SceVshBridge_SceVshBridge_vshKernelEnableAutoClockDown.S",
            "SceVshBridge_SceVshBridge_vshKernelSendSysEvent.S",
            "SceVshBridge_SceVshBridge_vshMemoryCardEnableSlowMode.S",
            "SceVshBridge_SceVshBridge_vshMemoryCardGetCardInsertState.S",
            "SceVshBridge_SceVshBridge_vshMotionNoiseFilterIsAvailable.S",
            "SceVshBridge_SceVshBridge_vshMsifGetMsInfo.S",
            "SceVshBridge_SceVshBridge_vshNpDrmIsLooseAccountBind.S",
            "SceVshBridge_SceVshBridge_vshNpDrmUpdateAccountId.S",
            "SceVshBridge_SceVshBridge_vshNpDrmUpdateDebugSettings.S",
            "SceVshBridge_SceVshBridge_vshPowerGetWakeupFactor.S",
            "SceVshBridge_SceVshBridge_vshPowerRequestColdReset.S",
            "SceVshBridge_SceVshBridge_vshPowerRequestHibernate.S",
            "SceVshBridge_SceVshBridge_vshPowerSetPowerSwMode.S",
            "SceVshBridge_SceVshBridge_vshPowerSetPsButtonPushTime.S",
            "SceVshBridge_SceVshBridge_vshPowerSetStandbyButtonPushTime.S",
            "SceVshBridge_SceVshBridge_vshRemovableMemoryGetCardInsertState.S",
            "SceVshBridge_SceVshBridge_vshRtcIsAlarmed.S",
            "SceVshBridge_SceVshBridge_vshRtcIsSecureAlarmed.S",
            "SceVshBridge_SceVshBridge_vshRtcRegisterCallback.S",
            "SceVshBridge_SceVshBridge_vshRtcRegisterSecureAlarmCallback.S",
            "SceVshBridge_SceVshBridge_vshRtcSetConf.S",
            "SceVshBridge_SceVshBridge_vshRtcUnregisterCallback.S",
            "SceVshBridge_SceVshBridge_vshRtcUnregisterSecureAlarmCallback.S",
            "SceVshBridge_SceVshBridge_vshSblACMgrHasCapability.S",
            "SceVshBridge_SceVshBridge_vshSblAimgrIsCEX.S",
            "SceVshBridge_SceVshBridge_vshSblAimgrIsDEX.S",
            "SceVshBridge_SceVshBridge_vshSblAimgrIsDolce.S",
            "SceVshBridge_SceVshBridge_vshSblAimgrIsGenuineDolce.S",
            "SceVshBridge_SceVshBridge_vshSblAimgrIsGenuineVITA.S",
            "SceVshBridge_SceVshBridge_vshSblAimgrIsTest.S",
            "SceVshBridge_SceVshBridge_vshSblAimgrIsTool.S",
            "SceVshBridge_SceVshBridge_vshSblAimgrIsVITA.S",
            "SceVshBridge_SceVshBridge_vshSblPmMgrSetSdModeOff.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowControlIduAutoUpdate.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowDtcpIpReset.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowFakeACInstall.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowKeepCoreFile.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowLiblocationChangeModel.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowLoadMagicGate.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowLoadPSPEmuWhiteList.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowMarlinTest.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowNearTest.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowPSPEmuDeleteParameter.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowPSPEmuScreenShot.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowPSPEmuSelectNPEnv.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowPSPEmuShowQAInfo.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowRemotePlayDebug.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowShowTitleUpgradeInfo.S",
            "SceVshBridge_SceVshBridge_vshSblQafMgrIsAllowSystemAppDebug.S",
            "SceVshBridge_SceVshBridge_vshSblSsIsDevelopmentMode.S",
            "SceVshBridge_SceVshBridge_vshSblUtMgrHasComTestFlag.S",
            "SceVshBridge_SceVshBridge_vshSblUtMgrHasNpTestFlag.S",
            "SceVshBridge_SceVshBridge_vshSblUtMgrHasStoreFlag.S",
            "SceVshBridge_SceVshBridge_vshSdGetCardInfo.S",
            "SceVshBridge_SceVshBridge_vshSysconBeginConfigstorageTransaction.S",
            "SceVshBridge_SceVshBridge_vshSysconClearTemperatureLog.S",
            "SceVshBridge_SceVshBridge_vshSysconCommitConfigstorageTransaction.S",
            "SceVshBridge_SceVshBridge_vshSysconEnableHibernateIO.S",
            "SceVshBridge_SceVshBridge_vshSysconEndConfigstorageTransaction.S",
            "SceVshBridge_SceVshBridge_vshSysconGetBatteryCalibData.S",
            "SceVshBridge_SceVshBridge_vshSysconGetLogInfo.S",
            "SceVshBridge_SceVshBridge_vshSysconHasWWAN.S",
            "SceVshBridge_SceVshBridge_vshSysconIduModeClear.S",
            "SceVshBridge_SceVshBridge_vshSysconIduModeSet.S",
            "SceVshBridge_SceVshBridge_vshSysconIsDownLoaderMode.S",
            "SceVshBridge_SceVshBridge_vshSysconIsIduMode.S",
            "SceVshBridge_SceVshBridge_vshSysconIsMCEmuCapable.S",
            "SceVshBridge_SceVshBridge_vshSysconIsShowMode.S",
            "SceVshBridge_SceVshBridge_vshSysconLoadConfigstorageScript.S",
            "SceVshBridge_SceVshBridge_vshSysconLogStart.S",
            "SceVshBridge_SceVshBridge_vshSysconLogStartWaiting.S",
            "SceVshBridge_SceVshBridge_vshSysconShowModeClear.S",
            "SceVshBridge_SceVshBridge_vshSysconShowModeSet.S",
            "SceVshBridge_SceVshBridge_vshSysconVerifyConfigstorageScript.S",
        },
    });
}
pub fn buildSceUsbServ(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUsbServ",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUsbServ_SceUsbServ_sceUsbServAccessoryActivate.S",
            "SceUsbServ_SceUsbServ_sceUsbServAccessoryDeactivate.S",
        },
    });
}
pub fn buildSceUsbServForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUsbServForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUsbServForDriver_SceUsbServForDriver_ksceUsbServAccessoryActivate.S",
            "SceUsbServForDriver_SceUsbServForDriver_ksceUsbServAccessoryDeactivate.S",
            "SceUsbServForDriver_SceUsbServForDriver_ksceUsbServDisableEtherSuspend.S",
            "SceUsbServForDriver_SceUsbServForDriver_ksceUsbServEtherDisable.S",
            "SceUsbServForDriver_SceUsbServForDriver_ksceUsbServEtherEnable.S",
            "SceUsbServForDriver_SceUsbServForDriver_ksceUsbServMacGet.S",
            "SceUsbServForDriver_SceUsbServForDriver_ksceUsbServMacSelect.S",
        },
    });
}
pub fn buildSceGxm(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceGxm",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceGxm_SceGxm__sceGxmBeginScene.S",
            "SceGxm_SceGxm__sceGxmMidSceneFlush.S",
            "SceGxm_SceGxm__sceGxmProgramFindParameterBySemantic.S",
            "SceGxm_SceGxm__sceGxmProgramParameterGetSemantic.S",
            "SceGxm_SceGxm__sceGxmSetVertexTexture.S",
            "SceGxm_SceGxm__sceGxmTextureSetHeight.S",
            "SceGxm_SceGxm__sceGxmTextureSetWidth.S",
            "SceGxm_SceGxm_sceGxmAddRazorGpuCaptureBuffer.S",
            "SceGxm_SceGxm_sceGxmBeginCommandList.S",
            "SceGxm_SceGxm_sceGxmBeginScene.S",
            "SceGxm_SceGxm_sceGxmBeginSceneEx.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceGetClip.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceGetData.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceGetDitherMode.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceGetFormat.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceGetGammaMode.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceGetScaleMode.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceGetStrideInPixels.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceGetType.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceInit.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceInitDisabled.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceIsEnabled.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceSetClip.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceSetData.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceSetDitherMode.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceSetFormat.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceSetGammaMode.S",
            "SceGxm_SceGxm_sceGxmColorSurfaceSetScaleMode.S",
            "SceGxm_SceGxm_sceGxmCreateContext.S",
            "SceGxm_SceGxm_sceGxmCreateDeferredContext.S",
            "SceGxm_SceGxm_sceGxmCreateRenderTarget.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceGetBackgroundDepth.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceGetBackgroundMask.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceGetBackgroundStencil.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceGetForceLoadMode.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceGetForceStoreMode.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceGetFormat.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceGetStrideInSamples.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceInit.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceInitDisabled.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceIsEnabled.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceSetBackgroundDepth.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceSetBackgroundMask.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceSetBackgroundStencil.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceSetForceLoadMode.S",
            "SceGxm_SceGxm_sceGxmDepthStencilSurfaceSetForceStoreMode.S",
            "SceGxm_SceGxm_sceGxmDestroyContext.S",
            "SceGxm_SceGxm_sceGxmDestroyDeferredContext.S",
            "SceGxm_SceGxm_sceGxmDestroyRenderTarget.S",
            "SceGxm_SceGxm_sceGxmDisplayQueueAddEntry.S",
            "SceGxm_SceGxm_sceGxmDisplayQueueFinish.S",
            "SceGxm_SceGxm_sceGxmDraw.S",
            "SceGxm_SceGxm_sceGxmDrawInstanced.S",
            "SceGxm_SceGxm_sceGxmDrawPrecomputed.S",
            "SceGxm_SceGxm_sceGxmEndCommandList.S",
            "SceGxm_SceGxm_sceGxmEndScene.S",
            "SceGxm_SceGxm_sceGxmExecuteCommandList.S",
            "SceGxm_SceGxm_sceGxmFinish.S",
            "SceGxm_SceGxm_sceGxmFragmentProgramGetPassType.S",
            "SceGxm_SceGxm_sceGxmFragmentProgramGetProgram.S",
            "SceGxm_SceGxm_sceGxmFragmentProgramIsEnabled.S",
            "SceGxm_SceGxm_sceGxmGetContextType.S",
            "SceGxm_SceGxm_sceGxmGetDeferredContextFragmentBuffer.S",
            "SceGxm_SceGxm_sceGxmGetDeferredContextVdmBuffer.S",
            "SceGxm_SceGxm_sceGxmGetDeferredContextVertexBuffer.S",
            "SceGxm_SceGxm_sceGxmGetNotificationRegion.S",
            "SceGxm_SceGxm_sceGxmGetParameterBufferThreshold.S",
            "SceGxm_SceGxm_sceGxmGetPrecomputedDrawSize.S",
            "SceGxm_SceGxm_sceGxmGetPrecomputedFragmentStateSize.S",
            "SceGxm_SceGxm_sceGxmGetPrecomputedVertexStateSize.S",
            "SceGxm_SceGxm_sceGxmGetRenderTargetMemSize.S",
            "SceGxm_SceGxm_sceGxmInitialize.S",
            "SceGxm_SceGxm_sceGxmIsDebugVersion.S",
            "SceGxm_SceGxm_sceGxmMapFragmentUsseMemory.S",
            "SceGxm_SceGxm_sceGxmMapMemory.S",
            "SceGxm_SceGxm_sceGxmMapVertexUsseMemory.S",
            "SceGxm_SceGxm_sceGxmMidSceneFlush.S",
            "SceGxm_SceGxm_sceGxmNotificationWait.S",
            "SceGxm_SceGxm_sceGxmPadHeartbeat.S",
            "SceGxm_SceGxm_sceGxmPadTriggerGpuPaTrace.S",
            "SceGxm_SceGxm_sceGxmPopUserMarker.S",
            "SceGxm_SceGxm_sceGxmPrecomputedDrawInit.S",
            "SceGxm_SceGxm_sceGxmPrecomputedDrawSetAllVertexStreams.S",
            "SceGxm_SceGxm_sceGxmPrecomputedDrawSetParams.S",
            "SceGxm_SceGxm_sceGxmPrecomputedDrawSetParamsInstanced.S",
            "SceGxm_SceGxm_sceGxmPrecomputedDrawSetVertexStream.S",
            "SceGxm_SceGxm_sceGxmPrecomputedFragmentStateGetDefaultUniformBuffer.S",
            "SceGxm_SceGxm_sceGxmPrecomputedFragmentStateInit.S",
            "SceGxm_SceGxm_sceGxmPrecomputedFragmentStateSetAllAuxiliarySurfaces.S",
            "SceGxm_SceGxm_sceGxmPrecomputedFragmentStateSetAllTextures.S",
            "SceGxm_SceGxm_sceGxmPrecomputedFragmentStateSetAllUniformBuffers.S",
            "SceGxm_SceGxm_sceGxmPrecomputedFragmentStateSetDefaultUniformBuffer.S",
            "SceGxm_SceGxm_sceGxmPrecomputedFragmentStateSetTexture.S",
            "SceGxm_SceGxm_sceGxmPrecomputedFragmentStateSetUniformBuffer.S",
            "SceGxm_SceGxm_sceGxmPrecomputedVertexStateGetDefaultUniformBuffer.S",
            "SceGxm_SceGxm_sceGxmPrecomputedVertexStateInit.S",
            "SceGxm_SceGxm_sceGxmPrecomputedVertexStateSetAllTextures.S",
            "SceGxm_SceGxm_sceGxmPrecomputedVertexStateSetAllUniformBuffers.S",
            "SceGxm_SceGxm_sceGxmPrecomputedVertexStateSetDefaultUniformBuffer.S",
            "SceGxm_SceGxm_sceGxmPrecomputedVertexStateSetTexture.S",
            "SceGxm_SceGxm_sceGxmPrecomputedVertexStateSetUniformBuffer.S",
            "SceGxm_SceGxm_sceGxmProgramCheck.S",
            "SceGxm_SceGxm_sceGxmProgramFindParameterByName.S",
            "SceGxm_SceGxm_sceGxmProgramFindParameterBySemantic.S",
            "SceGxm_SceGxm_sceGxmProgramGetDefaultUniformBufferSize.S",
            "SceGxm_SceGxm_sceGxmProgramGetFragmentProgramInputs.S",
            "SceGxm_SceGxm_sceGxmProgramGetOutputRegisterFormat.S",
            "SceGxm_SceGxm_sceGxmProgramGetParameter.S",
            "SceGxm_SceGxm_sceGxmProgramGetParameterCount.S",
            "SceGxm_SceGxm_sceGxmProgramGetSize.S",
            "SceGxm_SceGxm_sceGxmProgramGetType.S",
            "SceGxm_SceGxm_sceGxmProgramGetVertexProgramOutputs.S",
            "SceGxm_SceGxm_sceGxmProgramIsDepthReplaceUsed.S",
            "SceGxm_SceGxm_sceGxmProgramIsDiscardUsed.S",
            "SceGxm_SceGxm_sceGxmProgramIsEquivalent.S",
            "SceGxm_SceGxm_sceGxmProgramIsFragColorUsed.S",
            "SceGxm_SceGxm_sceGxmProgramIsNativeColorUsed.S",
            "SceGxm_SceGxm_sceGxmProgramIsSpriteCoordUsed.S",
            "SceGxm_SceGxm_sceGxmProgramParameterGetArraySize.S",
            "SceGxm_SceGxm_sceGxmProgramParameterGetCategory.S",
            "SceGxm_SceGxm_sceGxmProgramParameterGetComponentCount.S",
            "SceGxm_SceGxm_sceGxmProgramParameterGetContainerIndex.S",
            "SceGxm_SceGxm_sceGxmProgramParameterGetIndex.S",
            "SceGxm_SceGxm_sceGxmProgramParameterGetName.S",
            "SceGxm_SceGxm_sceGxmProgramParameterGetResourceIndex.S",
            "SceGxm_SceGxm_sceGxmProgramParameterGetSemantic.S",
            "SceGxm_SceGxm_sceGxmProgramParameterGetSemanticIndex.S",
            "SceGxm_SceGxm_sceGxmProgramParameterGetType.S",
            "SceGxm_SceGxm_sceGxmProgramParameterIsRegFormat.S",
            "SceGxm_SceGxm_sceGxmProgramParameterIsSamplerCube.S",
            "SceGxm_SceGxm_sceGxmPushUserMarker.S",
            "SceGxm_SceGxm_sceGxmRemoveRazorGpuCaptureBuffer.S",
            "SceGxm_SceGxm_sceGxmRenderTargetGetDriverMemBlock.S",
            "SceGxm_SceGxm_sceGxmRenderTargetGetHostMem.S",
            "SceGxm_SceGxm_sceGxmReserveFragmentDefaultUniformBuffer.S",
            "SceGxm_SceGxm_sceGxmReserveVertexDefaultUniformBuffer.S",
            "SceGxm_SceGxm_sceGxmSetAuxiliarySurface.S",
            "SceGxm_SceGxm_sceGxmSetBackDepthBias.S",
            "SceGxm_SceGxm_sceGxmSetBackDepthFunc.S",
            "SceGxm_SceGxm_sceGxmSetBackDepthWriteEnable.S",
            "SceGxm_SceGxm_sceGxmSetBackFragmentProgramEnable.S",
            "SceGxm_SceGxm_sceGxmSetBackLineFillLastPixelEnable.S",
            "SceGxm_SceGxm_sceGxmSetBackPointLineWidth.S",
            "SceGxm_SceGxm_sceGxmSetBackPolygonMode.S",
            "SceGxm_SceGxm_sceGxmSetBackStencilFunc.S",
            "SceGxm_SceGxm_sceGxmSetBackStencilRef.S",
            "SceGxm_SceGxm_sceGxmSetBackVisibilityTestEnable.S",
            "SceGxm_SceGxm_sceGxmSetBackVisibilityTestIndex.S",
            "SceGxm_SceGxm_sceGxmSetBackVisibilityTestOp.S",
            "SceGxm_SceGxm_sceGxmSetCullMode.S",
            "SceGxm_SceGxm_sceGxmSetDefaultRegionClipAndViewport.S",
            "SceGxm_SceGxm_sceGxmSetDeferredContextFragmentBuffer.S",
            "SceGxm_SceGxm_sceGxmSetDeferredContextVdmBuffer.S",
            "SceGxm_SceGxm_sceGxmSetDeferredContextVertexBuffer.S",
            "SceGxm_SceGxm_sceGxmSetFragmentDefaultUniformBuffer.S",
            "SceGxm_SceGxm_sceGxmSetFragmentProgram.S",
            "SceGxm_SceGxm_sceGxmSetFragmentTexture.S",
            "SceGxm_SceGxm_sceGxmSetFragmentUniformBuffer.S",
            "SceGxm_SceGxm_sceGxmSetFrontDepthBias.S",
            "SceGxm_SceGxm_sceGxmSetFrontDepthFunc.S",
            "SceGxm_SceGxm_sceGxmSetFrontDepthWriteEnable.S",
            "SceGxm_SceGxm_sceGxmSetFrontFragmentProgramEnable.S",
            "SceGxm_SceGxm_sceGxmSetFrontLineFillLastPixelEnable.S",
            "SceGxm_SceGxm_sceGxmSetFrontPointLineWidth.S",
            "SceGxm_SceGxm_sceGxmSetFrontPolygonMode.S",
            "SceGxm_SceGxm_sceGxmSetFrontStencilFunc.S",
            "SceGxm_SceGxm_sceGxmSetFrontStencilRef.S",
            "SceGxm_SceGxm_sceGxmSetFrontVisibilityTestEnable.S",
            "SceGxm_SceGxm_sceGxmSetFrontVisibilityTestIndex.S",
            "SceGxm_SceGxm_sceGxmSetFrontVisibilityTestOp.S",
            "SceGxm_SceGxm_sceGxmSetPrecomputedFragmentState.S",
            "SceGxm_SceGxm_sceGxmSetPrecomputedVertexState.S",
            "SceGxm_SceGxm_sceGxmSetRegionClip.S",
            "SceGxm_SceGxm_sceGxmSetTwoSidedEnable.S",
            "SceGxm_SceGxm_sceGxmSetUniformDataF.S",
            "SceGxm_SceGxm_sceGxmSetUserMarker.S",
            "SceGxm_SceGxm_sceGxmSetValidationEnable.S",
            "SceGxm_SceGxm_sceGxmSetVertexDefaultUniformBuffer.S",
            "SceGxm_SceGxm_sceGxmSetVertexProgram.S",
            "SceGxm_SceGxm_sceGxmSetVertexStream.S",
            "SceGxm_SceGxm_sceGxmSetVertexTexture.S",
            "SceGxm_SceGxm_sceGxmSetVertexUniformBuffer.S",
            "SceGxm_SceGxm_sceGxmSetViewport.S",
            "SceGxm_SceGxm_sceGxmSetViewportEnable.S",
            "SceGxm_SceGxm_sceGxmSetVisibilityBuffer.S",
            "SceGxm_SceGxm_sceGxmSetWBufferEnable.S",
            "SceGxm_SceGxm_sceGxmSetWClampEnable.S",
            "SceGxm_SceGxm_sceGxmSetWClampValue.S",
            "SceGxm_SceGxm_sceGxmSetWarningEnabled.S",
            "SceGxm_SceGxm_sceGxmSetYuvProfile.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherAddRefFragmentProgram.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherAddRefVertexProgram.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherCreate.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherCreateFragmentProgram.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherCreateMaskUpdateFragmentProgram.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherCreateVertexProgram.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherDestroy.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherForceUnregisterProgram.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherGetBufferMemAllocated.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherGetFragmentProgramRefCount.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherGetFragmentUsseMemAllocated.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherGetHostMemAllocated.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherGetProgramFromId.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherGetUserData.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherGetVertexProgramRefCount.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherGetVertexUsseMemAllocated.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherRegisterProgram.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherReleaseFragmentProgram.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherReleaseVertexProgram.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherSetAuxiliarySurface.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherSetUserData.S",
            "SceGxm_SceGxm_sceGxmShaderPatcherUnregisterProgram.S",
            "SceGxm_SceGxm_sceGxmSyncObjectCreate.S",
            "SceGxm_SceGxm_sceGxmSyncObjectDestroy.S",
            "SceGxm_SceGxm_sceGxmTerminate.S",
            "SceGxm_SceGxm_sceGxmTextureGetData.S",
            "SceGxm_SceGxm_sceGxmTextureGetFormat.S",
            "SceGxm_SceGxm_sceGxmTextureGetGammaMode.S",
            "SceGxm_SceGxm_sceGxmTextureGetHeight.S",
            "SceGxm_SceGxm_sceGxmTextureGetLodBias.S",
            "SceGxm_SceGxm_sceGxmTextureGetLodMin.S",
            "SceGxm_SceGxm_sceGxmTextureGetMagFilter.S",
            "SceGxm_SceGxm_sceGxmTextureGetMinFilter.S",
            "SceGxm_SceGxm_sceGxmTextureGetMipFilter.S",
            "SceGxm_SceGxm_sceGxmTextureGetMipmapCount.S",
            "SceGxm_SceGxm_sceGxmTextureGetMipmapCountUnsafe.S",
            "SceGxm_SceGxm_sceGxmTextureGetNormalizeMode.S",
            "SceGxm_SceGxm_sceGxmTextureGetPalette.S",
            "SceGxm_SceGxm_sceGxmTextureGetStride.S",
            "SceGxm_SceGxm_sceGxmTextureGetType.S",
            "SceGxm_SceGxm_sceGxmTextureGetUAddrMode.S",
            "SceGxm_SceGxm_sceGxmTextureGetUAddrModeSafe.S",
            "SceGxm_SceGxm_sceGxmTextureGetVAddrMode.S",
            "SceGxm_SceGxm_sceGxmTextureGetVAddrModeSafe.S",
            "SceGxm_SceGxm_sceGxmTextureGetWidth.S",
            "SceGxm_SceGxm_sceGxmTextureInitCube.S",
            "SceGxm_SceGxm_sceGxmTextureInitCubeArbitrary.S",
            "SceGxm_SceGxm_sceGxmTextureInitLinear.S",
            "SceGxm_SceGxm_sceGxmTextureInitLinearStrided.S",
            "SceGxm_SceGxm_sceGxmTextureInitSwizzled.S",
            "SceGxm_SceGxm_sceGxmTextureInitSwizzledArbitrary.S",
            "SceGxm_SceGxm_sceGxmTextureInitTiled.S",
            "SceGxm_SceGxm_sceGxmTextureSetData.S",
            "SceGxm_SceGxm_sceGxmTextureSetFormat.S",
            "SceGxm_SceGxm_sceGxmTextureSetGammaMode.S",
            "SceGxm_SceGxm_sceGxmTextureSetHeight.S",
            "SceGxm_SceGxm_sceGxmTextureSetLodBias.S",
            "SceGxm_SceGxm_sceGxmTextureSetLodMin.S",
            "SceGxm_SceGxm_sceGxmTextureSetMagFilter.S",
            "SceGxm_SceGxm_sceGxmTextureSetMinFilter.S",
            "SceGxm_SceGxm_sceGxmTextureSetMipFilter.S",
            "SceGxm_SceGxm_sceGxmTextureSetMipmapCount.S",
            "SceGxm_SceGxm_sceGxmTextureSetNormalizeMode.S",
            "SceGxm_SceGxm_sceGxmTextureSetPalette.S",
            "SceGxm_SceGxm_sceGxmTextureSetStride.S",
            "SceGxm_SceGxm_sceGxmTextureSetUAddrMode.S",
            "SceGxm_SceGxm_sceGxmTextureSetUAddrModeSafe.S",
            "SceGxm_SceGxm_sceGxmTextureSetVAddrMode.S",
            "SceGxm_SceGxm_sceGxmTextureSetVAddrModeSafe.S",
            "SceGxm_SceGxm_sceGxmTextureSetWidth.S",
            "SceGxm_SceGxm_sceGxmTextureValidate.S",
            "SceGxm_SceGxm_sceGxmTransferCopy.S",
            "SceGxm_SceGxm_sceGxmTransferDownscale.S",
            "SceGxm_SceGxm_sceGxmTransferFill.S",
            "SceGxm_SceGxm_sceGxmTransferFinish.S",
            "SceGxm_SceGxm_sceGxmUnmapFragmentUsseMemory.S",
            "SceGxm_SceGxm_sceGxmUnmapMemory.S",
            "SceGxm_SceGxm_sceGxmUnmapVertexUsseMemory.S",
            "SceGxm_SceGxm_sceGxmVertexFence.S",
            "SceGxm_SceGxm_sceGxmVertexProgramGetProgram.S",
            "SceGxm_SceGxm_sceGxmWaitEvent.S",
            "SceGxm_SceGxmInternal_sceGxmCheckMemoryInternal.S",
            "SceGxm_SceGxmInternal_sceGxmCreateRenderTargetInternal.S",
            "SceGxm_SceGxmInternal_sceGxmGetDisplayQueueThreadIdInternal.S",
            "SceGxm_SceGxmInternal_sceGxmGetRenderTargetMemSizeInternal.S",
            "SceGxm_SceGxmInternal_sceGxmGetTopContextInternal.S",
            "SceGxm_SceGxmInternal_sceGxmInitializedInternal.S",
            "SceGxm_SceGxmInternal_sceGxmIsInitializationInternal.S",
            "SceGxm_SceGxmInternal_sceGxmMapFragmentUsseMemoryInternal.S",
            "SceGxm_SceGxmInternal_sceGxmMapVertexUsseMemoryInternal.S",
            "SceGxm_SceGxmInternal_sceGxmRenderingContextIsWithinSceneInternal.S",
            "SceGxm_SceGxmInternal_sceGxmSetCallbackInternal.S",
            "SceGxm_SceGxmInternal_sceGxmSetInitializeParamInternal.S",
            "SceGxm_SceGxmInternal_sceGxmUnmapFragmentUsseMemoryInternal.S",
            "SceGxm_SceGxmInternal_sceGxmUnmapVertexUsseMemoryInternal.S",
            "SceGxm_SceGxmInternalForGles_sceGxmShaderPatcherCreateFragmentProgramForGles.S",
            "SceGxm_SceGxmInternalForReplay_sceGxmGetReplayRenderTargetMemSize.S",
            "SceGxm_SceGxmInternalForVsh_sceGxmVshInitialize.S",
            "SceGxm_SceGxmInternalForVsh_sceGxmVshSyncObjectClose.S",
            "SceGxm_SceGxmInternalForVsh_sceGxmVshSyncObjectCreate.S",
            "SceGxm_SceGxmInternalForVsh_sceGxmVshSyncObjectDestroy.S",
            "SceGxm_SceGxmInternalForVsh_sceGxmVshSyncObjectOpen.S",
        },
    });
}
pub fn buildSceLibKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLibKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLibKernel_SceLibKernel___sce_aeabi_idiv0.S",
            "SceLibKernel_SceLibKernel___sce_aeabi_ldiv0.S",
            "SceLibKernel_SceLibKernel___stack_chk_fail.S",
            "SceLibKernel_SceLibKernel__sceKernelCreateLwMutex.S",
            "SceLibKernel_SceLibKernel_sceClibAbort.S",
            "SceLibKernel_SceLibKernel_sceClibDprintf.S",
            "SceLibKernel_SceLibKernel_sceClibLookCtypeTable.S",
            "SceLibKernel_SceLibKernel_sceClibMemchr.S",
            "SceLibKernel_SceLibKernel_sceClibMemcmp.S",
            "SceLibKernel_SceLibKernel_sceClibMemcmpConstTime.S",
            "SceLibKernel_SceLibKernel_sceClibMemcpy.S",
            "SceLibKernel_SceLibKernel_sceClibMemcpyChk.S",
            "SceLibKernel_SceLibKernel_sceClibMemcpy_safe.S",
            "SceLibKernel_SceLibKernel_sceClibMemmove.S",
            "SceLibKernel_SceLibKernel_sceClibMemmoveChk.S",
            "SceLibKernel_SceLibKernel_sceClibMemset.S",
            "SceLibKernel_SceLibKernel_sceClibMemsetChk.S",
            "SceLibKernel_SceLibKernel_sceClibMspaceCalloc.S",
            "SceLibKernel_SceLibKernel_sceClibMspaceCreate.S",
            "SceLibKernel_SceLibKernel_sceClibMspaceDestroy.S",
            "SceLibKernel_SceLibKernel_sceClibMspaceFree.S",
            "SceLibKernel_SceLibKernel_sceClibMspaceIsHeapEmpty.S",
            "SceLibKernel_SceLibKernel_sceClibMspaceMalloc.S",
            "SceLibKernel_SceLibKernel_sceClibMspaceMallocStats.S",
            "SceLibKernel_SceLibKernel_sceClibMspaceMallocStatsFast.S",
            "SceLibKernel_SceLibKernel_sceClibMspaceMallocUsableSize.S",
            "SceLibKernel_SceLibKernel_sceClibMspaceMemalign.S",
            "SceLibKernel_SceLibKernel_sceClibMspaceRealloc.S",
            "SceLibKernel_SceLibKernel_sceClibMspaceReallocalign.S",
            "SceLibKernel_SceLibKernel_sceClibPrintf.S",
            "SceLibKernel_SceLibKernel_sceClibSnprintf.S",
            "SceLibKernel_SceLibKernel_sceClibSnprintfChk.S",
            "SceLibKernel_SceLibKernel_sceClibStrcatChk.S",
            "SceLibKernel_SceLibKernel_sceClibStrchr.S",
            "SceLibKernel_SceLibKernel_sceClibStrcmp.S",
            "SceLibKernel_SceLibKernel_sceClibStrcpyChk.S",
            "SceLibKernel_SceLibKernel_sceClibStrlcat.S",
            "SceLibKernel_SceLibKernel_sceClibStrlcatChk.S",
            "SceLibKernel_SceLibKernel_sceClibStrlcpy.S",
            "SceLibKernel_SceLibKernel_sceClibStrlcpyChk.S",
            "SceLibKernel_SceLibKernel_sceClibStrncasecmp.S",
            "SceLibKernel_SceLibKernel_sceClibStrncat.S",
            "SceLibKernel_SceLibKernel_sceClibStrncatChk.S",
            "SceLibKernel_SceLibKernel_sceClibStrncmp.S",
            "SceLibKernel_SceLibKernel_sceClibStrncpy.S",
            "SceLibKernel_SceLibKernel_sceClibStrncpyChk.S",
            "SceLibKernel_SceLibKernel_sceClibStrnlen.S",
            "SceLibKernel_SceLibKernel_sceClibStrrchr.S",
            "SceLibKernel_SceLibKernel_sceClibStrstr.S",
            "SceLibKernel_SceLibKernel_sceClibStrtoll.S",
            "SceLibKernel_SceLibKernel_sceClibTolower.S",
            "SceLibKernel_SceLibKernel_sceClibToupper.S",
            "SceLibKernel_SceLibKernel_sceClibVdprintf.S",
            "SceLibKernel_SceLibKernel_sceClibVprintf.S",
            "SceLibKernel_SceLibKernel_sceClibVsnprintf.S",
            "SceLibKernel_SceLibKernel_sceClibVsnprintfChk.S",
            "SceLibKernel_SceLibKernel_sceIoChstat.S",
            "SceLibKernel_SceLibKernel_sceIoChstatAsync.S",
            "SceLibKernel_SceLibKernel_sceIoChstatByFd.S",
            "SceLibKernel_SceLibKernel_sceIoClose2.S",
            "SceLibKernel_SceLibKernel_sceIoCompleteMultiple.S",
            "SceLibKernel_SceLibKernel_sceIoDevctl.S",
            "SceLibKernel_SceLibKernel_sceIoDevctlAsync.S",
            "SceLibKernel_SceLibKernel_sceIoDopen.S",
            "SceLibKernel_SceLibKernel_sceIoDread.S",
            "SceLibKernel_SceLibKernel_sceIoGetstat.S",
            "SceLibKernel_SceLibKernel_sceIoGetstatAsync.S",
            "SceLibKernel_SceLibKernel_sceIoGetstatByFd.S",
            "SceLibKernel_SceLibKernel_sceIoIoctl.S",
            "SceLibKernel_SceLibKernel_sceIoIoctlAsync.S",
            "SceLibKernel_SceLibKernel_sceIoLseek.S",
            "SceLibKernel_SceLibKernel_sceIoLseekAsync.S",
            "SceLibKernel_SceLibKernel_sceIoMkdir.S",
            "SceLibKernel_SceLibKernel_sceIoMkdirAsync.S",
            "SceLibKernel_SceLibKernel_sceIoOpen.S",
            "SceLibKernel_SceLibKernel_sceIoOpenAsync.S",
            "SceLibKernel_SceLibKernel_sceIoPread.S",
            "SceLibKernel_SceLibKernel_sceIoPreadAsync.S",
            "SceLibKernel_SceLibKernel_sceIoPwrite.S",
            "SceLibKernel_SceLibKernel_sceIoPwriteAsync.S",
            "SceLibKernel_SceLibKernel_sceIoRead2.S",
            "SceLibKernel_SceLibKernel_sceIoRemove.S",
            "SceLibKernel_SceLibKernel_sceIoRemoveAsync.S",
            "SceLibKernel_SceLibKernel_sceIoRename.S",
            "SceLibKernel_SceLibKernel_sceIoRenameAsync.S",
            "SceLibKernel_SceLibKernel_sceIoRmdir.S",
            "SceLibKernel_SceLibKernel_sceIoRmdirAsync.S",
            "SceLibKernel_SceLibKernel_sceIoSync.S",
            "SceLibKernel_SceLibKernel_sceIoSyncAsync.S",
            "SceLibKernel_SceLibKernel_sceIoWrite2.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicAddAndGet16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicAddAndGet32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicAddAndGet64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicAddAndGet8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicAddUnless16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicAddUnless32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicAddUnless64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicAddUnless8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicAndAndGet16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicAndAndGet32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicAndAndGet64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicAndAndGet8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicClearAndGet16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicClearAndGet32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicClearAndGet64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicClearAndGet8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicClearMask16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicClearMask32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicClearMask64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicClearMask8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicCompareAndSet16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicCompareAndSet32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicCompareAndSet64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicCompareAndSet8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicDecIfPositive16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicDecIfPositive32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicDecIfPositive64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicDecIfPositive8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndAdd16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndAdd32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndAdd64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndAdd8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndAnd16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndAnd32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndAnd64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndAnd8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndClear16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndClear32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndClear64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndClear8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndOr16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndOr32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndOr64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndOr8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndSet16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndSet32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndSet64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndSet8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndSub16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndSub32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndSub64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndSub8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndXor16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndXor32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndXor64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicGetAndXor8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicOrAndGet16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicOrAndGet32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicOrAndGet64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicOrAndGet8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicSet16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicSet32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicSet64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicSet8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicSubAndGet16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicSubAndGet32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicSubAndGet64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicSubAndGet8.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicXorAndGet16.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicXorAndGet32.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicXorAndGet64.S",
            "SceLibKernel_SceLibKernel_sceKernelAtomicXorAndGet8.S",
            "SceLibKernel_SceLibKernel_sceKernelBacktrace.S",
            "SceLibKernel_SceLibKernel_sceKernelBacktraceSelf.S",
            "SceLibKernel_SceLibKernel_sceKernelCallModuleExit.S",
            "SceLibKernel_SceLibKernel_sceKernelCallWithChangeStack.S",
            "SceLibKernel_SceLibKernel_sceKernelCancelEvent.S",
            "SceLibKernel_SceLibKernel_sceKernelCancelEventFlag.S",
            "SceLibKernel_SceLibKernel_sceKernelCancelEventWithSetPattern.S",
            "SceLibKernel_SceLibKernel_sceKernelCancelMsgPipe.S",
            "SceLibKernel_SceLibKernel_sceKernelCancelMutex.S",
            "SceLibKernel_SceLibKernel_sceKernelCancelRWLock.S",
            "SceLibKernel_SceLibKernel_sceKernelCancelSema.S",
            "SceLibKernel_SceLibKernel_sceKernelCancelTimer.S",
            "SceLibKernel_SceLibKernel_sceKernelChangeCurrentThreadAttr.S",
            "SceLibKernel_SceLibKernel_sceKernelCheckThreadStack.S",
            "SceLibKernel_SceLibKernel_sceKernelCloseModule.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateCond.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateEventFlag.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateLwCond.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateLwMutex.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateMsgPipe.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateMsgPipeWithLR.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateMutex.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateRWLock.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateSema.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateSema_16XX.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateSimpleEvent.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateThread.S",
            "SceLibKernel_SceLibKernel_sceKernelCreateTimer.S",
            "SceLibKernel_SceLibKernel_sceKernelDeleteLwCond.S",
            "SceLibKernel_SceLibKernel_sceKernelDeleteLwMutex.S",
            "SceLibKernel_SceLibKernel_sceKernelExitProcess.S",
            "SceLibKernel_SceLibKernel_sceKernelGetCallbackInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetCondInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetCurrentThreadVfpException.S",
            "SceLibKernel_SceLibKernel_sceKernelGetEventFlagInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetEventInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetEventPattern.S",
            "SceLibKernel_SceLibKernel_sceKernelGetLwCondInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetLwCondInfoById.S",
            "SceLibKernel_SceLibKernel_sceKernelGetLwMutexInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetLwMutexInfoById.S",
            "SceLibKernel_SceLibKernel_sceKernelGetModuleInfoByAddr.S",
            "SceLibKernel_SceLibKernel_sceKernelGetMsgPipeInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetMutexInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetOpenPsId.S",
            "SceLibKernel_SceLibKernel_sceKernelGetPMUSERENR.S",
            "SceLibKernel_SceLibKernel_sceKernelGetProcessTime.S",
            "SceLibKernel_SceLibKernel_sceKernelGetProcessTimeLow.S",
            "SceLibKernel_SceLibKernel_sceKernelGetProcessTimeWide.S",
            "SceLibKernel_SceLibKernel_sceKernelGetRWLockInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetSemaInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetSystemInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetSystemTime.S",
            "SceLibKernel_SceLibKernel_sceKernelGetTLSAddr.S",
            "SceLibKernel_SceLibKernel_sceKernelGetThreadContextForVM.S",
            "SceLibKernel_SceLibKernel_sceKernelGetThreadCpuAffinityMask2.S",
            "SceLibKernel_SceLibKernel_sceKernelGetThreadCurrentPriority.S",
            "SceLibKernel_SceLibKernel_sceKernelGetThreadEventInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetThreadExitStatus.S",
            "SceLibKernel_SceLibKernel_sceKernelGetThreadId.S",
            "SceLibKernel_SceLibKernel_sceKernelGetThreadInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetThreadRunStatus.S",
            "SceLibKernel_SceLibKernel_sceKernelGetTimerBase.S",
            "SceLibKernel_SceLibKernel_sceKernelGetTimerEventRemainingTime.S",
            "SceLibKernel_SceLibKernel_sceKernelGetTimerInfo.S",
            "SceLibKernel_SceLibKernel_sceKernelGetTimerTime.S",
            "SceLibKernel_SceLibKernel_sceKernelLoadModule.S",
            "SceLibKernel_SceLibKernel_sceKernelLoadStartModule.S",
            "SceLibKernel_SceLibKernel_sceKernelLockLwMutex.S",
            "SceLibKernel_SceLibKernel_sceKernelLockLwMutexCB.S",
            "SceLibKernel_SceLibKernel_sceKernelLockMutex.S",
            "SceLibKernel_SceLibKernel_sceKernelLockMutexCB.S",
            "SceLibKernel_SceLibKernel_sceKernelLockReadRWLock.S",
            "SceLibKernel_SceLibKernel_sceKernelLockReadRWLockCB.S",
            "SceLibKernel_SceLibKernel_sceKernelLockWriteRWLock.S",
            "SceLibKernel_SceLibKernel_sceKernelLockWriteRWLockCB.S",
            "SceLibKernel_SceLibKernel_sceKernelOpenModule.S",
            "SceLibKernel_SceLibKernel_sceKernelPMonThreadGetCounter.S",
            "SceLibKernel_SceLibKernel_sceKernelPollEvent.S",
            "SceLibKernel_SceLibKernel_sceKernelPollEventFlag.S",
            "SceLibKernel_SceLibKernel_sceKernelPrintBacktrace.S",
            "SceLibKernel_SceLibKernel_sceKernelPulseEventWithNotifyCallback.S",
            "SceLibKernel_SceLibKernel_sceKernelReceiveMsgPipe.S",
            "SceLibKernel_SceLibKernel_sceKernelReceiveMsgPipeCB.S",
            "SceLibKernel_SceLibKernel_sceKernelReceiveMsgPipeVector.S",
            "SceLibKernel_SceLibKernel_sceKernelReceiveMsgPipeVectorCB.S",
            "SceLibKernel_SceLibKernel_sceKernelRegisterThreadEventHandler.S",
            "SceLibKernel_SceLibKernel_sceKernelSendMsgPipe.S",
            "SceLibKernel_SceLibKernel_sceKernelSendMsgPipeCB.S",
            "SceLibKernel_SceLibKernel_sceKernelSendMsgPipeVector.S",
            "SceLibKernel_SceLibKernel_sceKernelSendMsgPipeVectorCB.S",
            "SceLibKernel_SceLibKernel_sceKernelSetEventWithNotifyCallback.S",
            "SceLibKernel_SceLibKernel_sceKernelSetThreadContextForVM.S",
            "SceLibKernel_SceLibKernel_sceKernelSetTimerEvent.S",
            "SceLibKernel_SceLibKernel_sceKernelSetTimerTime.S",
            "SceLibKernel_SceLibKernel_sceKernelSignalLwCond.S",
            "SceLibKernel_SceLibKernel_sceKernelSignalLwCondAll.S",
            "SceLibKernel_SceLibKernel_sceKernelSignalLwCondTo.S",
            "SceLibKernel_SceLibKernel_sceKernelStackChkFail.S",
            "SceLibKernel_SceLibKernel_sceKernelStartModule.S",
            "SceLibKernel_SceLibKernel_sceKernelStartThread.S",
            "SceLibKernel_SceLibKernel_sceKernelStopModule.S",
            "SceLibKernel_SceLibKernel_sceKernelStopUnloadModule.S",
            "SceLibKernel_SceLibKernel_sceKernelTryLockLwMutex.S",
            "SceLibKernel_SceLibKernel_sceKernelTryReceiveMsgPipe.S",
            "SceLibKernel_SceLibKernel_sceKernelTryReceiveMsgPipeVector.S",
            "SceLibKernel_SceLibKernel_sceKernelTrySendMsgPipe.S",
            "SceLibKernel_SceLibKernel_sceKernelTrySendMsgPipeVector.S",
            "SceLibKernel_SceLibKernel_sceKernelUnloadModule.S",
            "SceLibKernel_SceLibKernel_sceKernelUnlockLwMutex.S",
            "SceLibKernel_SceLibKernel_sceKernelUnlockLwMutex2.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitCond.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitCondCB.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitEvent.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitEventCB.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitEventFlag.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitEventFlagCB.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitException.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitExceptionCB.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitLwCond.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitLwCondCB.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitMultipleEvents.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitMultipleEventsCB.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitSema.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitSemaCB.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitSignal.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitSignalCB.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitThreadEnd.S",
            "SceLibKernel_SceLibKernel_sceKernelWaitThreadEndCB.S",
            "SceLibKernel_SceLibKernel_sceSblACMgrIsGameProgram.S",
            "SceLibKernel_SceLibKernel_sceSblGcAuthMgrAdhocBB160Shutdown.S",
            "SceLibKernel_SceLibKernel_sceSblGcAuthMgrAdhocBB224Shutdown.S",
            "SceLibKernel_SceLibKernel_sceSblGcAuthMgrMsSaveBBCipherFinal.S",
            "SceLibKernel_SceLibKernel_sceSblGcAuthMgrMsSaveBBMacUpdate.S",
            "SceLibKernel_SceLibKernel_sceSblGcAuthMgrPcactActivation.S",
            "SceLibKernel_SceLibKernel_SceKernelStackChkGuard.S",
            "SceLibKernel_SceLibKernel___stack_chk_guard.S",
            "SceLibKernel_SceLibRng_sceKernelGetRandomNumber.S",
            "SceLibKernel_SceLibSsp_sceLibSspStackChkFail.S",
            "SceLibKernel_SceLibSsp_sceLibSspStackChkGuard.S",
        },
    });
}
pub fn buildSceRtabi(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceRtabi",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceRtabi_SceRtabi___aeabi_d2lz.S",
            "SceRtabi_SceRtabi___aeabi_d2ulz.S",
            "SceRtabi_SceRtabi___aeabi_f2lz.S",
            "SceRtabi_SceRtabi___aeabi_f2ulz.S",
            "SceRtabi_SceRtabi___aeabi_idiv.S",
            "SceRtabi_SceRtabi___aeabi_idivmod.S",
            "SceRtabi_SceRtabi___aeabi_lasr.S",
            "SceRtabi_SceRtabi___aeabi_lcmp.S",
            "SceRtabi_SceRtabi___aeabi_ldivmod.S",
            "SceRtabi_SceRtabi___aeabi_llsl.S",
            "SceRtabi_SceRtabi___aeabi_llsr.S",
            "SceRtabi_SceRtabi___aeabi_lmul.S",
            "SceRtabi_SceRtabi___aeabi_uidiv.S",
            "SceRtabi_SceRtabi___aeabi_uidivmod.S",
            "SceRtabi_SceRtabi___aeabi_ulcmp.S",
            "SceRtabi_SceRtabi___aeabi_uldivmod.S",
        },
    });
}
pub fn buildSceRtc(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceRtc",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceRtc_SceRtc__sceRtcConvertLocalTimeToUtc.S",
            "SceRtc_SceRtc__sceRtcConvertUtcToLocalTime.S",
            "SceRtc_SceRtc__sceRtcFormatRFC2822.S",
            "SceRtc_SceRtc__sceRtcFormatRFC2822LocalTime.S",
            "SceRtc_SceRtc__sceRtcFormatRFC3339.S",
            "SceRtc_SceRtc__sceRtcFormatRFC3339LocalTime.S",
            "SceRtc_SceRtc__sceRtcGetCurrentAdNetworkTick.S",
            "SceRtc_SceRtc__sceRtcGetCurrentClock.S",
            "SceRtc_SceRtc__sceRtcGetCurrentClockLocalTime.S",
            "SceRtc_SceRtc__sceRtcGetCurrentDebugNetworkTick.S",
            "SceRtc_SceRtc__sceRtcGetCurrentGpsTick.S",
            "SceRtc_SceRtc__sceRtcGetCurrentNetworkTick.S",
            "SceRtc_SceRtc__sceRtcGetCurrentRetainedNetworkTick.S",
            "SceRtc_SceRtc__sceRtcGetCurrentTick.S",
            "SceRtc_SceRtc__sceRtcGetLastAdjustedTick.S",
            "SceRtc_SceRtc__sceRtcGetLastReincarnatedTick.S",
            "SceRtc_SceRtc_sceRtcGetAccumulativeTime.S",
            "SceRtc_SceRtcUser_sceRtcCheckValid.S",
            "SceRtc_SceRtcUser_sceRtcCompareTick.S",
            "SceRtc_SceRtcUser_sceRtcConvertLocalTimeToUtc.S",
            "SceRtc_SceRtcUser_sceRtcConvertUtcToLocalTime.S",
            "SceRtc_SceRtcUser_sceRtcFormatRFC2822.S",
            "SceRtc_SceRtcUser_sceRtcFormatRFC2822LocalTime.S",
            "SceRtc_SceRtcUser_sceRtcFormatRFC3339.S",
            "SceRtc_SceRtcUser_sceRtcFormatRFC3339LocalTime.S",
            "SceRtc_SceRtcUser_sceRtcGetCurrentAdNetworkTick.S",
            "SceRtc_SceRtcUser_sceRtcGetCurrentClock.S",
            "SceRtc_SceRtcUser_sceRtcGetCurrentClockLocalTime.S",
            "SceRtc_SceRtcUser_sceRtcGetCurrentDebugNetworkTick.S",
            "SceRtc_SceRtcUser_sceRtcGetCurrentGpsTick.S",
            "SceRtc_SceRtcUser_sceRtcGetCurrentNetworkTick.S",
            "SceRtc_SceRtcUser_sceRtcGetCurrentRetainedNetworkTick.S",
            "SceRtc_SceRtcUser_sceRtcGetCurrentTick.S",
            "SceRtc_SceRtcUser_sceRtcGetDayOfWeek.S",
            "SceRtc_SceRtcUser_sceRtcGetDayOfYear.S",
            "SceRtc_SceRtcUser_sceRtcGetDaysInMonth.S",
            "SceRtc_SceRtcUser_sceRtcGetDosTime.S",
            "SceRtc_SceRtcUser_sceRtcGetLastAdjustedTick.S",
            "SceRtc_SceRtcUser_sceRtcGetLastReincarnatedTick.S",
            "SceRtc_SceRtcUser_sceRtcGetTick.S",
            "SceRtc_SceRtcUser_sceRtcGetTickResolution.S",
            "SceRtc_SceRtcUser_sceRtcGetTime64_t.S",
            "SceRtc_SceRtcUser_sceRtcGetTime_t.S",
            "SceRtc_SceRtcUser_sceRtcGetWin32FileTime.S",
            "SceRtc_SceRtcUser_sceRtcIsLeapYear.S",
            "SceRtc_SceRtcUser_sceRtcParseDateTime.S",
            "SceRtc_SceRtcUser_sceRtcParseRFC3339.S",
            "SceRtc_SceRtcUser_sceRtcSetDosTime.S",
            "SceRtc_SceRtcUser_sceRtcSetTick.S",
            "SceRtc_SceRtcUser_sceRtcSetTime64_t.S",
            "SceRtc_SceRtcUser_sceRtcSetTime_t.S",
            "SceRtc_SceRtcUser_sceRtcSetWin32FileTime.S",
            "SceRtc_SceRtcUser_sceRtcTickAddDays.S",
            "SceRtc_SceRtcUser_sceRtcTickAddHours.S",
            "SceRtc_SceRtcUser_sceRtcTickAddMicroseconds.S",
            "SceRtc_SceRtcUser_sceRtcTickAddMinutes.S",
            "SceRtc_SceRtcUser_sceRtcTickAddMonths.S",
            "SceRtc_SceRtcUser_sceRtcTickAddSeconds.S",
            "SceRtc_SceRtcUser_sceRtcTickAddTicks.S",
            "SceRtc_SceRtcUser_sceRtcTickAddWeeks.S",
            "SceRtc_SceRtcUser_sceRtcTickAddYears.S",
        },
    });
}
pub fn buildSceRtcForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceRtcForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceRtcForDriver_SceRtcForDriver_ksceRtcConvertDateTimeToUnixTime.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcConvertLocalTimeToUtc.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcConvertTickToDateTime.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcConvertUtcToLocal.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcFormatRFC2822.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcFormatRFC2822LocalTime.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcFormatRFC3339.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcFormatRFC3339LocalTime.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetAccumulativeTime.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetAlarmTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetCurrentAdNetworkTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetCurrentClock.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetCurrentClockLocalTime.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetCurrentDebugNetworkTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetCurrentGpsTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetCurrentNetworkTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetCurrentRetainedNetworkTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetCurrentSecureTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetCurrentTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetLastAdjustedTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetLastReincarnatedTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcGetSecureAlarmTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcIsAlarmed.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcIsSecureAlarmed.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcRegisterCallback.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcRegisterSecureAlarmCallback.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcSetAlarmTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcSetConf.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcSetCurrentDebugNetworkTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcSetCurrentNetworkTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcSetCurrentSecureTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcSetCurrentTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcSetSecureAlarmTick.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcUnregisterCallback.S",
            "SceRtcForDriver_SceRtcForDriver_ksceRtcUnregisterSecureAlarmCallback.S",
        },
    });
}
pub fn buildSceCommonDialog(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCommonDialog",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCommonDialog_SceCommonDialog_sceCameraImportDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceCameraImportDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceCameraImportDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceCameraImportDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceCameraImportDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceCommonDialogGetWorkerThreadId.S",
            "SceCommonDialog_SceCommonDialog_sceCommonDialogIsRunning.S",
            "SceCommonDialog_SceCommonDialog_sceCommonDialogSetConfigParam.S",
            "SceCommonDialog_SceCommonDialog_sceCommonDialogUpdate.S",
            "SceCommonDialog_SceCommonDialog_sceCompanionUtilDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceCompanionUtilDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceCompanionUtilDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceCompanionUtilDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceCompanionUtilDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceCrossControllerDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceCrossControllerDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceCrossControllerDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceCrossControllerDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceCrossControllerDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceImeDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceImeDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceImeDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceImeDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceImeDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceMsgDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceMsgDialogClose.S",
            "SceCommonDialog_SceCommonDialog_sceMsgDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceMsgDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceMsgDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceMsgDialogProgressBarInc.S",
            "SceCommonDialog_SceCommonDialog_sceMsgDialogProgressBarSetMsg.S",
            "SceCommonDialog_SceCommonDialog_sceMsgDialogProgressBarSetValue.S",
            "SceCommonDialog_SceCommonDialog_sceMsgDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceNetCheckDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceNetCheckDialogGetPS3ConnectInfo.S",
            "SceCommonDialog_SceCommonDialog_sceNetCheckDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceNetCheckDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceNetCheckDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceNetCheckDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceNpFriendList2DialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceNpFriendList2DialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceNpFriendList2DialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceNpFriendList2DialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceNpFriendList2DialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceNpFriendListDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceNpFriendListDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceNpFriendListDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceNpFriendListDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceNpFriendListDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceNpMessageDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceNpMessageDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceNpMessageDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceNpMessageDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceNpMessageDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceNpProfileDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceNpProfileDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceNpProfileDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceNpProfileDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceNpProfileDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceNpSnsFacebookDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceNpSnsFacebookDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceNpSnsFacebookDialogGetResultLongToken.S",
            "SceCommonDialog_SceCommonDialog_sceNpSnsFacebookDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceNpSnsFacebookDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceNpSnsFacebookDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceNpTrophySetupDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceNpTrophySetupDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceNpTrophySetupDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceNpTrophySetupDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceNpTrophySetupDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_scePhotoImportDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_scePhotoImportDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_scePhotoImportDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_scePhotoImportDialogInit.S",
            "SceCommonDialog_SceCommonDialog_scePhotoImportDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_scePhotoReviewDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_scePhotoReviewDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_scePhotoReviewDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_scePhotoReviewDialogInit.S",
            "SceCommonDialog_SceCommonDialog_scePhotoReviewDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_scePspSaveDataDialogContinue.S",
            "SceCommonDialog_SceCommonDialog_scePspSaveDataDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_scePspSaveDataDialogInit.S",
            "SceCommonDialog_SceCommonDialog_scePspSaveDataDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceRemoteOSKDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceRemoteOSKDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceRemoteOSKDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceRemoteOSKDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceRemoteOSKDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceSaveDataDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceSaveDataDialogContinue.S",
            "SceCommonDialog_SceCommonDialog_sceSaveDataDialogFinish.S",
            "SceCommonDialog_SceCommonDialog_sceSaveDataDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceSaveDataDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceSaveDataDialogGetSubStatus.S",
            "SceCommonDialog_SceCommonDialog_sceSaveDataDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceSaveDataDialogProgressBarInc.S",
            "SceCommonDialog_SceCommonDialog_sceSaveDataDialogProgressBarSetValue.S",
            "SceCommonDialog_SceCommonDialog_sceSaveDataDialogSubClose.S",
            "SceCommonDialog_SceCommonDialog_sceSaveDataDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceStoreCheckoutDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceStoreCheckoutDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceStoreCheckoutDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceStoreCheckoutDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceStoreCheckoutDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceTwDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceTwDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceTwDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceTwDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceTwDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceTwLoginDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceTwLoginDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceTwLoginDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceTwLoginDialogTerm.S",
            "SceCommonDialog_SceCommonDialog_sceVideoImportDialogAbort.S",
            "SceCommonDialog_SceCommonDialog_sceVideoImportDialogGetResult.S",
            "SceCommonDialog_SceCommonDialog_sceVideoImportDialogGetStatus.S",
            "SceCommonDialog_SceCommonDialog_sceVideoImportDialogInit.S",
            "SceCommonDialog_SceCommonDialog_sceVideoImportDialogTerm.S",
            "SceCommonDialog_SceNpWebApiCommonDialog_sceGameCustomDataDialogAbort.S",
            "SceCommonDialog_SceNpWebApiCommonDialog_sceGameCustomDataDialogGetResult.S",
            "SceCommonDialog_SceNpWebApiCommonDialog_sceGameCustomDataDialogGetStatus.S",
            "SceCommonDialog_SceNpWebApiCommonDialog_sceGameCustomDataDialogInit.S",
            "SceCommonDialog_SceNpWebApiCommonDialog_sceGameCustomDataDialogTerm.S",
            "SceCommonDialog_SceNpWebApiCommonDialog_sceInvitationDialogAbort.S",
            "SceCommonDialog_SceNpWebApiCommonDialog_sceInvitationDialogGetResult.S",
            "SceCommonDialog_SceNpWebApiCommonDialog_sceInvitationDialogGetStatus.S",
            "SceCommonDialog_SceNpWebApiCommonDialog_sceInvitationDialogInit.S",
            "SceCommonDialog_SceNpWebApiCommonDialog_sceInvitationDialogTerm.S",
        },
    });
}
pub fn buildSceNet(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNet",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNet_SceNet_sceNetAccept.S",
            "SceNet_SceNet_sceNetBind.S",
            "SceNet_SceNet_sceNetClearDnsCache.S",
            "SceNet_SceNet_sceNetConnect.S",
            "SceNet_SceNet_sceNetDumpAbort.S",
            "SceNet_SceNet_sceNetDumpCreate.S",
            "SceNet_SceNet_sceNetDumpDestroy.S",
            "SceNet_SceNet_sceNetDumpRead.S",
            "SceNet_SceNet_sceNetEmulationGet.S",
            "SceNet_SceNet_sceNetEmulationSet.S",
            "SceNet_SceNet_sceNetEpollAbort.S",
            "SceNet_SceNet_sceNetEpollControl.S",
            "SceNet_SceNet_sceNetEpollCreate.S",
            "SceNet_SceNet_sceNetEpollDestroy.S",
            "SceNet_SceNet_sceNetEpollWait.S",
            "SceNet_SceNet_sceNetEpollWaitCB.S",
            "SceNet_SceNet_sceNetErrnoLoc.S",
            "SceNet_SceNet_sceNetEtherNtostr.S",
            "SceNet_SceNet_sceNetEtherStrton.S",
            "SceNet_SceNet_sceNetGetMacAddress.S",
            "SceNet_SceNet_sceNetGetSockIdInfo.S",
            "SceNet_SceNet_sceNetGetSockInfo.S",
            "SceNet_SceNet_sceNetGetStatisticsInfo.S",
            "SceNet_SceNet_sceNetGetpeername.S",
            "SceNet_SceNet_sceNetGetsockname.S",
            "SceNet_SceNet_sceNetGetsockopt.S",
            "SceNet_SceNet_sceNetHtonl.S",
            "SceNet_SceNet_sceNetHtonll.S",
            "SceNet_SceNet_sceNetHtons.S",
            "SceNet_SceNet_sceNetInetNtop.S",
            "SceNet_SceNet_sceNetInetPton.S",
            "SceNet_SceNet_sceNetInit.S",
            "SceNet_SceNet_sceNetListen.S",
            "SceNet_SceNet_sceNetNtohl.S",
            "SceNet_SceNet_sceNetNtohll.S",
            "SceNet_SceNet_sceNetNtohs.S",
            "SceNet_SceNet_sceNetRecv.S",
            "SceNet_SceNet_sceNetRecvfrom.S",
            "SceNet_SceNet_sceNetRecvmsg.S",
            "SceNet_SceNet_sceNetResolverAbort.S",
            "SceNet_SceNet_sceNetResolverCreate.S",
            "SceNet_SceNet_sceNetResolverDestroy.S",
            "SceNet_SceNet_sceNetResolverGetError.S",
            "SceNet_SceNet_sceNetResolverStartAton.S",
            "SceNet_SceNet_sceNetResolverStartNtoa.S",
            "SceNet_SceNet_sceNetSend.S",
            "SceNet_SceNet_sceNetSendmsg.S",
            "SceNet_SceNet_sceNetSendto.S",
            "SceNet_SceNet_sceNetSetDnsInfo.S",
            "SceNet_SceNet_sceNetSetsockopt.S",
            "SceNet_SceNet_sceNetShowIfconfig.S",
            "SceNet_SceNet_sceNetShowNetstat.S",
            "SceNet_SceNet_sceNetShowRoute.S",
            "SceNet_SceNet_sceNetShutdown.S",
            "SceNet_SceNet_sceNetSocket.S",
            "SceNet_SceNet_sceNetSocketAbort.S",
            "SceNet_SceNet_sceNetSocketClose.S",
            "SceNet_SceNet_sceNetTerm.S",
        },
    });
}
pub fn buildSceSblGcAuthMgrDrmBBForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblGcAuthMgrDrmBBForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblGcAuthMgrDrmBBForDriver_SceSblGcAuthMgrDrmBBForDriver_ksceSblGcAuthMgrDrmBBClearCartSecret.S",
            "SceSblGcAuthMgrDrmBBForDriver_SceSblGcAuthMgrDrmBBForDriver_ksceSblGcAuthMgrDrmBBGetCartSecret.S",
        },
    });
}
pub fn buildSceSblGcAuthMgrGcAuthForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblGcAuthMgrGcAuthForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblGcAuthMgrGcAuthForDriver_SceSblGcAuthMgrGcAuthForDriver_ksceSblGcAuthMgrGcAuthCartAuthentication.S",
        },
    });
}
pub fn buildSceSblGcAuthMgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblGcAuthMgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB160Auth1.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB160Auth2.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB160Auth3.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB160Auth4.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB160Auth5.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB160BroadCastDecrypt.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB160BroadCastEncrypt.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB160GetKeys.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB160Init.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB160Shutdown.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB160UniCastDecrypt.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB160UniCastEncrypt.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB224Auth1.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB224Auth2.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB224Auth3.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB224Auth4.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB224Auth5.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB224GetKeys.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB224Init.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrAdhocBB224Shutdown.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrGetMediaIdType01.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrMsSaveBBCipherFinal.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrMsSaveBBCipherInit.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrMsSaveBBCipherUpdate.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrMsSaveBBMacFinal.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrMsSaveBBMacInit.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrMsSaveBBMacUpdate.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrPcactActivation.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrPcactGetChallenge.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrPkgVry.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrPsmactCreateC1.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrPsmactVerifyR1.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrSclkGetData1.S",
            "SceSblGcAuthMgr_SceSblGcAuthMgr__sceSblGcAuthMgrSclkSetData2.S",
        },
    });
}
pub fn buildScePerf(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePerf",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePerf_ScePerf__pLibPerfCaptureFlagPtr.S",
            "ScePerf_ScePerf__sceCpuRazorPopFiberUserMarker.S",
            "ScePerf_ScePerf__sceCpuRazorPushFiberUserMarker.S",
            "ScePerf_ScePerf__sceRazorCpuInit.S",
            "ScePerf_ScePerf__sceRazorCpuWriteFiberUltPkt.S",
            "ScePerf_ScePerf_scePerfArmPmonGetCounterValue.S",
            "ScePerf_ScePerf_scePerfArmPmonReset.S",
            "ScePerf_ScePerf_scePerfArmPmonSelectEvent.S",
            "ScePerf_ScePerf_scePerfArmPmonSetCounterValue.S",
            "ScePerf_ScePerf_scePerfArmPmonSoftwareIncrement.S",
            "ScePerf_ScePerf_scePerfArmPmonStart.S",
            "ScePerf_ScePerf_scePerfArmPmonStop.S",
            "ScePerf_ScePerf_scePerfGetTimebaseFrequency.S",
            "ScePerf_ScePerf_scePerfGetTimebaseValue.S",
            "ScePerf_ScePerf_sceRazorCpuGetActivityMonitorTraceBuffer.S",
            "ScePerf_ScePerf_sceRazorCpuGetUserMarkerTraceBuffer.S",
            "ScePerf_ScePerf_sceRazorCpuIsCapturing.S",
            "ScePerf_ScePerf_sceRazorCpuPopMarker.S",
            "ScePerf_ScePerf_sceRazorCpuPushMarker.S",
            "ScePerf_ScePerf_sceRazorCpuPushMarkerWithHud.S",
            "ScePerf_ScePerf_sceRazorCpuStartActivityMonitor.S",
            "ScePerf_ScePerf_sceRazorCpuStartCapture.S",
            "ScePerf_ScePerf_sceRazorCpuStartUserMarkerTrace.S",
            "ScePerf_ScePerf_sceRazorCpuStopActivityMonitor.S",
            "ScePerf_ScePerf_sceRazorCpuStopCapture.S",
            "ScePerf_ScePerf_sceRazorCpuStopUserMarkerTrace.S",
            "ScePerf_ScePerf_sceRazorCpuSync.S",
        },
    });
}
pub fn buildSceNpSignaling(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpSignaling",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpSignaling_SceNpSignaling_sceNpSignalingActivateConnection.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingCancelPeerNetInfo.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingCreateCtx.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingDeactivateConnection.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingDestroyCtx.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingGetConnectionFromNpId.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingGetConnectionFromPeerAddress.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingGetConnectionInfo.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingGetConnectionStatus.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingGetCtxOpt.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingGetLocalNetInfo.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingGetMemoryInfo.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingGetPeerNetInfo.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingGetPeerNetInfoResult.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingInit.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingSetCtxOpt.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingTerm.S",
            "SceNpSignaling_SceNpSignaling_sceNpSignalingTerminateConnection.S",
        },
    });
}
pub fn buildSceSblSmCommForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblSmCommForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblSmCommForKernel_SceSblSmCommForKernel_ksceSblSmCommCallFunc.S",
            "SceSblSmCommForKernel_SceSblSmCommForKernel_ksceSblSmCommStartSmFromData.S",
            "SceSblSmCommForKernel_SceSblSmCommForKernel_ksceSblSmCommStartSmFromFile.S",
            "SceSblSmCommForKernel_SceSblSmCommForKernel_ksceSblSmCommStopSm.S",
        },
    });
}
pub fn buildSceGameUpdate(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceGameUpdate",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceGameUpdate_SceGameUpdate_sceGameUpdateAbort.S",
            "SceGameUpdate_SceGameUpdate_sceGameUpdateInit.S",
            "SceGameUpdate_SceGameUpdate_sceGameUpdateRun.S",
            "SceGameUpdate_SceGameUpdate_sceGameUpdateTerm.S",
        },
    });
}
pub fn buildSceIofilemgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceIofilemgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceIofilemgr_SceIofilemgr__sceIoChstat.S",
            "SceIofilemgr_SceIofilemgr__sceIoChstatAsync.S",
            "SceIofilemgr_SceIofilemgr__sceIoChstatByFd.S",
            "SceIofilemgr_SceIofilemgr__sceIoCompleteMultiple.S",
            "SceIofilemgr_SceIofilemgr__sceIoDevctl.S",
            "SceIofilemgr_SceIofilemgr__sceIoDevctlAsync.S",
            "SceIofilemgr_SceIofilemgr__sceIoDopen.S",
            "SceIofilemgr_SceIofilemgr__sceIoDread.S",
            "SceIofilemgr_SceIofilemgr__sceIoGetstat.S",
            "SceIofilemgr_SceIofilemgr__sceIoGetstatAsync.S",
            "SceIofilemgr_SceIofilemgr__sceIoGetstatByFd.S",
            "SceIofilemgr_SceIofilemgr__sceIoIoctl.S",
            "SceIofilemgr_SceIofilemgr__sceIoIoctlAsync.S",
            "SceIofilemgr_SceIofilemgr__sceIoLseek.S",
            "SceIofilemgr_SceIofilemgr__sceIoLseekAsync.S",
            "SceIofilemgr_SceIofilemgr__sceIoMkdir.S",
            "SceIofilemgr_SceIofilemgr__sceIoMkdirAsync.S",
            "SceIofilemgr_SceIofilemgr__sceIoOpen.S",
            "SceIofilemgr_SceIofilemgr__sceIoOpenAsync.S",
            "SceIofilemgr_SceIofilemgr__sceIoPread.S",
            "SceIofilemgr_SceIofilemgr__sceIoPreadAsync.S",
            "SceIofilemgr_SceIofilemgr__sceIoPwrite.S",
            "SceIofilemgr_SceIofilemgr__sceIoPwriteAsync.S",
            "SceIofilemgr_SceIofilemgr__sceIoRemove.S",
            "SceIofilemgr_SceIofilemgr__sceIoRemoveAsync.S",
            "SceIofilemgr_SceIofilemgr__sceIoRename.S",
            "SceIofilemgr_SceIofilemgr__sceIoRenameAsync.S",
            "SceIofilemgr_SceIofilemgr__sceIoRmdir.S",
            "SceIofilemgr_SceIofilemgr__sceIoRmdirAsync.S",
            "SceIofilemgr_SceIofilemgr__sceIoSync.S",
            "SceIofilemgr_SceIofilemgr__sceIoSyncAsync.S",
            "SceIofilemgr_SceIofilemgr_sceIoCancel.S",
            "SceIofilemgr_SceIofilemgr_sceIoChstatByFdAsync.S",
            "SceIofilemgr_SceIofilemgr_sceIoClose.S",
            "SceIofilemgr_SceIofilemgr_sceIoCloseAsync.S",
            "SceIofilemgr_SceIofilemgr_sceIoComplete.S",
            "SceIofilemgr_SceIofilemgr_sceIoDclose.S",
            "SceIofilemgr_SceIofilemgr_sceIoDcloseAsync.S",
            "SceIofilemgr_SceIofilemgr_sceIoDopenAsync.S",
            "SceIofilemgr_SceIofilemgr_sceIoDreadAsync.S",
            "SceIofilemgr_SceIofilemgr_sceIoFlockForSystem.S",
            "SceIofilemgr_SceIofilemgr_sceIoGetPriority.S",
            "SceIofilemgr_SceIofilemgr_sceIoGetPriorityForSystem.S",
            "SceIofilemgr_SceIofilemgr_sceIoGetProcessDefaultPriority.S",
            "SceIofilemgr_SceIofilemgr_sceIoGetThreadDefaultPriority.S",
            "SceIofilemgr_SceIofilemgr_sceIoGetThreadDefaultPriorityForSystem.S",
            "SceIofilemgr_SceIofilemgr_sceIoGetstatByFdAsync.S",
            "SceIofilemgr_SceIofilemgr_sceIoLseek32.S",
            "SceIofilemgr_SceIofilemgr_sceIoRead.S",
            "SceIofilemgr_SceIofilemgr_sceIoReadAsync.S",
            "SceIofilemgr_SceIofilemgr_sceIoSetPriority.S",
            "SceIofilemgr_SceIofilemgr_sceIoSetPriorityForSystem.S",
            "SceIofilemgr_SceIofilemgr_sceIoSetProcessDefaultPriority.S",
            "SceIofilemgr_SceIofilemgr_sceIoSetThreadDefaultPriority.S",
            "SceIofilemgr_SceIofilemgr_sceIoSetThreadDefaultPriorityForSystem.S",
            "SceIofilemgr_SceIofilemgr_sceIoSyncByFd.S",
            "SceIofilemgr_SceIofilemgr_sceIoSyncByFdAsync.S",
            "SceIofilemgr_SceIofilemgr_sceIoWrite.S",
            "SceIofilemgr_SceIofilemgr_sceIoWriteAsync.S",
        },
    });
}
pub fn buildSceIofilemgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceIofilemgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoCancel.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoChstat.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoChstatAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoChstatByFd.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoChstatByFdAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoChstatForVshbridge.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoClearErrorEvent.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoClose.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoCloseAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoCreateErrorEvent.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoCreateMountEvent.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoDclose.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoDcloseAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoDeleteErrorEvent.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoDeleteMountEvent.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoDevctl.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoDevctlAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoDopen.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoDopenAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoDread.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoDreadAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoDreadForVshbridge.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoFlock.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoGetFileInfo.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoGetGUIDFdListForDebugger.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoGetMediaType.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoGetPUIDFdListForDebugger.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoGetProcessDefaultPriorityForSystem.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoGetRemoteKPLSData.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoGetThreadDefaultPriorityForSystem.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoGetstat.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoGetstatAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoGetstatByFd.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoGetstatByFdAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoGetstatForVshbridge.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoIoctl.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoIoctlAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoLseek.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoLseekAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoMkdir.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoMkdirAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoMount.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoOpen.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoOpenAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoOpenForPid.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoPread.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoPreadAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoPwrite.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoPwriteAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoRead.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoReadAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoRemove.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoRemoveAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoRename.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoRenameAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoRmdir.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoRmdirAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoSetPathMappingFunction.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoSetProcessDefaultPriorityForSystem.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoSetThreadDefaultPriorityForSystem.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoSync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoSyncAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoSyncByFd.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoSyncByFd2.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoSyncByFdAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoUmount.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoWrite.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceIoWriteAsync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVfsAddVfs.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVfsDeleteVfs.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVfsOpDecodePathElem.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVfsOpDevctl.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopChstat.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopCleanup.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopClose.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopCreate.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopDclose.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopDopen.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopDread.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopFchstat.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopFgetstat.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopGetstat.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopInactive.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopIoctl.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopLink.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopLookup.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopLseek.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopMkdir.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopOpen.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopPread.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopPwrite.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopRead.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopRemove.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopRename.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopRmdir.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopSync.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopUnlink.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopWhiteout.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopWrite.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_ksceVopZerofill.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsAllocateFile.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsAllocateFileDummy.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsBuffCacheCtl.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsBuffCacheFree.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsChstat.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsChstatByFd.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsClose.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsFreeFile.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsFreeVnode.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsGetMntInfo.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsGetMntList.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsGetNewVnode.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsGetVnodeName.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsIoctl.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsIsLockedMnt.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsIsOwnerVnode.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsLockMnt.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsLockVnode.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsMount.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsMountForPFS.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsOpen.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsPread.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsPwrite.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsRead.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsRmdev.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsUmount.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsUmountForPFS.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsUnlockMnt.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsUnlockVnode.S",
            "SceIofilemgrForDriver_SceIofilemgrForDriver_vfsWrite.S",
        },
    });
}
pub fn buildSceCtrl(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCtrl",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCtrl_SceCtrl_sceCtrlClearRapidFire.S",
            "SceCtrl_SceCtrl_sceCtrlDisconnect.S",
            "SceCtrl_SceCtrl_sceCtrlGetAnalogStickCheckMode.S",
            "SceCtrl_SceCtrl_sceCtrlGetAnalogStickCheckTarget.S",
            "SceCtrl_SceCtrl_sceCtrlGetBatteryInfo.S",
            "SceCtrl_SceCtrl_sceCtrlGetButtonIntercept.S",
            "SceCtrl_SceCtrl_sceCtrlGetControllerPortInfo.S",
            "SceCtrl_SceCtrl_sceCtrlGetProcessStatus.S",
            "SceCtrl_SceCtrl_sceCtrlGetSamplingMode.S",
            "SceCtrl_SceCtrl_sceCtrlGetSamplingModeExt.S",
            "SceCtrl_SceCtrl_sceCtrlGetWirelessControllerInfo.S",
            "SceCtrl_SceCtrl_sceCtrlIsMultiControllerSupported.S",
            "SceCtrl_SceCtrl_sceCtrlPeekBufferNegative.S",
            "SceCtrl_SceCtrl_sceCtrlPeekBufferNegative2.S",
            "SceCtrl_SceCtrl_sceCtrlPeekBufferPositive.S",
            "SceCtrl_SceCtrl_sceCtrlPeekBufferPositive2.S",
            "SceCtrl_SceCtrl_sceCtrlPeekBufferPositiveExt.S",
            "SceCtrl_SceCtrl_sceCtrlPeekBufferPositiveExt2.S",
            "SceCtrl_SceCtrl_sceCtrlReadBufferNegative.S",
            "SceCtrl_SceCtrl_sceCtrlReadBufferNegative2.S",
            "SceCtrl_SceCtrl_sceCtrlReadBufferPositive.S",
            "SceCtrl_SceCtrl_sceCtrlReadBufferPositive2.S",
            "SceCtrl_SceCtrl_sceCtrlReadBufferPositiveExt.S",
            "SceCtrl_SceCtrl_sceCtrlReadBufferPositiveExt2.S",
            "SceCtrl_SceCtrl_sceCtrlRegisterBdRMCCallback.S",
            "SceCtrl_SceCtrl_sceCtrlResetLightBar.S",
            "SceCtrl_SceCtrl_sceCtrlSetActuator.S",
            "SceCtrl_SceCtrl_sceCtrlSetAnalogStickCheckMode.S",
            "SceCtrl_SceCtrl_sceCtrlSetAnalogStickCheckTarget.S",
            "SceCtrl_SceCtrl_sceCtrlSetButtonIntercept.S",
            "SceCtrl_SceCtrl_sceCtrlSetButtonRemappingInfo.S",
            "SceCtrl_SceCtrl_sceCtrlSetLightBar.S",
            "SceCtrl_SceCtrl_sceCtrlSetRapidFire.S",
            "SceCtrl_SceCtrl_sceCtrlSetSamplingMode.S",
            "SceCtrl_SceCtrl_sceCtrlSetSamplingModeExt.S",
            "SceCtrl_SceCtrl_sceCtrlSingleControllerMode.S",
            "SceCtrl_SceCtrl_sceCtrlUnregisterBdRMCCallback.S",
        },
    });
}
pub fn buildSceCtrlForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCtrlForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlChangePortAssign.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlClearRapidFire.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlGetActiveControllerPort.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlGetButtonIntercept.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlGetControllerPortInfo.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlGetIdleCancelKey.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlGetIdleCancelThreshold.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlGetMaskForAll.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlGetMaskForNonShell.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlGetSamplingMode.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlIsBdRemoconConnected.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlNotifyCallBacks.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlPeekBufferNegative.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlPeekBufferPositive.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlReadBufferNegative.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlReadBufferPositive.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlRegisterNotifyCallBack.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlRegisterVirtualControllerDriver.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlSetAnalogEmulation.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlSetBdRemoconConnected.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlSetButtonEmulation.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlSetButtonIntercept.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlSetCtrlpCallback.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlSetIdleCancelKey.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlSetIdleCancelThreshold.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlSetRapidFire.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlSetSamplingMode.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlSetTurnOffInterval.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlSetVibrationSetting.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlUnregisterNotifyCallBack.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlUpdateMaskForAll.S",
            "SceCtrlForDriver_SceCtrlForDriver_ksceCtrlUpdateMaskForNonShell.S",
        },
    });
}
pub fn buildSceSdifForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSdifForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSdifForDriver_SceSdifForDriver_ksceSdifGetCID.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifGetCardInsertState1.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifGetCardInsertState2.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifGetSdContextGlobal.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifGetSdContextPartValidateMmc.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifGetSdContextPartValidateSd.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifGetSdContextPartValidateSdio.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifInitializeMmcDevice.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifInitializeSdDevice.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifReadCmd56.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifReadSectorMmc.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifReadSectorSd.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifWriteCmd56.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifWriteSectorMmc.S",
            "SceSdifForDriver_SceSdifForDriver_ksceSdifWriteSectorSd.S",
        },
    });
}
pub fn buildSceTouch(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceTouch",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceTouch_SceTouch_sceTouchActivateRegion.S",
            "SceTouch_SceTouch_sceTouchClearRegion.S",
            "SceTouch_SceTouch_sceTouchDisableTouchForce.S",
            "SceTouch_SceTouch_sceTouchDisableTouchForceExt.S",
            "SceTouch_SceTouch_sceTouchEnableIdleTimerCancelSetting.S",
            "SceTouch_SceTouch_sceTouchEnableTouchForce.S",
            "SceTouch_SceTouch_sceTouchEnableTouchForceExt.S",
            "SceTouch_SceTouch_sceTouchGetDeviceInfo.S",
            "SceTouch_SceTouch_sceTouchGetPanelInfo.S",
            "SceTouch_SceTouch_sceTouchGetPixelDensity.S",
            "SceTouch_SceTouch_sceTouchGetPixelDensity2.S",
            "SceTouch_SceTouch_sceTouchGetProcessInfo.S",
            "SceTouch_SceTouch_sceTouchGetSamplingState.S",
            "SceTouch_SceTouch_sceTouchGetSamplingStateExt.S",
            "SceTouch_SceTouch_sceTouchPeek.S",
            "SceTouch_SceTouch_sceTouchPeek2.S",
            "SceTouch_SceTouch_sceTouchPeekRegion.S",
            "SceTouch_SceTouch_sceTouchPeekRegionExt.S",
            "SceTouch_SceTouch_sceTouchRead.S",
            "SceTouch_SceTouch_sceTouchRead2.S",
            "SceTouch_SceTouch_sceTouchReadRegion.S",
            "SceTouch_SceTouch_sceTouchReadRegionExt.S",
            "SceTouch_SceTouch_sceTouchSetProcessPrivilege.S",
            "SceTouch_SceTouch_sceTouchSetRegion.S",
            "SceTouch_SceTouch_sceTouchSetRegionAttr.S",
            "SceTouch_SceTouch_sceTouchSetSamplingState.S",
            "SceTouch_SceTouch_sceTouchSetSamplingStateExt.S",
        },
    });
}
pub fn buildSceTouchForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceTouchForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceTouchForDriver_SceTouchForDriver_ksceTouchActivateRegion.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchDisableTouchForce.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchEnableIdleTimerCancelSetting.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchEnableTouchForce.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchGetDeviceInfo.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchGetPanelInfo.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchGetProcessInfo.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchGetSamplingState.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchPeek.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchPeekRegion.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchRead.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchReadRegion.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchRegisterVirtualTouchDriver.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchSetCtrlpCallback.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchSetEnableFlag.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchSetRegion.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchSetRegionAttr.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchSetSamplingState.S",
            "SceTouchForDriver_SceTouchForDriver_ksceTouchSetTouchEmulationData.S",
        },
    });
}
pub fn buildSceNgsUser(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNgsUser",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNgsUser_SceNgs_sceNgsAT9GetSectionDetails.S",
            "SceNgsUser_SceNgs_sceNgsModuleGetNumPresets.S",
            "SceNgsUser_SceNgs_sceNgsModuleGetPreset.S",
            "SceNgsUser_SceNgs_sceNgsPatchCreateRouting.S",
            "SceNgsUser_SceNgs_sceNgsPatchGetInfo.S",
            "SceNgsUser_SceNgs_sceNgsPatchRemoveRouting.S",
            "SceNgsUser_SceNgs_sceNgsRackGetRequiredMemorySize.S",
            "SceNgsUser_SceNgs_sceNgsRackGetVoiceHandle.S",
            "SceNgsUser_SceNgs_sceNgsRackInit.S",
            "SceNgsUser_SceNgs_sceNgsRackRelease.S",
            "SceNgsUser_SceNgs_sceNgsRackSetParamErrorCallback.S",
            "SceNgsUser_SceNgs_sceNgsSystemGetRequiredMemorySize.S",
            "SceNgsUser_SceNgs_sceNgsSystemInit.S",
            "SceNgsUser_SceNgs_sceNgsSystemLock.S",
            "SceNgsUser_SceNgs_sceNgsSystemRelease.S",
            "SceNgsUser_SceNgs_sceNgsSystemSetFlags.S",
            "SceNgsUser_SceNgs_sceNgsSystemSetParamErrorCallback.S",
            "SceNgsUser_SceNgs_sceNgsSystemUnlock.S",
            "SceNgsUser_SceNgs_sceNgsSystemUpdate.S",
            "SceNgsUser_SceNgs_sceNgsVoiceBypassModule.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetAtrac9Voice.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetCompressorBuss.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetCompressorSideChainBuss.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetDelayBuss.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetDistortionBuss.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetEnvelopeBuss.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetEqBuss.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetMasterBuss.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetMixerBuss.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetPauserBuss.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetPitchShiftBuss.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetReverbBuss.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetSasEmuVoice.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetScreamAtrac9Voice.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetScreamVoice.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetSimpleAtrac9Voice.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetSimpleVoice.S",
            "SceNgsUser_SceNgs_sceNgsVoiceDefGetTemplate1.S",
            "SceNgsUser_SceNgs_sceNgsVoiceGetInfo.S",
            "SceNgsUser_SceNgs_sceNgsVoiceGetModuleBypass.S",
            "SceNgsUser_SceNgs_sceNgsVoiceGetModuleType.S",
            "SceNgsUser_SceNgs_sceNgsVoiceGetOutputPatch.S",
            "SceNgsUser_SceNgs_sceNgsVoiceGetParamsOutOfRange.S",
            "SceNgsUser_SceNgs_sceNgsVoiceGetStateData.S",
            "SceNgsUser_SceNgs_sceNgsVoiceInit.S",
            "SceNgsUser_SceNgs_sceNgsVoiceKeyOff.S",
            "SceNgsUser_SceNgs_sceNgsVoiceKill.S",
            "SceNgsUser_SceNgs_sceNgsVoiceLockParams.S",
            "SceNgsUser_SceNgs_sceNgsVoicePatchSetVolume.S",
            "SceNgsUser_SceNgs_sceNgsVoicePatchSetVolumes.S",
            "SceNgsUser_SceNgs_sceNgsVoicePatchSetVolumesMatrix.S",
            "SceNgsUser_SceNgs_sceNgsVoicePause.S",
            "SceNgsUser_SceNgs_sceNgsVoicePlay.S",
            "SceNgsUser_SceNgs_sceNgsVoiceResume.S",
            "SceNgsUser_SceNgs_sceNgsVoiceSetFinishedCallback.S",
            "SceNgsUser_SceNgs_sceNgsVoiceSetModuleCallback.S",
            "SceNgsUser_SceNgs_sceNgsVoiceSetParamsBlock.S",
            "SceNgsUser_SceNgs_sceNgsVoiceSetPreset.S",
            "SceNgsUser_SceNgs_sceNgsVoiceUnlockParams.S",
            "SceNgsUser_SceNgs_sceSulphaNgsGetDefaultConfig.S",
            "SceNgsUser_SceNgs_sceSulphaNgsGetNeededMemory.S",
            "SceNgsUser_SceNgs_sceSulphaNgsInit.S",
            "SceNgsUser_SceNgs_sceSulphaNgsSetRackName.S",
            "SceNgsUser_SceNgs_sceSulphaNgsSetSampleName.S",
            "SceNgsUser_SceNgs_sceSulphaNgsSetSynthName.S",
            "SceNgsUser_SceNgs_sceSulphaNgsSetVoiceName.S",
            "SceNgsUser_SceNgs_sceSulphaNgsShutdown.S",
            "SceNgsUser_SceNgs_sceSulphaNgsTrace.S",
        },
    });
}
pub fn buildSceDTrace(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceDTrace",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceDTrace_SceDTrace_sceDTraceAddHelperDof.S",
            "SceDTrace_SceDTrace_sceDTraceClientClose.S",
            "SceDTrace_SceDTrace_sceDTraceClientIoctl.S",
            "SceDTrace_SceDTrace_sceDTraceClientOpen.S",
            "SceDTrace_SceDTrace_sceDTraceHelperIoctl.S",
            "SceDTrace_SceDTrace_sceDTraceRemoveHelperDof.S",
        },
    });
}
pub fn buildSceDisplay(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceDisplay",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceDisplay_SceDisplay__sceDisplayGetFrameBuf.S",
            "SceDisplay_SceDisplay__sceDisplayGetFrameBufInternal.S",
            "SceDisplay_SceDisplay__sceDisplayGetMaximumFrameBufResolution.S",
            "SceDisplay_SceDisplay__sceDisplayGetResolutionInfoInternal.S",
            "SceDisplay_SceDisplay__sceDisplaySetFrameBuf.S",
            "SceDisplay_SceDisplay__sceDisplaySetFrameBufForCompat.S",
            "SceDisplay_SceDisplay__sceDisplaySetFrameBufInternal.S",
            "SceDisplay_SceDisplay_sceDisplayGetPrimaryHead.S",
            "SceDisplay_SceDisplay_sceDisplayGetRefreshRate.S",
            "SceDisplay_SceDisplay_sceDisplayGetVcount.S",
            "SceDisplay_SceDisplay_sceDisplayGetVcountInternal.S",
            "SceDisplay_SceDisplay_sceDisplayRegisterVblankStartCallback.S",
            "SceDisplay_SceDisplay_sceDisplayUnregisterVblankStartCallback.S",
            "SceDisplay_SceDisplay_sceDisplayWaitSetFrameBuf.S",
            "SceDisplay_SceDisplay_sceDisplayWaitSetFrameBufCB.S",
            "SceDisplay_SceDisplay_sceDisplayWaitSetFrameBufMulti.S",
            "SceDisplay_SceDisplay_sceDisplayWaitSetFrameBufMultiCB.S",
            "SceDisplay_SceDisplay_sceDisplayWaitVblankStart.S",
            "SceDisplay_SceDisplay_sceDisplayWaitVblankStartCB.S",
            "SceDisplay_SceDisplay_sceDisplayWaitVblankStartMulti.S",
            "SceDisplay_SceDisplay_sceDisplayWaitVblankStartMultiCB.S",
            "SceDisplay_SceDisplayUser_sceDisplayGetFrameBuf.S",
            "SceDisplay_SceDisplayUser_sceDisplayGetFrameBufInternal.S",
            "SceDisplay_SceDisplayUser_sceDisplayGetMaximumFrameBufResolution.S",
            "SceDisplay_SceDisplayUser_sceDisplayGetResolutionInfoInternal.S",
            "SceDisplay_SceDisplayUser_sceDisplaySetFrameBuf.S",
            "SceDisplay_SceDisplayUser_sceDisplaySetFrameBufForCompat.S",
            "SceDisplay_SceDisplayUser_sceDisplaySetFrameBufInternal.S",
        },
    });
}
pub fn buildSceDisplayForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceDisplayForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayCaptureFrameBufDMAC.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayCaptureFrameBufDMACInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayCaptureFrameBufIFTU.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayCaptureFrameBufIFTUInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayDisableHead.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayEnableHead.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayGetActualViewportConf.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayGetDeviceType.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayGetFrameBuf.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayGetFrameBufInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayGetMaximumFrameBufResolution.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayGetOutputMode.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayGetPrimaryHead.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayGetProcFrameBufInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayGetRefreshRateInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayGetResolutionInfoInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayGetVcountInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayRegisterFrameBufCallback.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayRegisterFrameBufCallbackInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayRegisterVblankStartCallback.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayRegisterVblankStartCallbackInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplaySetBrightness.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplaySetColorSpaceMode.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplaySetFrameBuf.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplaySetFrameBufInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplaySetInvertColors.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplaySetMergeConf.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplaySetOutputMode.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplaySetOwner.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplaySetScaleConf.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplaySetViewportConf.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayUnregisterVblankStartCallback.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayUnregisterVblankStartCallbackInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitSetFrameBuf.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitSetFrameBufCB.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitSetFrameBufCBInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitSetFrameBufInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitSetFrameBufMulti.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitSetFrameBufMultiCB.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitSetFrameBufMultiCBInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitSetFrameBufMultiInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitVblankStart.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitVblankStartCB.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitVblankStartCBInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitVblankStartInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitVblankStartMulti.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitVblankStartMultiCB.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitVblankStartMultiCBInternal.S",
            "SceDisplayForDriver_SceDisplayForDriver_ksceDisplayWaitVblankStartMultiInternal.S",
        },
    });
}
pub fn buildSceIncomingDialog(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceIncomingDialog",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceIncomingDialog_SceIncomingDialog_sceIncomingDialogClose.S",
            "SceIncomingDialog_SceIncomingDialog_sceIncomingDialogFinish.S",
            "SceIncomingDialog_SceIncomingDialog_sceIncomingDialogGetStatus.S",
            "SceIncomingDialog_SceIncomingDialog_sceIncomingDialogInitialize.S",
            "SceIncomingDialog_SceIncomingDialog_sceIncomingDialogOpen.S",
            "SceIncomingDialog_SceIncomingDialog_sceIncomingDialogSwitchToDialog.S",
        },
    });
}
pub fn buildSceBbmc(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceBbmc",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceBbmc_SceBbmc_sceBbmcClearEvent.S",
            "SceBbmc_SceBbmc_sceBbmcDLGetSwdlError.S",
            "SceBbmc_SceBbmc_sceBbmcDLQAbort.S",
            "SceBbmc_SceBbmc_sceBbmcDLQBackupEFSNV.S",
            "SceBbmc_SceBbmc_sceBbmcDLQConfirmChangePartition.S",
            "SceBbmc_SceBbmc_sceBbmcDLQDownloadSafeImage.S",
            "SceBbmc_SceBbmc_sceBbmcDLQDownloadSlotImage.S",
            "SceBbmc_SceBbmc_sceBbmcDLQGetCurrentFwDone.S",
            "SceBbmc_SceBbmc_sceBbmcDLQGetCurrentFwStart.S",
            "SceBbmc_SceBbmc_sceBbmcDLQGetFwListDone.S",
            "SceBbmc_SceBbmc_sceBbmcDLQGetFwListStart.S",
            "SceBbmc_SceBbmc_sceBbmcDLQRestoreEFSNV.S",
            "SceBbmc_SceBbmc_sceBbmcDLUpdaterCheckComVersion.S",
            "SceBbmc_SceBbmc_sceBbmcDLUpdaterContinue.S",
            "SceBbmc_SceBbmc_sceBbmcDLUpdaterFin.S",
            "SceBbmc_SceBbmc_sceBbmcDLUpdaterGetArchiveVersion.S",
            "SceBbmc_SceBbmc_sceBbmcDLUpdaterGetLatestArchiveVersion.S",
            "SceBbmc_SceBbmc_sceBbmcDLUpdaterGetPkgId.S",
            "SceBbmc_SceBbmc_sceBbmcDLUpdaterGetSequence.S",
            "SceBbmc_SceBbmc_sceBbmcDLUpdaterStart.S",
            "SceBbmc_SceBbmc_sceBbmcDebugOutString.S",
            "SceBbmc_SceBbmc_sceBbmcDebugSelectOutMedia.S",
            "SceBbmc_SceBbmc_sceBbmcDepersonalizeCK.S",
            "SceBbmc_SceBbmc_sceBbmcEnvelopeCmd.S",
            "SceBbmc_SceBbmc_sceBbmcFileRefreshResponse.S",
            "SceBbmc_SceBbmc_sceBbmcGetCKStatus.S",
            "SceBbmc_SceBbmc_sceBbmcGetComFirmVersion.S",
            "SceBbmc_SceBbmc_sceBbmcGetDriverInfo.S",
            "SceBbmc_SceBbmc_sceBbmcGetFailureInfo.S",
            "SceBbmc_SceBbmc_sceBbmcGetFileRefreshDetail.S",
            "SceBbmc_SceBbmc_sceBbmcGetIdStorageFrom3GModule.S",
            "SceBbmc_SceBbmc_sceBbmcGetNetworkInfo.S",
            "SceBbmc_SceBbmc_sceBbmcGetPinStatus.S",
            "SceBbmc_SceBbmc_sceBbmcGetProactiveCmd.S",
            "SceBbmc_SceBbmc_sceBbmcGpsCellGetLocationInfoDone.S",
            "SceBbmc_SceBbmc_sceBbmcGpsCellGetLocationInfoStart.S",
            "SceBbmc_SceBbmc_sceBbmcIsAbleToRunUnderCurrentTemp.S",
            "SceBbmc_SceBbmc_sceBbmcIsAbleToRunUnderCurrentVoltage.S",
            "SceBbmc_SceBbmc_sceBbmcIsPowerConfigForbiddenMode.S",
            "SceBbmc_SceBbmc_sceBbmcNetGetRejectCause.S",
            "SceBbmc_SceBbmc_sceBbmcNetworkAttach.S",
            "SceBbmc_SceBbmc_sceBbmcNetworkScanAbort.S",
            "SceBbmc_SceBbmc_sceBbmcNetworkScanDone.S",
            "SceBbmc_SceBbmc_sceBbmcNetworkScanStart.S",
            "SceBbmc_SceBbmc_sceBbmcPacketGetCurrentBearerTech.S",
            "SceBbmc_SceBbmc_sceBbmcPacketGetLastCallEndReason.S",
            "SceBbmc_SceBbmc_sceBbmcPacketIfClearControlFlag.S",
            "SceBbmc_SceBbmc_sceBbmcPacketIfGetControlFlag.S",
            "SceBbmc_SceBbmc_sceBbmcPacketIfSetControlFlag.S",
            "SceBbmc_SceBbmc_sceBbmcPacketReleasePDPContext.S",
            "SceBbmc_SceBbmc_sceBbmcReadSimContentDone.S",
            "SceBbmc_SceBbmc_sceBbmcReadSimContentStart.S",
            "SceBbmc_SceBbmc_sceBbmcReserveOperationMode.S",
            "SceBbmc_SceBbmc_sceBbmcResumeSubscriberCallback.S",
            "SceBbmc_SceBbmc_sceBbmcSMSGetListDone.S",
            "SceBbmc_SceBbmc_sceBbmcSMSGetListStart.S",
            "SceBbmc_SceBbmc_sceBbmcSMSReadAck.S",
            "SceBbmc_SceBbmc_sceBbmcSMSReadDone.S",
            "SceBbmc_SceBbmc_sceBbmcSMSReadStart.S",
            "SceBbmc_SceBbmc_sceBbmcSMSSend.S",
            "SceBbmc_SceBbmc_sceBbmcSetLPMMode.S",
            "SceBbmc_SceBbmc_sceBbmcSetupGetValueDone.S",
            "SceBbmc_SceBbmc_sceBbmcSetupGetValueStart.S",
            "SceBbmc_SceBbmc_sceBbmcSetupSetValue.S",
            "SceBbmc_SceBbmc_sceBbmcSimGetPLMNModeBit.S",
            "SceBbmc_SceBbmc_sceBbmcSubscribeFeatureId.S",
            "SceBbmc_SceBbmc_sceBbmcTerminalResponseCmd.S",
            "SceBbmc_SceBbmc_sceBbmcTurnOff.S",
            "SceBbmc_SceBbmc_sceBbmcTurnOn.S",
            "SceBbmc_SceBbmc_sceBbmcUnblockCK.S",
            "SceBbmc_SceBbmc_sceBbmcUnblockPin.S",
            "SceBbmc_SceBbmc_sceBbmcUnsubscribeFeature.S",
            "SceBbmc_SceBbmc_sceBbmcUsbExtIfRead.S",
            "SceBbmc_SceBbmc_sceBbmcUsbExtIfStart.S",
            "SceBbmc_SceBbmc_sceBbmcUsbExtIfStop.S",
            "SceBbmc_SceBbmc_sceBbmcUsbExtIfWrite.S",
            "SceBbmc_SceBbmc_sceBbmcVerifyPin.S",
        },
    });
}
pub fn buildSceAppMgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAppMgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAppMgr_SceAppMgrUser__sceAppMgrGetAppState.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrAcidDirSet.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrAcquireSoundOutExclusive3.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrAddContAddMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrAddContMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrAppDataMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrAppDataMountById.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrAppMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrAppParamGetInt.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrAppParamGetString.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrAppParamSetString.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrAppUmount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrBgdlGetQueueStatus.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrCaptureFrameBufDMACByAppId.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrCaptureFrameBufIFTUByAppId.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrCheckRifGD.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrContentInstallPeriodStart.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrContentInstallPeriodStop.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrConvertVs0UserDrivePath.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrDeclareShellProcess2.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrDestroyAppByName.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrDrmClose.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrDrmOpen.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrForceUmount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGameDataMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetAppInfo.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetAppMgrState.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetAppParam.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetAppParam2.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetBootParam.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetBudgetInfo.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetCoredumpStateForShell.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetCurrentBgmState.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetCurrentBgmState2.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetDevInfo.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetFgAppInfo.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetIdByName.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetMediaTypeFromDrive.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetMediaTypeFromDriveByPid.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetMountProcessNum.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetNameById.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetPfsDrive.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetPidListForShell.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetRawPath.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetRawPathOfApp0ByAppIdForShell.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetRawPathOfApp0ByPidForShell.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetRecommendedScreenOrientation.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetRunningAppIdListForShell.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetSaveDataInfo.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetSaveDataInfoForSpecialExport.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetStatusByAppId.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetStatusById.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetStatusByName.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetSystemDataFilePlayReady.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetUserDirPath.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetUserDirPathById.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetVs0UserDataDrive.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrGetVs0UserModuleDrive.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrInitSafeMemoryById.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrInstallDirMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrIsCameraActive.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLaunchAppByName.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLaunchAppByName2.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLaunchAppByName2ForShell.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLaunchAppByName2ndStage.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLaunchAppByNameForShell.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLaunchAppByPath4.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLaunchAppByUri.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLaunchAppByUri2.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLaunchVideoStreamingApp.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLoadExec.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLoadSaveDataSystemFile.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLoopBackFormat.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrLoopBackMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrMmsMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrOverwriteLaunchParamForShell.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrPeekLaunchParamForShell.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrPhotoMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrPhotoUmount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrPspSaveDataGetParams.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrPspSaveDataRead.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrPspSaveDataRootMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrReceiveEvent.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrReceiveEventNum.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrReceiveNotificationRequestForShell.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrReceiveShellEvent.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrReceiveSystemEvent.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataAddMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataDataRemove.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataDataRemove2.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataDataSave.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataDataSave2.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataGetQuota.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataSlotCreate.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataSlotDelete.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataSlotFileClose.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataSlotFileGetParam.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataSlotFileOpen.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataSlotGetParam.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataSlotGetStatus.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataSlotInit.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataSlotSetParam.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataSlotSetStatus.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSaveDataUmount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSendNotificationRequest.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSendParam.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSendSystemEvent.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSendSystemEvent2.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSetBackRenderPortOwner.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSetBgmProxyApp.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSetNetworkDisconnectionWarningDialogState.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSetPowerSaveMode.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSetRecommendedScreenOrientationForShell.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSetShellScreenOrientation.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSetSystemDataFile.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSetSystemDataFilePlayReady.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSystemParamDateTimeGetConf.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSystemParamGetInt.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrSystemParamGetString.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrThemeDataMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrTrophyMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrTrophyMountById.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrUmount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrUmountByPid.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrUpdateSaveDataParam.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrWorkDirMount.S",
            "SceAppMgr_SceAppMgrUser_sceAppMgrWorkDirMountById.S",
            "SceAppMgr_SceAppMgr___sceAppMgrGetAppState.S",
            "SceAppMgr_SceAppMgr__sceAppMgrAcidDirSet.S",
            "SceAppMgr_SceAppMgr__sceAppMgrAcquireSoundOutExclusive3.S",
            "SceAppMgr_SceAppMgr__sceAppMgrAddContAddMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrAddContMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrAppDataMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrAppDataMountById.S",
            "SceAppMgr_SceAppMgr__sceAppMgrAppMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrAppParamGetInt.S",
            "SceAppMgr_SceAppMgr__sceAppMgrAppParamGetString.S",
            "SceAppMgr_SceAppMgr__sceAppMgrAppParamSetString.S",
            "SceAppMgr_SceAppMgr__sceAppMgrAppUmount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrBgdlGetQueueStatus.S",
            "SceAppMgr_SceAppMgr__sceAppMgrCaptureFrameBufDMACByAppId.S",
            "SceAppMgr_SceAppMgr__sceAppMgrCaptureFrameBufIFTUByAppId.S",
            "SceAppMgr_SceAppMgr__sceAppMgrCheckRifGD.S",
            "SceAppMgr_SceAppMgr__sceAppMgrContentInstallPeriodStart.S",
            "SceAppMgr_SceAppMgr__sceAppMgrContentInstallPeriodStop.S",
            "SceAppMgr_SceAppMgr__sceAppMgrConvertVs0UserDrivePath.S",
            "SceAppMgr_SceAppMgr__sceAppMgrDeclareShellProcess2.S",
            "SceAppMgr_SceAppMgr__sceAppMgrDestroyAppByName.S",
            "SceAppMgr_SceAppMgr__sceAppMgrDrmClose.S",
            "SceAppMgr_SceAppMgr__sceAppMgrDrmOpen.S",
            "SceAppMgr_SceAppMgr__sceAppMgrForceUmount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGameDataMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetAppInfo.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetAppMgrState.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetAppParam.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetAppParam2.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetBootParam.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetBudgetInfo.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetCoredumpStateForShell.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetCurrentBgmState.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetCurrentBgmState2.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetDevInfo.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetFgAppInfo.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetIdByName.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetMediaTypeFromDrive.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetMediaTypeFromDriveByPid.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetMountProcessNum.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetNameById.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetPfsDrive.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetPidListForShell.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetRawPath.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetRawPathOfApp0ByAppIdForShell.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetRawPathOfApp0ByPidForShell.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetRecommendedScreenOrientation.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetRunningAppIdListForShell.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetSaveDataInfo.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetSaveDataInfoForSpecialExport.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetStatusByAppId.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetStatusById.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetStatusByName.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetSystemDataFilePlayReady.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetUserDirPath.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetUserDirPathById.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetVs0UserDataDrive.S",
            "SceAppMgr_SceAppMgr__sceAppMgrGetVs0UserModuleDrive.S",
            "SceAppMgr_SceAppMgr__sceAppMgrInitSafeMemoryById.S",
            "SceAppMgr_SceAppMgr__sceAppMgrInstallDirMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrIsCameraActive.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLaunchAppByName.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLaunchAppByName2.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLaunchAppByName2ForShell.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLaunchAppByName2ndStage.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLaunchAppByNameForShell.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLaunchAppByPath4.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLaunchAppByUri.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLaunchAppByUri2.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLaunchVideoStreamingApp.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLoadExec.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLoadSaveDataSystemFile.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLoopBackFormat.S",
            "SceAppMgr_SceAppMgr__sceAppMgrLoopBackMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrMmsMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrOverwriteLaunchParamForShell.S",
            "SceAppMgr_SceAppMgr__sceAppMgrPeekLaunchParamForShell.S",
            "SceAppMgr_SceAppMgr__sceAppMgrPhotoMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrPhotoUmount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrPspSaveDataGetParams.S",
            "SceAppMgr_SceAppMgr__sceAppMgrPspSaveDataRead.S",
            "SceAppMgr_SceAppMgr__sceAppMgrPspSaveDataRootMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrReceiveEvent.S",
            "SceAppMgr_SceAppMgr__sceAppMgrReceiveEventNum.S",
            "SceAppMgr_SceAppMgr__sceAppMgrReceiveNotificationRequestForShell.S",
            "SceAppMgr_SceAppMgr__sceAppMgrReceiveShellEvent.S",
            "SceAppMgr_SceAppMgr__sceAppMgrReceiveSystemEvent.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataAddMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataDataRemove.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataDataRemove2.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataDataSave.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataDataSave2.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataGetQuota.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataSlotCreate.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataSlotDelete.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataSlotFileClose.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataSlotFileGetParam.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataSlotFileOpen.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataSlotGetParam.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataSlotGetStatus.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataSlotInit.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataSlotSetParam.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataSlotSetStatus.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSaveDataUmount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSendNotificationRequest.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSendParam.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSendSystemEvent.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSendSystemEvent2.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSetBackRenderPortOwner.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSetBgmProxyApp.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSetNetworkDisconnectionWarningDialogState.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSetPowerSaveMode.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSetRecommendedScreenOrientationForShell.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSetShellScreenOrientation.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSetSystemDataFile.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSetSystemDataFilePlayReady.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSystemParamDateTimeGetConf.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSystemParamGetInt.S",
            "SceAppMgr_SceAppMgr__sceAppMgrSystemParamGetString.S",
            "SceAppMgr_SceAppMgr__sceAppMgrThemeDataMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrTrophyMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrTrophyMountById.S",
            "SceAppMgr_SceAppMgr__sceAppMgrUmount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrUmountByPid.S",
            "SceAppMgr_SceAppMgr__sceAppMgrUpdateSaveDataParam.S",
            "SceAppMgr_SceAppMgr__sceAppMgrWorkDirMount.S",
            "SceAppMgr_SceAppMgr__sceAppMgrWorkDirMountById.S",
            "SceAppMgr_SceAppMgr_sceAppMgrAcquireBgmPort.S",
            "SceAppMgr_SceAppMgr_sceAppMgrAcquireBgmPortForMusicPlayer.S",
            "SceAppMgr_SceAppMgr_sceAppMgrAcquireBgmPortWithPriority.S",
            "SceAppMgr_SceAppMgr_sceAppMgrAcquireBtrm.S",
            "SceAppMgr_SceAppMgr_sceAppMgrAcquireSoundOutExclusive.S",
            "SceAppMgr_SceAppMgr_sceAppMgrAcquireSoundOutExclusive2.S",
            "SceAppMgr_SceAppMgr_sceAppMgrActivateApp.S",
            "SceAppMgr_SceAppMgr_sceAppMgrDeactivateApp.S",
            "SceAppMgr_SceAppMgr_sceAppMgrDeclareSystemChatApp.S",
            "SceAppMgr_SceAppMgr_sceAppMgrDestroyAppByAppId.S",
            "SceAppMgr_SceAppMgr_sceAppMgrDestroyOtherApp.S",
            "SceAppMgr_SceAppMgr_sceAppMgrDestroyOtherAppByAppIdForShell.S",
            "SceAppMgr_SceAppMgr_sceAppMgrDestroyOtherAppByPidForShell.S",
            "SceAppMgr_SceAppMgr_sceAppMgrDump.S",
            "SceAppMgr_SceAppMgr_sceAppMgrEnableCoredumpForTest.S",
            "SceAppMgr_SceAppMgr_sceAppMgrEnableDuckingOnSystemChat.S",
            "SceAppMgr_SceAppMgr_sceAppMgrEnablePrioritizingSystemChat.S",
            "SceAppMgr_SceAppMgr_sceAppMgrExitToLiveboardForGameApp.S",
            "SceAppMgr_SceAppMgr_sceAppMgrFinishCoredumpForShell.S",
            "SceAppMgr_SceAppMgr_sceAppMgrGetAppIdByAppId.S",
            "SceAppMgr_SceAppMgr_sceAppMgrGetExtraAppParam.S",
            "SceAppMgr_SceAppMgr_sceAppMgrGetProcessIdByAppIdForShell.S",
            "SceAppMgr_SceAppMgr_sceAppMgrGetSystemDataFile.S",
            "SceAppMgr_SceAppMgr_sceAppMgrGrowMemory.S",
            "SceAppMgr_SceAppMgr_sceAppMgrGrowMemory3.S",
            "SceAppMgr_SceAppMgr_sceAppMgrIsDevelopmentMode.S",
            "SceAppMgr_SceAppMgr_sceAppMgrIsGameBudgetAppPresent.S",
            "SceAppMgr_SceAppMgr_sceAppMgrIsGameProgram.S",
            "SceAppMgr_SceAppMgr_sceAppMgrIsNonGameProgram.S",
            "SceAppMgr_SceAppMgr_sceAppMgrIsOtherAppPresent.S",
            "SceAppMgr_SceAppMgr_sceAppMgrIsPidShellAndCrashed.S",
            "SceAppMgr_SceAppMgr_sceAppMgrIsPsNowClient.S",
            "SceAppMgr_SceAppMgr_sceAppMgrLaunchAppCancel.S",
            "SceAppMgr_SceAppMgr_sceAppMgrLoadSafeMemory.S",
            "SceAppMgr_SceAppMgr_sceAppMgrNotifyLiveBoardModeForShell.S",
            "SceAppMgr_SceAppMgr_sceAppMgrQuitApp.S",
            "SceAppMgr_SceAppMgr_sceAppMgrQuitForNonSuspendableApp.S",
            "SceAppMgr_SceAppMgr_sceAppMgrReceiveShellEventNum.S",
            "SceAppMgr_SceAppMgr_sceAppMgrReleaseBgmPort.S",
            "SceAppMgr_SceAppMgr_sceAppMgrReleaseBtrm.S",
            "SceAppMgr_SceAppMgr_sceAppMgrReleaseSoundOutExclusive.S",
            "SceAppMgr_SceAppMgr_sceAppMgrReleaseSoundOutExclusive2.S",
            "SceAppMgr_SceAppMgr_sceAppMgrReleaseSoundOutExclusive3.S",
            "SceAppMgr_SceAppMgr_sceAppMgrRestoreBgmSettingForShell.S",
            "SceAppMgr_SceAppMgr_sceAppMgrRestoreDisplaySettingForShell.S",
            "SceAppMgr_SceAppMgr_sceAppMgrResumeBgAppByShell.S",
            "SceAppMgr_SceAppMgr_sceAppMgrReturnLiveAreaOperationResultForShell.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSaveDataGetCachedRequiredSizeKiB.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSaveSafeMemory.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSendLiveBoardMode.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSetAppProtectionModeOnMemoryShortage.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSetBgmSubPriority.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSetBgmSubPriorityForSystemChat.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSetDisplayMergeConf.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSetFakeSettingBug51800.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSetInfobarState.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSetInfobarStateForCommonDialog.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSetInfobarStateForShellByAppId.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSetRecommendedScreenOrientationActivated.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSetSystemImposeState.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSetSystemImposeState2.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSuspendBgAppByShell.S",
            "SceAppMgr_SceAppMgr_sceAppMgrSuspendUntilActivated.S",
            "SceAppMgr_SceSharedFb__sceSharedFbOpen.S",
            "SceAppMgr_SceSharedFb_sceSharedFbBegin.S",
            "SceAppMgr_SceSharedFb_sceSharedFbClose.S",
            "SceAppMgr_SceSharedFb_sceSharedFbCreate.S",
            "SceAppMgr_SceSharedFb_sceSharedFbDelete.S",
            "SceAppMgr_SceSharedFb_sceSharedFbEnd.S",
            "SceAppMgr_SceSharedFb_sceSharedFbGetInfo.S",
            "SceAppMgr_SceSharedFb_sceSharedFbGetRenderingInfo.S",
            "SceAppMgr_SceSharedFb_sceSharedFbGetShellRenderPort.S",
            "SceAppMgr_SceSharedFb_sceSharedFbUpdateProcess.S",
            "SceAppMgr_SceSharedFb_sceSharedFbUpdateProcessBegin.S",
            "SceAppMgr_SceSharedFb_sceSharedFbUpdateProcessEnd.S",
        },
    });
}
pub fn buildSceDriverUser(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceDriverUser",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceDriverUser_SceDrmBridgeUser_sceDrmBridgeGetCurrentSecureTick.S",
            "SceDriverUser_SceDrmBridgeUser_sceDrmBridgeIsAllowRemotePlayDebug.S",
            "SceDriverUser_SceDrmBridgeUser_sceDrmBridgeMlnpsnlAuth1.S",
            "SceDriverUser_SceDrmBridgeUser_sceDrmBridgeMlnpsnlAuth2.S",
        },
    });
}
pub fn buildSceMotion(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceMotion",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceMotion_SceMotion_sceMotionGetAngleThreshold.S",
            "SceMotion_SceMotion_sceMotionGetBasicOrientation.S",
            "SceMotion_SceMotion_sceMotionGetDeadband.S",
            "SceMotion_SceMotion_sceMotionGetDeviceLocation.S",
            "SceMotion_SceMotion_sceMotionGetGyroBiasCorrection.S",
            "SceMotion_SceMotion_sceMotionGetMagnetometerState.S",
            "SceMotion_SceMotion_sceMotionGetSensorState.S",
            "SceMotion_SceMotion_sceMotionGetState.S",
            "SceMotion_SceMotion_sceMotionGetTiltCorrection.S",
            "SceMotion_SceMotion_sceMotionMagnetometerOff.S",
            "SceMotion_SceMotion_sceMotionMagnetometerOn.S",
            "SceMotion_SceMotion_sceMotionReset.S",
            "SceMotion_SceMotion_sceMotionRotateYaw.S",
            "SceMotion_SceMotion_sceMotionSetAngleThreshold.S",
            "SceMotion_SceMotion_sceMotionSetDeadband.S",
            "SceMotion_SceMotion_sceMotionSetGyroBiasCorrection.S",
            "SceMotion_SceMotion_sceMotionSetTiltCorrection.S",
            "SceMotion_SceMotion_sceMotionStartSampling.S",
            "SceMotion_SceMotion_sceMotionStopSampling.S",
        },
    });
}
pub fn buildSceNotificationUtil(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNotificationUtil",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNotificationUtil_SceNotificationUtil_sceNotificationUtilCleanHistory.S",
            "SceNotificationUtil_SceNotificationUtil_sceNotificationUtilSendNotification.S",
            "SceNotificationUtil_SceNotificationUtilBgApp_sceNotificationUtilBgAppInitialize.S",
            "SceNotificationUtil_SceNotificationUtilProgress_sceNotificationUtilProgressBegin.S",
            "SceNotificationUtil_SceNotificationUtilProgress_sceNotificationUtilProgressFinish.S",
            "SceNotificationUtil_SceNotificationUtilProgress_sceNotificationUtilProgressUpdate.S",
        },
    });
}
pub fn buildSceKernelDmacMgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceKernelDmacMgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceKernelDmacMgr_SceDmacmgr_sceDmacMemcpy.S",
            "SceKernelDmacMgr_SceDmacmgr_sceDmacMemset.S",
        },
    });
}
pub fn buildSceDmacmgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceDmacmgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceDmacMemcpy.S",
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceDmacMemset.S",
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceKernelDmaOpAlloc.S",
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceKernelDmaOpAssign.S",
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceKernelDmaOpConcatenate.S",
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceKernelDmaOpDeQueue.S",
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceKernelDmaOpEnQueue.S",
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceKernelDmaOpFree.S",
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceKernelDmaOpQuit.S",
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceKernelDmaOpSetCallback.S",
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceKernelDmaOpSetupChain.S",
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceKernelDmaOpSetupDirect.S",
            "SceDmacmgrForDriver_SceDmacmgrForDriver_ksceKernelDmaOpSync.S",
        },
    });
}
pub fn buildSceSulpha(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSulpha",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSulpha_SceSulpha_sceSulphaAgentsGetNeededMemory.S",
            "SceSulpha_SceSulpha_sceSulphaAgentsRegister.S",
            "SceSulpha_SceSulpha_sceSulphaAgentsUnregister.S",
            "SceSulpha_SceSulpha_sceSulphaEventAdd.S",
            "SceSulpha_SceSulpha_sceSulphaEventDelete.S",
            "SceSulpha_SceSulpha_sceSulphaEventNew.S",
            "SceSulpha_SceSulpha_sceSulphaEventReport.S",
            "SceSulpha_SceSulpha_sceSulphaFileConnect.S",
            "SceSulpha_SceSulpha_sceSulphaFileDisconnect.S",
            "SceSulpha_SceSulpha_sceSulphaGetAgent.S",
            "SceSulpha_SceSulpha_sceSulphaGetDefaultConfig.S",
            "SceSulpha_SceSulpha_sceSulphaGetNeededMemory.S",
            "SceSulpha_SceSulpha_sceSulphaGetTimestamp.S",
            "SceSulpha_SceSulpha_sceSulphaInit.S",
            "SceSulpha_SceSulpha_sceSulphaLogHandler.S",
            "SceSulpha_SceSulpha_sceSulphaLogSetLevel.S",
            "SceSulpha_SceSulpha_sceSulphaNetworkInit.S",
            "SceSulpha_SceSulpha_sceSulphaNetworkShutdown.S",
            "SceSulpha_SceSulpha_sceSulphaNodeDelete.S",
            "SceSulpha_SceSulpha_sceSulphaNodeNew.S",
            "SceSulpha_SceSulpha_sceSulphaSetBookmark.S",
            "SceSulpha_SceSulpha_sceSulphaShutdown.S",
            "SceSulpha_SceSulpha_sceSulphaUpdate.S",
        },
    });
}
pub fn buildSceIdStorageForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceIdStorageForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageCreateAtomicLeaves.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageCreateLeaf.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageDeleteLeaf.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageEnumId.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageFlush.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageFormat.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageGetFreeLeaves.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageGetLeafSize.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageIsDirty.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageIsFormatted.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageIsReadOnly.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageLookup.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageReadLeaf.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageRestart.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageUnformat.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageUpdate.S",
            "SceIdStorageForDriver_SceIdStorageForDriver_ksceIdStorageWriteLeaf.S",
        },
    });
}
pub fn buildSceKernelBootimage(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceKernelBootimage",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceKernelBootimage_SceKernelBootimage_sceKernelBootimageEntries.S",
        },
    });
}
pub fn buildSceShutterSound(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceShutterSound",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceShutterSound_SceShutterSound_sceShutterSoundPlay.S",
        },
    });
}
pub fn buildSceVideoExport(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceVideoExport",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceVideoExport_SceVideoExport_sceVideoExportFromFile.S",
        },
    });
}
pub fn buildSceCamera(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCamera",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCamera_SceCamera_sceCameraClose.S",
            "SceCamera_SceCamera_sceCameraGetAntiFlicker.S",
            "SceCamera_SceCamera_sceCameraGetAutoControlHold.S",
            "SceCamera_SceCamera_sceCameraGetBacklight.S",
            "SceCamera_SceCamera_sceCameraGetBrightness.S",
            "SceCamera_SceCamera_sceCameraGetContrast.S",
            "SceCamera_SceCamera_sceCameraGetDeviceLocation.S",
            "SceCamera_SceCamera_sceCameraGetEV.S",
            "SceCamera_SceCamera_sceCameraGetEffect.S",
            "SceCamera_SceCamera_sceCameraGetExposureCeiling.S",
            "SceCamera_SceCamera_sceCameraGetGain.S",
            "SceCamera_SceCamera_sceCameraGetISO.S",
            "SceCamera_SceCamera_sceCameraGetImageQuality.S",
            "SceCamera_SceCamera_sceCameraGetNightmode.S",
            "SceCamera_SceCamera_sceCameraGetNoiseReduction.S",
            "SceCamera_SceCamera_sceCameraGetReverse.S",
            "SceCamera_SceCamera_sceCameraGetSaturation.S",
            "SceCamera_SceCamera_sceCameraGetSharpness.S",
            "SceCamera_SceCamera_sceCameraGetSharpnessOff.S",
            "SceCamera_SceCamera_sceCameraGetWhiteBalance.S",
            "SceCamera_SceCamera_sceCameraGetZoom.S",
            "SceCamera_SceCamera_sceCameraIsActive.S",
            "SceCamera_SceCamera_sceCameraOpen.S",
            "SceCamera_SceCamera_sceCameraRead.S",
            "SceCamera_SceCamera_sceCameraSetAntiFlicker.S",
            "SceCamera_SceCamera_sceCameraSetAutoControlHold.S",
            "SceCamera_SceCamera_sceCameraSetBacklight.S",
            "SceCamera_SceCamera_sceCameraSetBrightness.S",
            "SceCamera_SceCamera_sceCameraSetContrast.S",
            "SceCamera_SceCamera_sceCameraSetEV.S",
            "SceCamera_SceCamera_sceCameraSetEffect.S",
            "SceCamera_SceCamera_sceCameraSetExposureCeiling.S",
            "SceCamera_SceCamera_sceCameraSetGain.S",
            "SceCamera_SceCamera_sceCameraSetISO.S",
            "SceCamera_SceCamera_sceCameraSetImageQuality.S",
            "SceCamera_SceCamera_sceCameraSetNightmode.S",
            "SceCamera_SceCamera_sceCameraSetNoiseReduction.S",
            "SceCamera_SceCamera_sceCameraSetReverse.S",
            "SceCamera_SceCamera_sceCameraSetSaturation.S",
            "SceCamera_SceCamera_sceCameraSetSharpness.S",
            "SceCamera_SceCamera_sceCameraSetSharpnessOff.S",
            "SceCamera_SceCamera_sceCameraSetWhiteBalance.S",
            "SceCamera_SceCamera_sceCameraSetZoom.S",
            "SceCamera_SceCamera_sceCameraStart.S",
            "SceCamera_SceCamera_sceCameraStop.S",
        },
    });
}
pub fn buildSceCameraForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCameraForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCameraForDriver_SceCameraForDriver_ksceCameraIsActive.S",
        },
    });
}
pub fn buildSceCompat(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCompat",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCompat_SceCompat_sceCompatAllocCdramWithHole.S",
            "SceCompat_SceCompat_sceCompatAvailableColorSpaceSetting.S",
            "SceCompat_SceCompat_sceCompatCache.S",
            "SceCompat_SceCompat_sceCompatCheckPocketStation.S",
            "SceCompat_SceCompat_sceCompatDatRead.S",
            "SceCompat_SceCompat_sceCompatFrameBufferInit.S",
            "SceCompat_SceCompat_sceCompatGetCurrentSecureTick.S",
            "SceCompat_SceCompat_sceCompatGetDevInf.S",
            "SceCompat_SceCompat_sceCompatGetPeripheralState.S",
            "SceCompat_SceCompat_sceCompatGetPrimaryHead.S",
            "SceCompat_SceCompat_sceCompatGetPspSystemSoftwareVersion.S",
            "SceCompat_SceCompat_sceCompatGetStatus.S",
            "SceCompat_SceCompat_sceCompatGetTitleList.S",
            "SceCompat_SceCompat_sceCompatGetUpdateState.S",
            "SceCompat_SceCompat_sceCompatIdStorageLookup.S",
            "SceCompat_SceCompat_sceCompatInitEx.S",
            "SceCompat_SceCompat_sceCompatInterrupt.S",
            "SceCompat_SceCompat_sceCompatIsPocketStationTitle.S",
            "SceCompat_SceCompat_sceCompatLCDCSync.S",
            "SceCompat_SceCompat_sceCompatReadShared32.S",
            "SceCompat_SceCompat_sceCompatReturnValueEx.S",
            "SceCompat_SceCompat_sceCompatSetDisplayConfig.S",
            "SceCompat_SceCompat_sceCompatSetRif.S",
            "SceCompat_SceCompat_sceCompatSetSuspendSema.S",
            "SceCompat_SceCompat_sceCompatSetUpdateState.S",
            "SceCompat_SceCompat_sceCompatStart.S",
            "SceCompat_SceCompat_sceCompatStop.S",
            "SceCompat_SceCompat_sceCompatSuspendResume.S",
            "SceCompat_SceCompat_sceCompatUninit.S",
            "SceCompat_SceCompat_sceCompatWaitAndGetRequest.S",
            "SceCompat_SceCompat_sceCompatWaitIntr.S",
            "SceCompat_SceCompat_sceCompatWaitSpecialRequest.S",
            "SceCompat_SceCompat_sceCompatWriteShared32.S",
            "SceCompat_SceCompat_sceCompatWriteSharedCtrl.S",
        },
    });
}
pub fn buildSceJpegEncArm(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceJpegEncArm",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceJpegEncArm_SceJpegEncArm_sceJpegArmEncoderEncode.S",
            "SceJpegEncArm_SceJpegEncArm_sceJpegArmEncoderEnd.S",
            "SceJpegEncArm_SceJpegEncArm_sceJpegArmEncoderGetContextSize.S",
            "SceJpegEncArm_SceJpegEncArm_sceJpegArmEncoderInit.S",
            "SceJpegEncArm_SceJpegEncArm_sceJpegArmEncoderSetCompressionRatio.S",
            "SceJpegEncArm_SceJpegEncArm_sceJpegArmEncoderSetHeaderMode.S",
            "SceJpegEncArm_SceJpegEncArm_sceJpegArmEncoderSetOutputAddr.S",
            "SceJpegEncArm_SceJpegEncArm_sceJpegArmEncoderSetValidRegion.S",
        },
    });
}
pub fn buildSceVoiceQoS(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceVoiceQoS",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSConnect.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSCreateLocalEndpoint.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSCreateRemoteEndpoint.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSDeleteLocalEndpoint.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSDeleteRemoteEndpoint.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSDisconnect.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSEnd.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSGetConnectionAttribute.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSGetLocalEndpoint.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSGetLocalEndpointAttribute.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSGetRemoteEndpoint.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSGetStatus.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSInit.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSReadPacket.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSSetConnectionAttribute.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSSetLocalEndpointAttribute.S",
            "SceVoiceQoS_SceVoiceQoS_sceVoiceQoSWritePacket.S",
        },
    });
}
pub fn buildSceLibXml(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLibXml",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLibXml_SceLibXml__ZN3sce3Xml10SimpleDataC1EPKcj.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml10SimpleDataC1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml10SimpleDataC2EPKcj.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml10SimpleDataC2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml11Initializer10initializeEPKNS0_13InitParameterE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml11Initializer9terminateEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml11InitializerC1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml11InitializerC2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml11InitializerD1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml11InitializerD2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml12MemAllocatorC1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml12MemAllocatorC2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml12MemAllocatorD0Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml12MemAllocatorD1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml12MemAllocatorD2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml13AttributeList10initializeEPKNS0_11InitializerE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml13AttributeList12addAttributeEPKNS0_6StringES4_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml13AttributeList5clearEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml13AttributeList9terminateEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml13AttributeListC1ERKS1_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml13AttributeListC1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml13AttributeListC2ERKS1_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml13AttributeListC2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml13AttributeListD1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml13AttributeListD2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml14VarAllocBuffer4copyEPKhjb.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml14VarAllocBuffer5clearEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml14VarAllocBuffer7copyStrEPKcj.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml14VarAllocBuffer7copyStrERKNS0_6StringE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml14VarAllocBuffer7reserveEj.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml14VarAllocBuffer9terminateEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml14VarAllocBufferC1EPKNS0_11InitializerE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml14VarAllocBufferC2EPKNS0_11InitializerE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml14VarAllocBufferD0Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml14VarAllocBufferD1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml14VarAllocBufferD2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml18SerializeParameterC1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml18SerializeParameterC2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml20bXResultToResultTypeEi.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml23getMemManagerDebugLevelEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml23setMemManagerDebugLevelEi.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom15DocumentBuilder10initializeEPKNS0_11InitializerE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom15DocumentBuilder11getDocumentEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom15DocumentBuilder16setResolveEntityEb.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom15DocumentBuilder20setSkipIgnorableTextEb.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom15DocumentBuilder26setSkipIgnorableWhiteSpaceEb.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom15DocumentBuilder5parseEPKNS0_6StringEb.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom15DocumentBuilder9terminateEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom15DocumentBuilderC1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom15DocumentBuilderC2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom15DocumentBuilderD1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom15DocumentBuilderD2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom4Node11appendChildEy.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom4Node11removeChildEy.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom4Node12insertBeforeEyy.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom4NodeC1Ey.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom4NodeC2Ey.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom4NodeD1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom4NodeD2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document10importNodeEyyPKS2_y.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document10initializeEPKNS0_11InitializerE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document10insertNodeEyyy.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document11removeChildEyy.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document11resetStatusEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document11setWritableEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document12importParentEPKS2_y.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document12setAttrValueEyPKNS0_6StringES5_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document12setAttributeEyPKNS0_6StringES5_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document13createElementEPKNS0_6StringEPKNS0_13AttributeListES5_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document13recurseDeleteEy.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document14createTextNodeEPKNS0_6StringE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document15addElementChildEyPKNS0_6StringEPKNS0_13AttributeListES5_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document15removeAttributeEyPKNS0_6StringE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document16removeAttributesEy.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document16setAttributeListEyPKNS0_13AttributeListE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document7setTextEyPKNS0_6StringE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document9serializeEPKNS0_18SerializeParameterEPNS0_6StringE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8Document9terminateEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8DocumentC1ERKS2_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8DocumentC1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8DocumentC2ERKS2_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8DocumentC2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8DocumentD1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8DocumentD2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8DocumentaSERKS2_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8NodeList10initializeEPKNS0_11InitializerE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8NodeList10insertLastEy.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8NodeList10removeItemEy.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8NodeList11insertFirstEy.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8NodeList5clearEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8NodeList9terminateEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8NodeListC1ERKS2_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8NodeListC1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8NodeListC2ERKS2_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8NodeListC2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8NodeListD1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Dom8NodeListD2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Sax6Parser10initializeEPKNS0_11InitializerE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Sax6Parser11setUserDataEPv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Sax6Parser16setResolveEntityEb.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Sax6Parser18setDocumentHandlerEPNS1_15DocumentHandlerE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Sax6Parser26setSkipIgnorableWhiteSpaceEb.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Sax6Parser5parseEPKNS0_6StringEb.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Sax6Parser5resetEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Sax6Parser9terminateEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Sax6ParserC1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Sax6ParserC2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Sax6ParserD1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml3Sax6ParserD2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml4Attr10initializeEPKNS0_11InitializerE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml4Attr7setNameEPKNS0_6StringE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml4Attr8setValueEPKNS0_6StringE.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml4Attr9terminateEv.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml4AttrC1ERKS1_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml4AttrC1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml4AttrC2ERKS1_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml4AttrC2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml4AttrD1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml4AttrD2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml4AttraSERKS1_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml4Util9strResultEi.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml6StringC1EPKc.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml6StringC1EPKcj.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml6StringC1ERKS1_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml6StringC1Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml6StringC2EPKc.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml6StringC2EPKcj.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml6StringC2ERKS1_.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml6StringC2Ev.S",
            "SceLibXml_SceLibXml__ZN3sce3Xml6StringaSERKS1_.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml13AttributeList11isAvailableEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml13AttributeList12getAttributeEPKNS0_6StringE.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml13AttributeList12getAttributeEj.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml13AttributeList9getLengthEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom13DocumentDebug13getStructSizeEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom13DocumentDebug16getAttrTableSizeEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom13DocumentDebug16getCharTableSizeEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom13DocumentDebug19getElementTableSizeEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node11getNodeNameEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node11getNodeTypeEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node11isAvailableEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node12getLastChildEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node12getNodeValueEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node13getAttributesEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node13getChildNodesEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node13getFirstChildEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node13getParentNodeEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node13hasAttributesEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node13hasChildNodesEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node14getNextSiblingEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom4Node16getOwnerDocumentEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document10getDocRootEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document10getSiblingEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document10getXmlMetaEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document10isReadOnlyEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document11getAttrNameEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document11getNextAttrEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document11getNodeNameEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document11getNodeTypeEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document11isAvailableEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document12getAttrValueEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document12getAttributeEyPKNS0_6StringE.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document12getFirstAttrEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document12getLastChildEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document13getAttributesEyPNS1_8NodeListE.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document13getChildNodesEyPNS1_8NodeListE.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document13getEntityTypeEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document13getFirstChildEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document13hasAttributesEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document13hasChildNodesEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document14getSkippedTextEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document20getElementsByTagNameEyPKNS0_6StringEPNS1_8NodeListE.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document7getRootEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document7getTextEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document9getEntityEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document9getParentEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8Document9getStatusEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8NodeList11isAvailableEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8NodeList4itemEj.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8NodeList8findItemEPKNS0_6StringE.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8NodeList8findItemEy.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8NodeList9getLengthEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml3Dom8NodeListixEj.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml4Attr11isAvailableEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml4Attr7getNameEv.S",
            "SceLibXml_SceLibXml__ZNK3sce3Xml4Attr8getValueEv.S",
        },
    });
}
pub fn buildSceLibMonoBridge(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLibMonoBridge",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLibMonoBridge_SceLibMonoBridge___ashldi3.S",
            "SceLibMonoBridge_SceLibMonoBridge___divdi3.S",
            "SceLibMonoBridge_SceLibMonoBridge___divsi3.S",
            "SceLibMonoBridge_SceLibMonoBridge___lshrdi3.S",
            "SceLibMonoBridge_SceLibMonoBridge___moddi3.S",
            "SceLibMonoBridge_SceLibMonoBridge___modsi3.S",
            "SceLibMonoBridge_SceLibMonoBridge___sce_aeabi_idiv1.S",
            "SceLibMonoBridge_SceLibMonoBridge___sce_aeabi_ldiv1.S",
            "SceLibMonoBridge_SceLibMonoBridge___udivdi3.S",
            "SceLibMonoBridge_SceLibMonoBridge___udivsi3.S",
            "SceLibMonoBridge_SceLibMonoBridge___umoddi3.S",
            "SceLibMonoBridge_SceLibMonoBridge___umodsi3.S",
            "SceLibMonoBridge_SceLibMonoBridge_environ.S",
            "SceLibMonoBridge_SceLibMonoBridge_g_ascii_strcasecmp.S",
            "SceLibMonoBridge_SceLibMonoBridge_g_file_vita_get_current_dir.S",
            "SceLibMonoBridge_SceLibMonoBridge_g_file_vita_get_full_path.S",
            "SceLibMonoBridge_SceLibMonoBridge_g_file_vita_set_current_dir.S",
            "SceLibMonoBridge_SceLibMonoBridge_getenv.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_assertion_message.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_array_append_vals.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_array_free.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_array_insert_vals.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_array_new.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ascii_strdown.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ascii_strncasecmp.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ascii_tolower.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ascii_xdigit_value.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_build_path.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_convert.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_dir_close.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_dir_open.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_dir_read_name.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_direct_equal.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_direct_hash.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_error_free.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_file_get_contents.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_file_open_tmp.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_file_test.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_filename_from_uri.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_filename_from_utf8.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_filename_to_uri.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_find_program_in_path.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_free.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_get_charset.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_get_current_dir.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_get_home_dir.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_get_tmp_dir.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_get_user_name.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_getenv.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_destroy.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_foreach.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_foreach_remove.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_foreach_steal.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_insert_replace.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_iter_init.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_iter_next.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_lookup.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_lookup_extended.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_new.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_new_full.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_remove.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_hash_table_size.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_alloc.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_append.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_copy.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_delete_link.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_find.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_foreach.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_free.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_insert_before.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_length.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_nth.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_nth_data.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_prepend.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_remove.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_remove_link.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_reverse.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_list_sort.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_locale_from_utf8.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_locale_to_utf8.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_log.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_log_set_always_fatal.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_log_set_fatal_mask.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_logv.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_markup_parse_context_end_parse.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_markup_parse_context_free.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_markup_parse_context_new.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_markup_parse_context_parse.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_memdup.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_path_get_basename.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_path_get_dirname.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_path_is_absolute.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_print.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_printerr.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ptr_array_add.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ptr_array_free.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ptr_array_new.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ptr_array_remove.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ptr_array_remove_fast.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ptr_array_remove_index.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ptr_array_remove_index_fast.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ptr_array_sized_new.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_queue_free.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_queue_is_empty.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_queue_new.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_queue_pop_head.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_queue_push_head.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_set_prgname.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_setenv.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_shell_quote.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_append.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_concat.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_copy.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_delete_link.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_find.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_foreach.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_free.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_free_1.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_insert_sorted.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_last.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_length.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_nth.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_nth_data.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_prepend.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_remove.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_slist_reverse.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_snprintf.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_spaced_primes_closest.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_spawn_async_with_pipes.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_str_equal.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_str_has_prefix.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_str_hash.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_strchomp.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_strchug.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_strconcat.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_strdup_printf.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_strdup_vprintf.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_strerror.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_strfreev.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_string_append.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_string_append_c.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_string_append_len.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_string_append_printf.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_string_free.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_string_new.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_string_printf.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_strjoin.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_strlcpy.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_strndup.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_strreverse.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_strsplit.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_timer_destroy.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_timer_elapsed.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_timer_new.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_timer_start.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_timer_stop.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_ucs4_to_utf16.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_unichar_tolower.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_unichar_type.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_unichar_xdigit_value.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_unsetenv.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_usleep.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_utf16_to_ucs4.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_utf16_to_utf8.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_utf8_strdown.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_utf8_to_utf16.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_g_utf8_validate.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_malloc.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_malloc0.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_realloc.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_try_malloc.S",
            "SceLibMonoBridge_SceLibMonoBridge_monoeg_try_realloc.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_alloc_mem.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_alloc_raw.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_code_mem_alloc.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_code_mem_flush_icache.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_code_mem_free.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_code_mem_initialize.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_code_mem_lock.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_code_mem_terminate.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_code_mem_unlock.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_create_semaphore.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_crypto_close.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_crypto_fread.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_crypto_open.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_crypto_read.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_delay_thread.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_delete_semaphore.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_disable_ftz.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_free_mem.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_free_prng_provider.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_free_raw.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_get_account_hash_id.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_get_errnoloc.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_get_prng_provider.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_get_thread_context.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_get_ticks_32.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_get_ticks_64.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_get_ticks_since_111.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_get_win32_filetime.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_getpagesize.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_getpid.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_gettimeofday.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_chstat.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_close.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_dclose.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_dopen.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_getstat.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_lseek.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_mkdir.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_open.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_read.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_remove.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_rename.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_rmdir.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_io_write.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_nanosleep.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_accept.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_bind.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_connect.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_epoll_create.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_epoll_ctl.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_epoll_destroy.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_epoll_wait.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_gethostname.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_getpeername.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_getsockname.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_getsockopt.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_htonl.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_htons.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_init.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_listen.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_ntohl.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_ntohs.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_recv.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_recvfrom.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_resolver_create.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_resolver_start_aton.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_resolver_start_ntoa.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_send.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_sendto.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_setsockopt.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_shutdown.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_socket.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_net_socket_close.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_prng_fill.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_resume_thread.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_set_thread_context.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_set_win32_filetime.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_signal_semaphore.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_supports_fast_tls.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_suspend_thread.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_threads_initialize.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_usb_transport_close1.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_usb_transport_close2.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_usb_transport_connect.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_usb_transport_recv.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_usb_transport_send.S",
            "SceLibMonoBridge_SceLibMonoBridge_pss_wait_semaphore.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_attr_init.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_attr_setstacksize.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_cleanup_pop_.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_cleanup_push_.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_cond_broadcast.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_cond_destroy.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_cond_init.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_cond_signal.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_cond_timedwait.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_cond_wait.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_create.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_detach.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_equal.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_exit.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_getspecific.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_getspecific_for_thread.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_join.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_key_create.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_key_delete.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_mutex_destroy.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_mutex_init.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_mutex_lock.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_mutex_trylock.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_mutex_unlock.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_mutexattr_destroy.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_mutexattr_init.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_mutexattr_settype.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_self.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_setspecific.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_vita_tls_create_np.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_vita_tls_get_np.S",
            "SceLibMonoBridge_SceLibMonoBridge_pthread_vita_tls_set_np.S",
            "SceLibMonoBridge_SceLibMonoBridge_sched_yield.S",
            "SceLibMonoBridge_SceLibMonoBridge_unlink.S",
        },
    });
}
pub fn buildScePfsMgrForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePfsMgrForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePfsMgrForKernel_ScePfsMgrForKernel_kscePfsAcidDirApprove.S",
            "ScePfsMgrForKernel_ScePfsMgrForKernel_kscePfsAcidDirMount.S",
            "ScePfsMgrForKernel_ScePfsMgrForKernel_kscePfsAcidDirSet.S",
            "ScePfsMgrForKernel_ScePfsMgrForKernel_kscePfsAcidDirUnmount.S",
            "ScePfsMgrForKernel_ScePfsMgrForKernel_kscePfsApprove.S",
            "ScePfsMgrForKernel_ScePfsMgrForKernel_kscePfsDisapprove.S",
            "ScePfsMgrForKernel_ScePfsMgrForKernel_kscePfsMount.S",
            "ScePfsMgrForKernel_ScePfsMgrForKernel_kscePfsMount2.S",
            "ScePfsMgrForKernel_ScePfsMgrForKernel_kscePfsUnmount.S",
        },
    });
}
pub fn buildSceNpUtility(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpUtility",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpUtility_SceNpUtility_sceNpBandwidthTestAbort.S",
            "SceNpUtility_SceNpUtility_sceNpBandwidthTestGetStatus.S",
            "SceNpUtility_SceNpUtility_sceNpBandwidthTestInitStart.S",
            "SceNpUtility_SceNpUtility_sceNpBandwidthTestShutdown.S",
            "SceNpUtility_SceNpUtility_sceNpLookupAbortRequest.S",
            "SceNpUtility_SceNpUtility_sceNpLookupAvatarImage.S",
            "SceNpUtility_SceNpUtility_sceNpLookupAvatarImageAsync.S",
            "SceNpUtility_SceNpUtility_sceNpLookupCreateRequest.S",
            "SceNpUtility_SceNpUtility_sceNpLookupCreateTitleCtx.S",
            "SceNpUtility_SceNpUtility_sceNpLookupDeleteRequest.S",
            "SceNpUtility_SceNpUtility_sceNpLookupDeleteTitleCtx.S",
            "SceNpUtility_SceNpUtility_sceNpLookupInit.S",
            "SceNpUtility_SceNpUtility_sceNpLookupNpId.S",
            "SceNpUtility_SceNpUtility_sceNpLookupNpIdAsync.S",
            "SceNpUtility_SceNpUtility_sceNpLookupPollAsync.S",
            "SceNpUtility_SceNpUtility_sceNpLookupSetTimeout.S",
            "SceNpUtility_SceNpUtility_sceNpLookupTerm.S",
            "SceNpUtility_SceNpUtility_sceNpLookupUserProfile.S",
            "SceNpUtility_SceNpUtility_sceNpLookupUserProfileAsync.S",
            "SceNpUtility_SceNpUtility_sceNpLookupWaitAsync.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterAbortRequest.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterCensorComment.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterCensorCommentAsync.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterCreateRequest.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterCreateTitleCtx.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterDeleteRequest.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterDeleteTitleCtx.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterInit.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterPollAsync.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterSanitizeComment.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterSanitizeCommentAsync.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterSetTimeout.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterTerm.S",
            "SceNpUtility_SceNpUtility_sceNpWordFilterWaitAsync.S",
        },
    });
}
pub fn buildSceSblAuthMgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblAuthMgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblAuthMgrForDriver_SceSblAuthMgrForDriver_ksceSblAuthMgrDecBindData.S",
            "SceSblAuthMgrForDriver_SceSblAuthMgrForDriver_ksceSblAuthMgrGetEKc.S",
            "SceSblAuthMgrForDriver_SceSblAuthMgrForDriver_ksceSblAuthMgrVerifySpfsoCtx.S",
        },
    });
}
pub fn buildSceSblAuthMgrForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblAuthMgrForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblAuthMgrForKernel_SceSblAuthMgrForKernel_ksceSblAuthMgrAuthHeader.S",
            "SceSblAuthMgrForKernel_SceSblAuthMgrForKernel_ksceSblAuthMgrClearDmac5Key.S",
            "SceSblAuthMgrForKernel_SceSblAuthMgrForKernel_ksceSblAuthMgrClose.S",
            "SceSblAuthMgrForKernel_SceSblAuthMgrForKernel_ksceSblAuthMgrCompareSwVersion.S",
            "SceSblAuthMgrForKernel_SceSblAuthMgrForKernel_ksceSblAuthMgrLoadBlock.S",
            "SceSblAuthMgrForKernel_SceSblAuthMgrForKernel_ksceSblAuthMgrOpen.S",
            "SceSblAuthMgrForKernel_SceSblAuthMgrForKernel_ksceSblAuthMgrSetDmac5Key.S",
            "SceSblAuthMgrForKernel_SceSblAuthMgrForKernel_ksceSblAuthMgrSetupAuthSegment.S",
        },
    });
}
pub fn buildSceCodecEngineWrapper(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCodecEngineWrapper",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEngineAllocMemoryFromUnmapMemBlock.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEngineChangeNumWorkerCores.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEngineChangeNumWorkerCoresDefault.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEngineChangeNumWorkerCoresMax.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEngineCloseUnmapMemBlock.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEngineFreeMemoryFromUnmapMemBlock.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEngineGetMemoryState.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEngineGetNumRpcCalled.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEngineGetProcessorLoad.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEngineOpenUnmapMemBlock.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEnginePmonGetProcessorLoad.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEnginePmonReset.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEnginePmonStart.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEnginePmonStop.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEngineResetNumRpcCalled.S",
            "SceCodecEngineWrapper_SceCodecEngineWrapper__sceCodecEngineSetClockFrequency.S",
        },
    });
}
pub fn buildSceHttp(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceHttp",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceHttp_SceHttp_sceHttpAbortRequest.S",
            "SceHttp_SceHttp_sceHttpAbortRequestForce.S",
            "SceHttp_SceHttp_sceHttpAbortWaitRequest.S",
            "SceHttp_SceHttp_sceHttpAddCookie.S",
            "SceHttp_SceHttp_sceHttpAddRequestHeader.S",
            "SceHttp_SceHttp_sceHttpAddRequestHeaderRaw.S",
            "SceHttp_SceHttp_sceHttpAuthCacheFlush.S",
            "SceHttp_SceHttp_sceHttpCookieExport.S",
            "SceHttp_SceHttp_sceHttpCookieFlush.S",
            "SceHttp_SceHttp_sceHttpCookieImport.S",
            "SceHttp_SceHttp_sceHttpCreateConnection.S",
            "SceHttp_SceHttp_sceHttpCreateConnectionWithURL.S",
            "SceHttp_SceHttp_sceHttpCreateEpoll.S",
            "SceHttp_SceHttp_sceHttpCreateRequest.S",
            "SceHttp_SceHttp_sceHttpCreateRequest2.S",
            "SceHttp_SceHttp_sceHttpCreateRequestWithURL.S",
            "SceHttp_SceHttp_sceHttpCreateRequestWithURL2.S",
            "SceHttp_SceHttp_sceHttpCreateTemplate.S",
            "SceHttp_SceHttp_sceHttpDeleteConnection.S",
            "SceHttp_SceHttp_sceHttpDeleteRequest.S",
            "SceHttp_SceHttp_sceHttpDeleteTemplate.S",
            "SceHttp_SceHttp_sceHttpDestroyEpoll.S",
            "SceHttp_SceHttp_sceHttpGetAcceptEncodingGZIPEnabled.S",
            "SceHttp_SceHttp_sceHttpGetAllResponseHeaders.S",
            "SceHttp_SceHttp_sceHttpGetAuthEnabled.S",
            "SceHttp_SceHttp_sceHttpGetAutoRedirect.S",
            "SceHttp_SceHttp_sceHttpGetCookie.S",
            "SceHttp_SceHttp_sceHttpGetCookieEnabled.S",
            "SceHttp_SceHttp_sceHttpGetCookieStats.S",
            "SceHttp_SceHttp_sceHttpGetEpoll.S",
            "SceHttp_SceHttp_sceHttpGetEpollId.S",
            "SceHttp_SceHttp_sceHttpGetIcmOption.S",
            "SceHttp_SceHttp_sceHttpGetLastErrno.S",
            "SceHttp_SceHttp_sceHttpGetMemoryPoolStats.S",
            "SceHttp_SceHttp_sceHttpGetNonblock.S",
            "SceHttp_SceHttp_sceHttpGetResponseContentLength.S",
            "SceHttp_SceHttp_sceHttpGetStatusCode.S",
            "SceHttp_SceHttp_sceHttpInit.S",
            "SceHttp_SceHttp_sceHttpParseResponseHeader.S",
            "SceHttp_SceHttp_sceHttpParseStatusLine.S",
            "SceHttp_SceHttp_sceHttpReadData.S",
            "SceHttp_SceHttp_sceHttpRedirectCacheFlush.S",
            "SceHttp_SceHttp_sceHttpRemoveRequestHeader.S",
            "SceHttp_SceHttp_sceHttpRequestGetAllHeaders.S",
            "SceHttp_SceHttp_sceHttpSendRequest.S",
            "SceHttp_SceHttp_sceHttpSetAcceptEncodingGZIPEnabled.S",
            "SceHttp_SceHttp_sceHttpSetAuthEnabled.S",
            "SceHttp_SceHttp_sceHttpSetAuthInfoCallback.S",
            "SceHttp_SceHttp_sceHttpSetAutoRedirect.S",
            "SceHttp_SceHttp_sceHttpSetConnectTimeOut.S",
            "SceHttp_SceHttp_sceHttpSetCookieEnabled.S",
            "SceHttp_SceHttp_sceHttpSetCookieMaxNum.S",
            "SceHttp_SceHttp_sceHttpSetCookieMaxNumPerDomain.S",
            "SceHttp_SceHttp_sceHttpSetCookieMaxSize.S",
            "SceHttp_SceHttp_sceHttpSetCookieRecvCallback.S",
            "SceHttp_SceHttp_sceHttpSetCookieSendCallback.S",
            "SceHttp_SceHttp_sceHttpSetCookieTotalMaxSize.S",
            "SceHttp_SceHttp_sceHttpSetDefaultAcceptEncodingGZIPEnabled.S",
            "SceHttp_SceHttp_sceHttpSetEpoll.S",
            "SceHttp_SceHttp_sceHttpSetEpollId.S",
            "SceHttp_SceHttp_sceHttpSetIcmOption.S",
            "SceHttp_SceHttp_sceHttpSetInflateGZIPEnabled.S",
            "SceHttp_SceHttp_sceHttpSetNonblock.S",
            "SceHttp_SceHttp_sceHttpSetRecvTimeOut.S",
            "SceHttp_SceHttp_sceHttpSetRedirectCallback.S",
            "SceHttp_SceHttp_sceHttpSetRequestContentLength.S",
            "SceHttp_SceHttp_sceHttpSetResolveRetry.S",
            "SceHttp_SceHttp_sceHttpSetResolveTimeOut.S",
            "SceHttp_SceHttp_sceHttpSetResponseHeaderMaxSize.S",
            "SceHttp_SceHttp_sceHttpSetSendTimeOut.S",
            "SceHttp_SceHttp_sceHttpSslIsCtxCreated.S",
            "SceHttp_SceHttp_sceHttpTerm.S",
            "SceHttp_SceHttp_sceHttpUnsetEpoll.S",
            "SceHttp_SceHttp_sceHttpUriBuild.S",
            "SceHttp_SceHttp_sceHttpUriEscape.S",
            "SceHttp_SceHttp_sceHttpUriMerge.S",
            "SceHttp_SceHttp_sceHttpUriParse.S",
            "SceHttp_SceHttp_sceHttpUriSweepPath.S",
            "SceHttp_SceHttp_sceHttpUriUnescape.S",
            "SceHttp_SceHttp_sceHttpWaitRequest.S",
            "SceHttp_SceHttp_sceHttpWaitRequestCB.S",
            "SceHttp_SceHttp_sceHttpsDisableOption.S",
            "SceHttp_SceHttp_sceHttpsDisableOption2.S",
            "SceHttp_SceHttp_sceHttpsDisableOptionPrivate.S",
            "SceHttp_SceHttp_sceHttpsEnableOption.S",
            "SceHttp_SceHttp_sceHttpsEnableOption2.S",
            "SceHttp_SceHttp_sceHttpsEnableOptionPrivate.S",
            "SceHttp_SceHttp_sceHttpsFreeCaList.S",
            "SceHttp_SceHttp_sceHttpsGetCaList.S",
            "SceHttp_SceHttp_sceHttpsGetSslError.S",
            "SceHttp_SceHttp_sceHttpsLoadCert.S",
            "SceHttp_SceHttp_sceHttpsSetSslCallback.S",
            "SceHttp_SceHttp_sceHttpsUnloadCert.S",
        },
    });
}
pub fn buildSceNpBasic(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpBasic",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpBasic_SceNpBasic_sceNpBasicCheckCallback.S",
            "SceNpBasic_SceNpBasic_sceNpBasicCheckIfPlayerIsBlocked.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetBlockListEntries.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetBlockListEntryCount.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetFriendContextState.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetFriendListEntries.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetFriendListEntryCount.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetFriendOnlineStatus.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetFriendRequestEntries.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetFriendRequestEntryCount.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetGameJoiningPresence.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetGamePresenceOfFriend.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetPlaySessionLog.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetPlaySessionLogSize.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetRequestedFriendRequestEntries.S",
            "SceNpBasic_SceNpBasic_sceNpBasicGetRequestedFriendRequestEntryCount.S",
            "SceNpBasic_SceNpBasic_sceNpBasicInit.S",
            "SceNpBasic_SceNpBasic_sceNpBasicJoinGameAckResponseSend.S",
            "SceNpBasic_SceNpBasic_sceNpBasicRecordPlaySessionLog.S",
            "SceNpBasic_SceNpBasic_sceNpBasicRegisterHandler.S",
            "SceNpBasic_SceNpBasic_sceNpBasicRegisterInGameDataMessageHandler.S",
            "SceNpBasic_SceNpBasic_sceNpBasicRegisterJoinGameAckHandler.S",
            "SceNpBasic_SceNpBasic_sceNpBasicSendInGameDataMessage.S",
            "SceNpBasic_SceNpBasic_sceNpBasicSetInGamePresence.S",
            "SceNpBasic_SceNpBasic_sceNpBasicTerm.S",
            "SceNpBasic_SceNpBasic_sceNpBasicUnregisterHandler.S",
            "SceNpBasic_SceNpBasic_sceNpBasicUnregisterInGameDataMessageHandler.S",
            "SceNpBasic_SceNpBasic_sceNpBasicUnregisterJoinGameAckHandler.S",
            "SceNpBasic_SceNpBasic_sceNpBasicUnsetInGamePresence.S",
        },
    });
}
pub fn buildSceBt(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceBt",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceBt_SceBt_sceBtAvrcpReadVolume.S",
            "SceBt_SceBt_sceBtAvrcpSendButton.S",
            "SceBt_SceBt_sceBtAvrcpSendVolume.S",
            "SceBt_SceBt_sceBtAvrcpSetPlayStatus.S",
            "SceBt_SceBt_sceBtAvrcpSetTitle.S",
            "SceBt_SceBt_sceBtDeleteRegisteredInfo.S",
            "SceBt_SceBt_sceBtFreqAudio.S",
            "SceBt_SceBt_sceBtGetConfiguration.S",
            "SceBt_SceBt_sceBtGetConnectingInfo.S",
            "SceBt_SceBt_sceBtGetDeviceId.S",
            "SceBt_SceBt_sceBtGetDeviceName.S",
            "SceBt_SceBt_sceBtGetInfoForTest.S",
            "SceBt_SceBt_sceBtGetLastError.S",
            "SceBt_SceBt_sceBtGetRegisteredInfo.S",
            "SceBt_SceBt_sceBtGetStatusForTest.S",
            "SceBt_SceBt_sceBtHfpGetCurrentPhoneNumber.S",
            "SceBt_SceBt_sceBtHfpRequest.S",
            "SceBt_SceBt_sceBtHidGetReportDescriptor.S",
            "SceBt_SceBt_sceBtHidTransfer.S",
            "SceBt_SceBt_sceBtHidVuGetReportFeature.S",
            "SceBt_SceBt_sceBtHidVuGetReportInput.S",
            "SceBt_SceBt_sceBtHidVuReadEvent.S",
            "SceBt_SceBt_sceBtHidVuRegisterCallback.S",
            "SceBt_SceBt_sceBtHidVuSetInterruptOutput.S",
            "SceBt_SceBt_sceBtHidVuSetReportFeature.S",
            "SceBt_SceBt_sceBtHidVuSetReportOutput.S",
            "SceBt_SceBt_sceBtHidVuUnregisterCallback.S",
            "SceBt_SceBt_sceBtPairingOOB.S",
            "SceBt_SceBt_sceBtPushBip.S",
            "SceBt_SceBt_sceBtPushOpp.S",
            "SceBt_SceBt_sceBtReadEvent.S",
            "SceBt_SceBt_sceBtRecvAudio.S",
            "SceBt_SceBt_sceBtRecvBip.S",
            "SceBt_SceBt_sceBtRecvOpp.S",
            "SceBt_SceBt_sceBtRecvSpp.S",
            "SceBt_SceBt_sceBtRegisterCallback.S",
            "SceBt_SceBt_sceBtReplyPinCode.S",
            "SceBt_SceBt_sceBtReplyUserConfirmation.S",
            "SceBt_SceBt_sceBtSendAudio.S",
            "SceBt_SceBt_sceBtSendL2capEchoRequestForTest.S",
            "SceBt_SceBt_sceBtSendSpp.S",
            "SceBt_SceBt_sceBtSetConfiguration.S",
            "SceBt_SceBt_sceBtSetContentProtection.S",
            "SceBt_SceBt_sceBtSetInquiryResultForTest.S",
            "SceBt_SceBt_sceBtSetInquiryScan.S",
            "SceBt_SceBt_sceBtSetL2capEchoResponseBufferForTest.S",
            "SceBt_SceBt_sceBtSetStatusForTest.S",
            "SceBt_SceBt_sceBtStartAudio.S",
            "SceBt_SceBt_sceBtStartConnect.S",
            "SceBt_SceBt_sceBtStartDisconnect.S",
            "SceBt_SceBt_sceBtStartInquiry.S",
            "SceBt_SceBt_sceBtStopAudio.S",
            "SceBt_SceBt_sceBtStopInquiry.S",
            "SceBt_SceBt_sceBtUnregisterCallback.S",
        },
    });
}
pub fn buildSceBtForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceBtForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceBtForDriver_SceBtForDriver_ksceBtAvrcpReadVolume.S",
            "SceBtForDriver_SceBtForDriver_ksceBtAvrcpSendButton.S",
            "SceBtForDriver_SceBtForDriver_ksceBtAvrcpSendVolume.S",
            "SceBtForDriver_SceBtForDriver_ksceBtAvrcpSetPlayStatus.S",
            "SceBtForDriver_SceBtForDriver_ksceBtAvrcpSetTitle.S",
            "SceBtForDriver_SceBtForDriver_ksceBtDeleteRegisteredInfo.S",
            "SceBtForDriver_SceBtForDriver_ksceBtFreqAudio.S",
            "SceBtForDriver_SceBtForDriver_ksceBtGetConfiguration.S",
            "SceBtForDriver_SceBtForDriver_ksceBtGetConnectingInfo.S",
            "SceBtForDriver_SceBtForDriver_ksceBtGetDeviceName.S",
            "SceBtForDriver_SceBtForDriver_ksceBtGetInfoForTest.S",
            "SceBtForDriver_SceBtForDriver_ksceBtGetLastError.S",
            "SceBtForDriver_SceBtForDriver_ksceBtGetRegisteredInfo.S",
            "SceBtForDriver_SceBtForDriver_ksceBtGetStatusForTest.S",
            "SceBtForDriver_SceBtForDriver_ksceBtGetVidPid.S",
            "SceBtForDriver_SceBtForDriver_ksceBtHfpGetCurrentPhoneNumber.S",
            "SceBtForDriver_SceBtForDriver_ksceBtHfpRequest.S",
            "SceBtForDriver_SceBtForDriver_ksceBtHidGetReportDescriptor.S",
            "SceBtForDriver_SceBtForDriver_ksceBtHidTransfer.S",
            "SceBtForDriver_SceBtForDriver_ksceBtHidVuGetReportFeature.S",
            "SceBtForDriver_SceBtForDriver_ksceBtHidVuGetReportInput.S",
            "SceBtForDriver_SceBtForDriver_ksceBtHidVuReadEvent.S",
            "SceBtForDriver_SceBtForDriver_ksceBtHidVuRegisterCallback.S",
            "SceBtForDriver_SceBtForDriver_ksceBtHidVuSetInterruptOutput.S",
            "SceBtForDriver_SceBtForDriver_ksceBtHidVuSetReportFeature.S",
            "SceBtForDriver_SceBtForDriver_ksceBtHidVuSetReportOutput.S",
            "SceBtForDriver_SceBtForDriver_ksceBtHidVuUnregisterCallback.S",
            "SceBtForDriver_SceBtForDriver_ksceBtPushBip.S",
            "SceBtForDriver_SceBtForDriver_ksceBtPushOpp.S",
            "SceBtForDriver_SceBtForDriver_ksceBtReadEvent.S",
            "SceBtForDriver_SceBtForDriver_ksceBtRecvAudio.S",
            "SceBtForDriver_SceBtForDriver_ksceBtRecvBip.S",
            "SceBtForDriver_SceBtForDriver_ksceBtRecvOpp.S",
            "SceBtForDriver_SceBtForDriver_ksceBtRecvSpp.S",
            "SceBtForDriver_SceBtForDriver_ksceBtRegisterCallback.S",
            "SceBtForDriver_SceBtForDriver_ksceBtReplyPinCode.S",
            "SceBtForDriver_SceBtForDriver_ksceBtReplyUserConfirmation.S",
            "SceBtForDriver_SceBtForDriver_ksceBtSendAudio.S",
            "SceBtForDriver_SceBtForDriver_ksceBtSendL2capEchoRequestForTest.S",
            "SceBtForDriver_SceBtForDriver_ksceBtSendSpp.S",
            "SceBtForDriver_SceBtForDriver_ksceBtSetConfiguration.S",
            "SceBtForDriver_SceBtForDriver_ksceBtSetContentProtection.S",
            "SceBtForDriver_SceBtForDriver_ksceBtSetInquiryResultForTest.S",
            "SceBtForDriver_SceBtForDriver_ksceBtSetInquiryScan.S",
            "SceBtForDriver_SceBtForDriver_ksceBtSetL2capEchoResponseBufferForTest.S",
            "SceBtForDriver_SceBtForDriver_ksceBtSetStatusForTest.S",
            "SceBtForDriver_SceBtForDriver_ksceBtStartAudio.S",
            "SceBtForDriver_SceBtForDriver_ksceBtStartConnect.S",
            "SceBtForDriver_SceBtForDriver_ksceBtStartDisconnect.S",
            "SceBtForDriver_SceBtForDriver_ksceBtStartInquiry.S",
            "SceBtForDriver_SceBtForDriver_ksceBtStopAudio.S",
            "SceBtForDriver_SceBtForDriver_ksceBtStopInquiry.S",
            "SceBtForDriver_SceBtForDriver_ksceBtUnregisterCallback.S",
        },
    });
}
pub fn buildSceAppUtil(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAppUtil",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAppUtil_SceAppUtil_sceAppUtilAddCookieWebBrowser.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAddcontMount.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAddcontUmount.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseGameCustomData.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseIncomingDialog.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseLiveArea.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseNearGift.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseNpActivity.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseNpAppDataMessage.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseNpBasicJoinablePresence.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseNpInviteMessage.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseScreenShotNotification.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseSessionInvitation.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseTeleport.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseTriggerUtil.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppEventParseWebBrowser.S",
            "SceAppUtil_SceAppUtil_sceAppUtilAppParamGetInt.S",
            "SceAppUtil_SceAppUtil_sceAppUtilBgdlGetStatus.S",
            "SceAppUtil_SceAppUtil_sceAppUtilDrmClose.S",
            "SceAppUtil_SceAppUtil_sceAppUtilDrmOpen.S",
            "SceAppUtil_SceAppUtil_sceAppUtilInit.S",
            "SceAppUtil_SceAppUtil_sceAppUtilLaunchWebBrowser.S",
            "SceAppUtil_SceAppUtil_sceAppUtilLoadSafeMemory.S",
            "SceAppUtil_SceAppUtil_sceAppUtilMusicMount.S",
            "SceAppUtil_SceAppUtil_sceAppUtilMusicUmount.S",
            "SceAppUtil_SceAppUtil_sceAppUtilPhotoMount.S",
            "SceAppUtil_SceAppUtil_sceAppUtilPhotoUmount.S",
            "SceAppUtil_SceAppUtil_sceAppUtilPspSaveDataGetDirNameList.S",
            "SceAppUtil_SceAppUtil_sceAppUtilPspSaveDataLoad.S",
            "SceAppUtil_SceAppUtil_sceAppUtilReceiveAppEvent.S",
            "SceAppUtil_SceAppUtil_sceAppUtilResetCookieWebBrowser.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSaveDataDataRemove.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSaveDataDataSave.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSaveDataGetQuota.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSaveDataMount.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSaveDataSlotCreate.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSaveDataSlotDelete.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSaveDataSlotGetParam.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSaveDataSlotSearch.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSaveDataSlotSetParam.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSaveDataUmount.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSaveSafeMemory.S",
            "SceAppUtil_SceAppUtil_sceAppUtilShutdown.S",
            "SceAppUtil_SceAppUtil_sceAppUtilStoreBrowse.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSystemParamGetInt.S",
            "SceAppUtil_SceAppUtil_sceAppUtilSystemParamGetString.S",
            "SceAppUtil_SceAppUtilAddcontForce_sceAppUtilAddcontForceAddcontMount.S",
            "SceAppUtil_SceAppUtilBook_sceAppUtilBookMount.S",
            "SceAppUtil_SceAppUtilBook_sceAppUtilBookUmount.S",
            "SceAppUtil_SceAppUtilCache_sceAppUtilCacheGetDevInfo.S",
            "SceAppUtil_SceAppUtilCache_sceAppUtilCacheMount.S",
            "SceAppUtil_SceAppUtilCache_sceAppUtilCacheUmount.S",
            "SceAppUtil_SceAppUtilExt_sceAppUtilExtVideoMount.S",
            "SceAppUtil_SceAppUtilExt_sceAppUtilExtVideoUmount.S",
        },
    });
}
pub fn buildSceLedForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLedForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLedForDriver_SceLedForDriver_ksceLedSetMode.S",
        },
    });
}
pub fn buildScePower(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePower",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePower_ScePower_scePowerBatteryUpdateInfo.S",
            "ScePower_ScePower_scePowerCancelRequest.S",
            "ScePower_ScePower_scePowerGetArmClockFrequency.S",
            "ScePower_ScePower_scePowerGetBatteryChargingStatus.S",
            "ScePower_ScePower_scePowerGetBatteryCycleCount.S",
            "ScePower_ScePower_scePowerGetBatteryElec.S",
            "ScePower_ScePower_scePowerGetBatteryFullCapacity.S",
            "ScePower_ScePower_scePowerGetBatteryLifePercent.S",
            "ScePower_ScePower_scePowerGetBatteryLifeTime.S",
            "ScePower_ScePower_scePowerGetBatteryRemainCapacity.S",
            "ScePower_ScePower_scePowerGetBatteryRemainLevel.S",
            "ScePower_ScePower_scePowerGetBatteryRemainMaxLevel.S",
            "ScePower_ScePower_scePowerGetBatterySOH.S",
            "ScePower_ScePower_scePowerGetBatteryTemp.S",
            "ScePower_ScePower_scePowerGetBatteryVolt.S",
            "ScePower_ScePower_scePowerGetBusClockFrequency.S",
            "ScePower_ScePower_scePowerGetCaseTemp.S",
            "ScePower_ScePower_scePowerGetGpuClockFrequency.S",
            "ScePower_ScePower_scePowerGetGpuXbarClockFrequency.S",
            "ScePower_ScePower_scePowerGetUsingWireless.S",
            "ScePower_ScePower_scePowerIsBatteryCharging.S",
            "ScePower_ScePower_scePowerIsBatteryExist.S",
            "ScePower_ScePower_scePowerIsLowBattery.S",
            "ScePower_ScePower_scePowerIsLowBatteryInhibitUpdateDownload.S",
            "ScePower_ScePower_scePowerIsLowBatteryInhibitUpdateReboot.S",
            "ScePower_ScePower_scePowerIsPowerOnline.S",
            "ScePower_ScePower_scePowerIsRequest.S",
            "ScePower_ScePower_scePowerIsSuspendRequired.S",
            "ScePower_ScePower_scePowerRegisterCallback.S",
            "ScePower_ScePower_scePowerRequestColdReset.S",
            "ScePower_ScePower_scePowerRequestDisplayOff.S",
            "ScePower_ScePower_scePowerRequestDisplayOn.S",
            "ScePower_ScePower_scePowerRequestStandby.S",
            "ScePower_ScePower_scePowerRequestSuspend.S",
            "ScePower_ScePower_scePowerSetArmClockFrequency.S",
            "ScePower_ScePower_scePowerSetBusClockFrequency.S",
            "ScePower_ScePower_scePowerSetConfigurationMode.S",
            "ScePower_ScePower_scePowerSetGpuClockFrequency.S",
            "ScePower_ScePower_scePowerSetGpuXbarClockFrequency.S",
            "ScePower_ScePower_scePowerSetIdleTimerCount.S",
            "ScePower_ScePower_scePowerSetUsingWireless.S",
            "ScePower_ScePower_scePowerUnregisterCallback.S",
        },
    });
}
pub fn buildScePowerForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePowerForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePowerForDriver_ScePowerForDriver_kscePowerBatteryDisableUsbCharging.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerBatteryEnableUsbCharging.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerBatteryForbidCharging.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerBatteryPermitCharging.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerBatterySetUsbStatus.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerBatteryStopUsbCharging.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerBatteryUpdateInfo.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerCancelRequest.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerEncodeUBattery.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetArmClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetArmClockFrequencyProc.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBatteryChargingStatus.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBatteryCycleCount.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBatteryElec.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBatteryFullCapacity.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBatteryLifePercent.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBatteryLifeTime.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBatteryRemainCapacity.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBatteryRemainLevel.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBatteryRemainMaxLevel.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBatterySOH.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBatteryTemp.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBatteryVolt.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBusClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetBusClockFrequencyProc.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetCameraBusClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetCaseTemp.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetCompatClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetDisplayMaxBrightness.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetDmac5ClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetGpuClockFrequencyInternal.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetGpuClockFrequencyProc.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetGpuXbarClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetGpuXbarClockFrequencyProc.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetIdleTimer.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetPowerSwMode.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetResumeCount.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetSysClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetVeneziaClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetVipClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerGetWakeupFactor.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerIsBatteryCharging.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerIsBatteryExist.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerIsLowBattery.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerIsPowerOnline.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerIsRequest.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerIsSuspendRequired.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerRegisterCallback.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerRequestColdReset.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerRequestDisplayOff.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerRequestDisplayOn.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerRequestHibernate.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerRequestResume.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerRequestShutdown.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerRequestSoftReset.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerRequestStandby.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerRequestSuspend.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetArmClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetArmClockFrequencyProc.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetBatteryFakeStatus.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetBusClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetBusClockFrequencyProc.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetCallbackState.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetCameraBusClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetCompatClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetDisplayBrightness.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetDisplayMaxBrightness.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetDmac5ClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetGpuClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetGpuClockFrequencyInternal.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetGpuClockFrequencyProc.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetGpuXbarClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetGpuXbarClockFrequencyProc.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetIdleCallback.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetIdleTimer.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetPowerSwMode.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetPowerSwMode2.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetProcessIdleCallback.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetPsButtonPushTime.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetStandbyButtonPushTime.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetSysClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetVeneziaClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerSetVipClockFrequency.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerTick.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerUnregisterCallback.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerWlanActivate.S",
            "ScePowerForDriver_ScePowerForDriver_kscePowerWlanDeactivate.S",
        },
    });
}
pub fn buildSceSystimerForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSystimerForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSystimerForDriver_SceSystimerForDriver_ksceKernelSysTimerAlloc.S",
            "SceSystimerForDriver_SceSystimerForDriver_ksceKernelSysTimerFree.S",
            "SceSystimerForDriver_SceSystimerForDriver_ksceKernelSysTimerGetCount.S",
            "SceSystimerForDriver_SceSystimerForDriver_ksceKernelSysTimerResetCount.S",
            "SceSystimerForDriver_SceSystimerForDriver_ksceKernelSysTimerSetClockSource.S",
            "SceSystimerForDriver_SceSystimerForDriver_ksceKernelSysTimerSetCount.S",
            "SceSystimerForDriver_SceSystimerForDriver_ksceKernelSysTimerSetHandler.S",
            "SceSystimerForDriver_SceSystimerForDriver_ksceKernelSysTimerSetInterval.S",
            "SceSystimerForDriver_SceSystimerForDriver_ksceKernelSysTimerStartCount.S",
            "SceSystimerForDriver_SceSystimerForDriver_ksceKernelSysTimerStopCount.S",
        },
    });
}
pub fn buildSceLibMtp(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLibMtp",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLibMtp_SceLibMtp_sceMtpBeginCheckSameObjectExist.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginCreateHostDir.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginCreateHostFile.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginDeleteHostDir.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginDeleteObject.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginExportObjectWithCheck.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginGetHostStorageSize.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginGetNpAccountInfo.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginGetNumOfObject.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginGetObjectMetadata.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginGetObjectStatus2.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginGetObjectThumbnail.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginGetTotalObjectSize.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginHandover.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginHttpGetDataWithUrl.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginHttpGetPropertyWithUrl.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginImportObject.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginMoveHostDir.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginNpDrmActivate.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginNpDrmDeactivate.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginNpDrmGetLicense.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginNpDrmGetRtc.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginReadObjectWithOffset.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginResumeExportObject.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginResumeImportObject.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginRpcNetOperationRecv.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginRpcNetOperationSend.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginSearchObject.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginSetSystemSetting.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginSpecifiedObjectMetadata.S",
            "SceLibMtp_SceLibMtp_sceMtpBeginWriteObjectWithOffset.S",
            "SceLibMtp_SceLibMtp_sceMtpCheckContextValid.S",
            "SceLibMtp_SceLibMtp_sceMtpEnd.S",
            "SceLibMtp_SceLibMtp_sceMtpEndImportObject.S",
            "SceLibMtp_SceLibMtp_sceMtpGetBgTaskInfo.S",
            "SceLibMtp_SceLibMtp_sceMtpGetCurrentInterface.S",
            "SceLibMtp_SceLibMtp_sceMtpGetHostInfo.S",
            "SceLibMtp_SceLibMtp_sceMtpInit.S",
            "SceLibMtp_SceLibMtp_sceMtpPauseExportObject.S",
            "SceLibMtp_SceLibMtp_sceMtpReset.S",
            "SceLibMtp_SceLibMtp_sceMtpResume.S",
            "SceLibMtp_SceLibMtp_sceMtpSendData.S",
            "SceLibMtp_SceLibMtp_sceMtpSetFinishCallback.S",
            "SceLibMtp_SceLibMtp_sceMtpStart.S",
            "SceLibMtp_SceLibMtp_sceMtpStop.S",
            "SceLibMtp_SceLibMtp_sceMtpSuspend.S",
            "SceLibMtp_SceLibMtp_sceMtpTerminateExecution.S",
        },
    });
}
pub fn buildSceNetAdhocMatching(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNetAdhocMatching",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingAbortSendData.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingCancelTarget.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingCancelTargetWithOpt.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingCreate.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingDelete.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingGetHelloOpt.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingGetMembers.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingInit.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingSelectTarget.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingSendData.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingSetHelloOpt.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingStart.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingStop.S",
            "SceNetAdhocMatching_SceNetAdhocMatching_sceNetAdhocMatchingTerm.S",
        },
    });
}
pub fn buildSceNpDrm(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpDrm",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpDrm_SceNpDrm__sceNpDrmCheckActData.S",
            "SceNpDrm_SceNpDrm__sceNpDrmCheckDrmReset.S",
            "SceNpDrm_SceNpDrm__sceNpDrmGetFixedRifName.S",
            "SceNpDrm_SceNpDrm__sceNpDrmGetRifInfo.S",
            "SceNpDrm_SceNpDrm__sceNpDrmGetRifName.S",
            "SceNpDrm_SceNpDrm__sceNpDrmGetRifNameForInstall.S",
            "SceNpDrm_SceNpDrm__sceNpDrmPresetRifProvisionalFlag.S",
            "SceNpDrm_SceNpDrm__sceNpDrmRemoveActData.S",
            "SceNpDrm_SceNpDrmPackage__sceNpDrmPackageCheck.S",
            "SceNpDrm_SceNpDrmPackage__sceNpDrmPackageDecrypt.S",
            "SceNpDrm_SceNpDrmPackage__sceNpDrmPackageInstallFinished.S",
            "SceNpDrm_SceNpDrmPackage__sceNpDrmPackageInstallStarted.S",
            "SceNpDrm_SceNpDrmPackage__sceNpDrmPackageTransform.S",
            "SceNpDrm_SceNpDrmPackage__sceNpDrmPackageUninstallFinished.S",
            "SceNpDrm_SceNpDrmPackage__sceNpDrmPackageUninstallStarted.S",
            "SceNpDrm_SceNpDrmPackage__sceNpDrmSaveDataFormatFinished.S",
            "SceNpDrm_SceNpDrmPackage__sceNpDrmSaveDataFormatStarted.S",
            "SceNpDrm_SceNpDrmPackage__sceNpDrmSaveDataInstallFinished.S",
            "SceNpDrm_SceNpDrmPackage__sceNpDrmSaveDataInstallStarted.S",
            "SceNpDrm_SceNpDrmPackage_sceNpDrmPackageInstallOngoing.S",
            "SceNpDrm_SceNpDrmPackage_sceNpDrmPackageIsGameExist.S",
            "SceNpDrm_SceNpDrmPackage_sceNpDrmPackageUninstallOngoing.S",
            "SceNpDrm_SceNpDrmPackage_sceNpDrmSaveDataFormatOngoing.S",
            "SceNpDrm_SceNpDrmPackage_sceNpDrmSaveDataInstallOngoing.S",
            "SceNpDrm_ScePsmDrm_scePsmDrmGetActInfo.S",
            "SceNpDrm_ScePsmDrm_scePsmDrmGetRifInfo.S",
            "SceNpDrm_ScePsmDrm_scePsmDrmGetRifKey.S",
            "SceNpDrm_ScePsmDrm_scePsmDrmGetRifName.S",
            "SceNpDrm_ScePsmDrm_scePsmDrmGetRifNameForInstall.S",
            "SceNpDrm_ScePsmDrm_scePsmDrmRemoveActData.S",
        },
    });
}
pub fn buildSceNpDrmForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpDrmForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmCheckActData.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmEbootSigConvert.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmEbootSigGenMultiDisc.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmEbootSigGenPs1.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmEbootSigGenPsp.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmEbootSigVerify.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmGetFixedRifName.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmGetLegacyDocKey.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmGetRifInfo.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmGetRifName.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmGetRifNameForInstall.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmGetRifPspKey.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmGetRifVitaKey.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmIsLooseAccountBind.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmPackageSetGameExist.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmPresetRifProvisionalFlag.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmPspEbootSigGen.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmPspEbootVerify.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmReadActData.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmRemoveActData.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmUpdateAccountId.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmUpdateActData.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmUpdateDebugSettings.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmVerifyRif.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmVerifyRifFull.S",
            "SceNpDrmForDriver_SceNpDrmForDriver_ksceNpDrmWriteActData.S",
        },
    });
}
pub fn buildScePsmDrmForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePsmDrmForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePsmDrmForDriver_ScePsmDrmForDriver_kscePsmDrmGetActInfo.S",
            "ScePsmDrmForDriver_ScePsmDrmForDriver_kscePsmDrmGetRifInfo.S",
            "ScePsmDrmForDriver_ScePsmDrmForDriver_kscePsmDrmGetRifKey.S",
            "ScePsmDrmForDriver_ScePsmDrmForDriver_kscePsmDrmReadActData.S",
            "ScePsmDrmForDriver_ScePsmDrmForDriver_kscePsmDrmRemoveActData.S",
            "ScePsmDrmForDriver_ScePsmDrmForDriver_kscePsmDrmWriteActData.S",
        },
    });
}
pub fn buildSceScreenShot(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceScreenShot",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceScreenShot_SceScreenShot_sceScreenShotCapture.S",
            "SceScreenShot_SceScreenShot_sceScreenShotDisable.S",
            "SceScreenShot_SceScreenShot_sceScreenShotDisableNotification.S",
            "SceScreenShot_SceScreenShot_sceScreenShotEnable.S",
            "SceScreenShot_SceScreenShot_sceScreenShotEnableNotification.S",
            "SceScreenShot_SceScreenShot_sceScreenShotGetParam.S",
            "SceScreenShot_SceScreenShot_sceScreenShotSetOverlayImage.S",
            "SceScreenShot_SceScreenShot_sceScreenShotSetParam.S",
        },
    });
}
pub fn buildSceRegistryMgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceRegistryMgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceRegistryMgr_SceRegMgr_sceRegMgrAddRegistryCallback.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrDbBackup.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrDbRestore.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrGetInitVals.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrGetKeyBin.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrGetKeyInt.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrGetKeyStr.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrGetKeys.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrGetKeysInfo.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrGetRegVersion.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrIsBlueScreen.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrRegisterCallback.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrRegisterDrvErrCallback.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrResetRegistryLv.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrSetKeyBin.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrSetKeyInt.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrSetKeyStr.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrSetKeys.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrStartCallback.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrStopCallback.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrUnregisterCallback.S",
            "SceRegistryMgr_SceRegMgr_sceRegMgrUnregisterDrvErrCallback.S",
            "SceRegistryMgr_SceRegMgrForGame_sceRegMgrSystemIsBlueScreen.S",
            "SceRegistryMgr_SceRegMgrForGame_sceRegMgrSystemParamGetBin.S",
            "SceRegistryMgr_SceRegMgrForGame_sceRegMgrSystemParamGetInt.S",
            "SceRegistryMgr_SceRegMgrForGame_sceRegMgrSystemParamGetStr.S",
            "SceRegistryMgr_SceRegMgrForGame_sceRegMgrSystemParamSetBin.S",
            "SceRegistryMgr_SceRegMgrForGame_sceRegMgrSystemParamSetInt.S",
            "SceRegistryMgr_SceRegMgrForGame_sceRegMgrSystemParamSetStr.S",
            "SceRegistryMgr_SceRegMgrForSDK_sceRegMgrUtilityGetBin.S",
            "SceRegistryMgr_SceRegMgrForSDK_sceRegMgrUtilityGetInt.S",
            "SceRegistryMgr_SceRegMgrForSDK_sceRegMgrUtilityGetStr.S",
            "SceRegistryMgr_SceRegMgrForSDK_sceRegMgrUtilitySetBin.S",
            "SceRegistryMgr_SceRegMgrForSDK_sceRegMgrUtilitySetInt.S",
            "SceRegistryMgr_SceRegMgrForSDK_sceRegMgrUtilitySetStr.S",
            "SceRegistryMgr_SceRegMgrService_sceRegMgrSrvCnvRegionInt.S",
            "SceRegistryMgr_SceRegMgrService_sceRegMgrSrvCnvRegionPsCode.S",
            "SceRegistryMgr_SceRegMgrService_sceRegMgrSrvCnvRegionStr.S",
            "SceRegistryMgr_SceRegMgrService_sceRegMgrSrvGetRegion.S",
            "SceRegistryMgr_SceRegMgrService_sceRegMgrSrvGetRegionStr.S",
        },
    });
}
pub fn buildSceRegMgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceRegMgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrAddRegistryCallback.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrDbBackup.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrDbRestore.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrGetInitVals.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrGetKeyBin.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrGetKeyInt.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrGetKeyStr.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrGetKeys.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrGetKeysInfo.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrGetRegVersion.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrIsBlueScreen.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrRegisterCallback.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrRegisterDrvErrCallback.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrResetRegistryLv.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrSetKeyBin.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrSetKeyInt.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrSetKeyStr.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrSetKeys.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrStartCallback.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrStopCallback.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrSystemParamGetBin.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrSystemParamGetInt.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrSystemParamGetStr.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrUnregisterCallback.S",
            "SceRegMgrForDriver_SceRegMgrForDriver_ksceRegMgrUnregisterDrvErrCallback.S",
        },
    });
}
pub fn buildSceRegMgrServiceForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceRegMgrServiceForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceRegMgrServiceForDriver_SceRegMgrServiceForDriver_ksceRegMgrSrvCnvRegionInt.S",
            "SceRegMgrServiceForDriver_SceRegMgrServiceForDriver_ksceRegMgrSrvCnvRegionPsCode.S",
            "SceRegMgrServiceForDriver_SceRegMgrServiceForDriver_ksceRegMgrSrvCnvRegionStr.S",
            "SceRegMgrServiceForDriver_SceRegMgrServiceForDriver_ksceRegMgrSrvGetRegion.S",
            "SceRegMgrServiceForDriver_SceRegMgrServiceForDriver_ksceRegMgrSrvGetRegionStr.S",
        },
    });
}
pub fn buildSceNgs(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNgs",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNgs_SceNgsInternal_sceNgsModuleCheckParamsInRangeInternal.S",
            "SceNgs_SceNgsInternal_sceNgsModuleGetNumPresetsInternal.S",
            "SceNgs_SceNgsInternal_sceNgsModuleGetPresetInternal.S",
            "SceNgs_SceNgsInternal_sceNgsPatchCreateRoutingInternal.S",
            "SceNgs_SceNgsInternal_sceNgsPatchRemoveRoutingInternal.S",
            "SceNgs_SceNgsInternal_sceNgsRackGetRequiredMemorySizeInternal.S",
            "SceNgs_SceNgsInternal_sceNgsRackGetVoiceHandleInternal.S",
            "SceNgs_SceNgsInternal_sceNgsRackInitInternal.S",
            "SceNgs_SceNgsInternal_sceNgsRackReleaseInternal.S",
            "SceNgs_SceNgsInternal_sceNgsRackSetParamErrorCallbackInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSulphaGetInfoInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSulphaGetModuleListInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSulphaGetSynthUpdateCallbackInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSulphaQueryModuleInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSulphaSetSynthUpdateCallbackInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSystemGetCallbackListInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSystemGetRequiredMemorySizeInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSystemGetSysHandleFromRack.S",
            "SceNgs_SceNgsInternal_sceNgsSystemInitInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSystemIsFixForBugzilla89940.S",
            "SceNgs_SceNgsInternal_sceNgsSystemLockInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSystemPullDataInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSystemPushDataInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSystemReleaseInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSystemSetFlagsInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSystemSetParamErrorCallbackInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSystemUnlockInternal.S",
            "SceNgs_SceNgsInternal_sceNgsSystemUpdateInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceBypassModuleInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceClearDirtyFlagInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetAtrac9VoiceInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetCompressorBussInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetCompressorSideChainBussInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetDelayBussInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetDistortionBussInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetEnvelopeBussInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetEqBussInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetMasterBussInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetMixerBussInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetPauserBussInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetPitchshiftBussInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetReverbBussInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetSasEmuVoiceInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetScreamVoiceAT9Internal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetScreamVoiceInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetSimpleAtrac9VoiceInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetSimpleVoiceInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefGetTemplate1Internal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceDefinitionGetPresetInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceGetModuleBypassInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceGetOutputPatchInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceGetParamsOutOfRangeBufferedInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceInitInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceKeyOffInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceKillInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoicePauseInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoicePlayInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceResumeInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceSetAllBypassesInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceSetFinishedCallbackInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceSetModuleCallbackInternal.S",
            "SceNgs_SceNgsInternal_sceNgsVoiceSetPresetInternal.S",
        },
    });
}
pub fn buildSceAppMgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAppMgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrAcInstGetAcdirParam.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrAppDataMount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrAppDataMountById.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrAppMount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrAppParamGetInt.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrAppUmount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrBgdlSetQueueStatus.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrCheckContentInstallPeriod.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrCheckPfsMounted.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrCloudDataClearMcId.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrCloudDataCreateHeader.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrCloudDataDstCreateMount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrCloudDataGetMcId.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrCloudDataSetMcId.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrCloudDataSetupKey.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrCloudDataSrcMount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrCloudDataVerifyHeader.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrDebugSettingNotifyUpdate.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrDestroyOtherAppByPid.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrDrmClose.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrDrmOpen.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrFakeSaveDataCreateMount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrGameDataMount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrGetBootParam.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrGetPfsProcessStatus.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrGetSystemDataFile.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrIsExclusiveProcessRunning.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrKillProcess.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrLaunchAppByPath.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrLoadSafeMemory.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrLocalBackupGetOfflineId.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrLocalBackupVerifyOfflineHeader.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrMmsMount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrPhotoMount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrRegisterPath.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataGetQuota.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataLocalBackupTargetGetList.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataLocalBackupTargetRemoveItem.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataMount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataNotifyBackupFinished.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataSlotCreate.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataSlotDelete.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataSlotGetParam.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataSlotGetStatus.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataSlotInit.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataSlotSetParam.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataSlotSetStatus.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveDataUmount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSaveSafeMemory.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrSystemParamDateTimeSetConf.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrTrophyMount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrUmount.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrUpdateRifInfo.S",
            "SceAppMgrForDriver_SceAppMgrForDriver_ksceAppMgrWorkDirMount.S",
        },
    });
}
pub fn buildSceRazorCapture(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceRazorCapture",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceRazorCapture_SceRazorCapture_sceRazorCaptureIsInProgress.S",
            "SceRazorCapture_SceRazorCapture_sceRazorCaptureSetTrigger.S",
            "SceRazorCapture_SceRazorCapture_sceRazorCaptureSetTriggerNextFrame.S",
            "SceRazorCapture_SceRazorCapture_sceRazorGpuCaptureEnableSalvage.S",
            "SceRazorCapture_SceRazorCapture_sceRazorGpuCaptureIsInProgress.S",
            "SceRazorCapture_SceRazorCapture_sceRazorGpuCaptureSetCaptureAllMemory.S",
            "SceRazorCapture_SceRazorCapture_sceRazorGpuCaptureSetCaptureBeforeKick.S",
            "SceRazorCapture_SceRazorCapture_sceRazorGpuCaptureSetTrigger.S",
            "SceRazorCapture_SceRazorCapture_sceRazorGpuCaptureSetTriggerNextFrame.S",
            "SceRazorCapture_SceRazorCapture_sceRazorGpuCaptureStartSalvageMode.S",
        },
    });
}
pub fn buildSceAvPlayer(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAvPlayer",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAvPlayer_SceAvPlayer_sceAvPlayerAddSource.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerClose.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerCurrentTime.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerDisableStream.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerEnableStream.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerGetAudioData.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerGetStreamInfo.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerGetVideoData.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerGetVideoDataEx.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerInit.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerIsActive.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerJumpToTime.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerPause.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerPostInit.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerResume.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerSetLooping.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerSetTrickSpeed.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerStart.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerStop.S",
            "SceAvPlayer_SceAvPlayer_sceAvPlayerStreamCount.S",
        },
    });
}
pub fn buildSceKernelThreadMgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceKernelThreadMgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceKernelThreadMgr_SceThreadmgr___sceKernelCreateLwMutex.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCancelEvent.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCancelEventFlag.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCancelEventWithSetPattern.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCancelMsgPipe.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCancelMutex.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCancelRWLock.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCancelSema.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCancelTimer.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCreateCond.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCreateEventFlag.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCreateLwCond.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCreateMsgPipeWithLR.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCreateMutex.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCreateRWLock.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCreateSema.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCreateSema_16XX.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCreateSimpleEvent.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelCreateTimer.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelDeleteLwCond.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelDeleteLwMutex.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelExitCallback.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetCallbackInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetCondInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetEventFlagInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetEventInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetEventPattern.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetLwCondInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetLwCondInfoById.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetLwMutexInfoById.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetMsgPipeInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetMutexInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetRWLockInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetSemaInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetSystemInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetSystemTime.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetThreadContextForVM.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetThreadCpuAffinityMask.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetThreadEventInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetThreadExitStatus.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetThreadInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetThreadRunStatus.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetTimerBase.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetTimerEventRemainingTime.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetTimerInfo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelGetTimerTime.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelLockLwMutex.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelLockMutex.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelLockMutexCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelLockReadRWLock.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelLockReadRWLockCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelLockWriteRWLock.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelLockWriteRWLockCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelPMonThreadGetCounter.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelPollEvent.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelPollEventFlag.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelPulseEventWithNotifyCallback.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelReceiveMsgPipeVector.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelReceiveMsgPipeVectorCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelRegisterThreadEventHandler.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelSendMsgPipeVector.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelSendMsgPipeVectorCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelSetEventWithNotifyCallback.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelSetThreadContextForVM.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelSetTimerEvent.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelSetTimerTime.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelSignalLwCond.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelSignalLwCondAll.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelSignalLwCondTo.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelStartThread.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelTryReceiveMsgPipeVector.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelTrySendMsgPipeVector.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelUnlockLwMutex.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitCond.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitCondCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitEvent.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitEventCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitEventFlag.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitEventFlagCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitException.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitExceptionCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitLwCond.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitLwCondCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitMultipleEvents.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitMultipleEventsCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitSema.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitSemaCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitSignal.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitSignalCB.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitThreadEnd.S",
            "SceKernelThreadMgr_SceThreadmgr__sceKernelWaitThreadEndCB.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCancelCallback.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelChangeActiveCpuMask.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelChangeThreadCpuAffinityMask.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelChangeThreadPriority.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelChangeThreadPriority2.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelChangeThreadVfpException.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCheckCallback.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCheckWaitableStatus.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelClearEvent.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelClearEventFlag.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCloseCond.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCloseEventFlag.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCloseMsgPipe.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCloseMutex.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCloseMutex_089.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCloseRWLock.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCloseSema.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCloseSimpleEvent.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCloseTimer.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCreateCallback.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelCreateThreadForUser.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDelayThread.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDelayThread200.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDelayThreadCB.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDelayThreadCB200.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDeleteCallback.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDeleteCond.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDeleteEventFlag.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDeleteMsgPipe.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDeleteMutex.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDeleteRWLock.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDeleteSema.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDeleteSimpleEvent.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDeleteThread.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelDeleteTimer.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelExitDeleteThread.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelGetCallbackCount.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelGetMsgPipeCreatorId.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelGetProcessId.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelGetSystemTimeWide.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelGetThreadCpuAffinityMask.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelGetThreadStackFreeSize.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelGetThreadTLSAddr.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelGetThreadmgrUIDClass.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelGetTimerBaseWide.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelGetTimerTimeWide.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelNotifyCallback.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelOpenCond.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelOpenEventFlag.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelOpenMsgPipe.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelOpenMutex.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelOpenMutex_089.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelOpenRWLock.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelOpenSema.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelOpenSimpleEvent.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelOpenTimer.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelPollSema.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelPulseEvent.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelRegisterCallbackToEvent.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelResumeThreadForVM.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelSendSignal.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelSetEvent.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelSetEventFlag.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelSetTimerTimeWide.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelSignalCond.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelSignalCondAll.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelSignalCondTo.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelSignalSema.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelStartTimer.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelStopTimer.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelSuspendThreadForVM.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelTryLockMutex.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelTryLockReadRWLock.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelTryLockWriteRWLock.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelUnlockMutex.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelUnlockReadRWLock.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelUnlockWriteRWLock.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelUnregisterCallbackFromEvent.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelUnregisterCallbackFromEventAll.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelUnregisterThreadEventHandler.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelWaitThreadEndCB_089.S",
            "SceKernelThreadMgr_SceThreadmgr_sceKernelWaitThreadEnd_089.S",
            "SceKernelThreadMgr_SceThreadmgrCoredumpTime_sceKernelExitThread.S",
        },
    });
}
pub fn buildSceThreadmgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceThreadmgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCancelCallback.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCancelMsgPipe.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCancelMutex.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelChangeCurrentThreadAttr.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelChangeThreadCpuAffinityMask.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelChangeThreadPriority.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelChangeThreadSuspendStatus.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelChangeThreadVfpException.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCheckCallback.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCheckWaitableStatus.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelClearEvent.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelClearEventFlag.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCreateCallback.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCreateCond.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCreateEventFlag.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCreateMsgPipe.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCreateMutex.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCreateSema.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCreateSimpleEvent.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelCreateThread.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelDebugResumeThread.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelDebugSuspendThread.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelDelayThread.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelDelayThreadCB.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelDeleteCallback.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelDeleteCond.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelDeleteEventFlag.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelDeleteMsgPipe.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelDeleteMutex.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelDeleteSema.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelDeleteThread.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelEnqueueWorkQueue.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelExitDeleteThread.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelExitThread.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelFinalizeFastMutex.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetCallbackCount.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetEventFlagInfo.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetFastMutexInfo.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetLwCondInfo.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetLwMutexInfo.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetMsgPipeInfo.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetMutexInfo.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetProcessId.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetProcessIdFromTLS.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetSemaInfo.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetSystemTimeLow.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetSystemTimeWide.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetTLSAddr.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetThreadCpuAffinityMask.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetThreadCpuRegisters.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetThreadCurrentPriority.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetThreadId.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetThreadIdList.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetThreadInfo.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetThreadInfoForDebugger.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetThreadStackFreeSize.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetThreadTLSAddr.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetThreadmgrUIDClass.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetTimerBaseWide.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetTimerTimeWide.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetUserThreadId.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelGetVfpRegisterForDebugger.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelInitializeFastMutex.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelIsThreadDebugSuspended.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelLockFastMutex.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelLockMutex.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelLockMutexCB_089.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelNotifyCallback.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelPollEventFlag.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelPollSema.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelPulseEvent.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelPulseEventWithNotifyCallback.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelReceiveMsgPipeVector.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelReceiveMsgPipeVectorCB.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelRegisterCallbackToEvent.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelRegisterTimer.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelRunWithStack.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelSendMsgPipeVector.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelSetEvent.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelSetEventFlag.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelSetPermission.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelSetProcessIdToTLS.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelSetTimerTimeWide.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelSignalCond.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelSignalCondAll.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelSignalCondTo.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelSignalSema.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelStartThread.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelStartTimer.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelStopTimer.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelTryLockFastMutex.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelTryLockMutex.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelTryLockReadRWLock.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelTryLockWriteRWLock.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelTryReceiveMsgPipeVector.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelTrySendMsgPipeVector.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelUnlockFastMutex.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelUnlockMutex.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelUnlockReadRWLock.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelUnlockWriteRWLock.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelUnregisterCallbackFromEvent.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelUnregisterCallbackFromEventAll.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelUnregisterThreadEventHandler.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelWaitCond.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelWaitEvent.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelWaitEventCB.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelWaitEventFlag.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelWaitEventFlagCB.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelWaitSema.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelWaitThreadEnd.S",
            "SceThreadmgrForDriver_SceThreadmgrForDriver_ksceKernelWaitThreadEndCB.S",
        },
    });
}
pub fn buildSceNpMatching2(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpMatching2",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpMatching2_SceNpMatching2_sceNpMatching2AbortContextStart.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2AbortRequest.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2ContextStart.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2ContextStop.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2CreateContext.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2CreateJoinRoom.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2DestroyContext.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GetLobbyInfoList.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GetMemoryInfo.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GetRoomDataExternalList.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GetRoomDataInternal.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GetRoomMemberDataExternalList.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GetRoomMemberDataInternal.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GetRoomMemberIdListLocal.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GetRoomPasswordLocal.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GetServerLocal.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GetSignalingOptParamLocal.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GetUserInfoList.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GetWorldInfoList.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2GrantRoomOwner.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2Init.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2JoinLobby.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2JoinRoom.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2KickoutRoomMember.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2LeaveLobby.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2LeaveRoom.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2RegisterContextCallback.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2RegisterLobbyEventCallback.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2RegisterLobbyMessageCallback.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2RegisterRoomEventCallback.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2RegisterRoomMessageCallback.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2RegisterSignalingCallback.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SearchRoom.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SendLobbyChatMessage.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SendRoomChatMessage.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SendRoomMessage.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SetDefaultRequestOptParam.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SetRoomDataExternal.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SetRoomDataInternal.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SetRoomMemberDataInternal.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SetSignalingOptParam.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SetUserInfo.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SignalingCancelPeerNetInfo.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SignalingGetConnectionInfo.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SignalingGetConnectionStatus.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SignalingGetLocalNetInfo.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SignalingGetPeerNetInfo.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SignalingGetPeerNetInfoResult.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2SignalingGetPingInfo.S",
            "SceNpMatching2_SceNpMatching2_sceNpMatching2Term.S",
        },
    });
}
pub fn buildSceNpTrophy(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpTrophy",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpTrophy_SceNpTrophy_sceNpTrophyAbortHandle.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyCreateContext.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyCreateHandle.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyDestroyContext.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyDestroyHandle.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyGetGameIcon.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyGetGameInfo.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyGetGroupIcon.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyGetGroupInfo.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyGetTrophyIcon.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyGetTrophyInfo.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyGetTrophyUnlockState.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyInit.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyTerm.S",
            "SceNpTrophy_SceNpTrophy_sceNpTrophyUnlockTrophy.S",
        },
    });
}
pub fn buildSceClipboard(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceClipboard",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceClipboard_SceClipboard_sceClipboardGetText.S",
            "SceClipboard_SceClipboard_sceClipboardSetText.S",
        },
    });
}
pub fn buildSceUsbPspcm(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUsbPspcm",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUsbPspcm_SceUsbPspcm_sceUsbPspcmClose.S",
            "SceUsbPspcm_SceUsbPspcm_sceUsbPspcmDevctl.S",
            "SceUsbPspcm_SceUsbPspcm_sceUsbPspcmIoctlCancelWaitData.S",
            "SceUsbPspcm_SceUsbPspcm_sceUsbPspcmIoctlPollData.S",
            "SceUsbPspcm_SceUsbPspcm_sceUsbPspcmIoctlReset.S",
            "SceUsbPspcm_SceUsbPspcm_sceUsbPspcmIoctlWaitData.S",
            "SceUsbPspcm_SceUsbPspcm_sceUsbPspcmOpen.S",
            "SceUsbPspcm_SceUsbPspcm_sceUsbPspcmRead.S",
            "SceUsbPspcm_SceUsbPspcm_sceUsbPspcmSetTitle.S",
            "SceUsbPspcm_SceUsbPspcm_sceUsbPspcmStartDevice.S",
            "SceUsbPspcm_SceUsbPspcm_sceUsbPspcmStopDevice.S",
            "SceUsbPspcm_SceUsbPspcm_sceUsbPspcmWrite.S",
        },
    });
}
pub fn buildSceWlanBt(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceWlanBt",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceWlanBt_SceWlan_sceWlanGetConfiguration.S",
            "SceWlanBt_SceWlan_sceWlanGetWakeOnTargetProcess.S",
            "SceWlanBt_SceWlan_sceWlanRegisterCallback.S",
            "SceWlanBt_SceWlan_sceWlanSetConfiguration.S",
            "SceWlanBt_SceWlan_sceWlanUnregisterCallback.S",
        },
    });
}
pub fn buildSceWlanBtForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceWlanBtForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceWlanBtForDriver_SceWlanBtForDriver_ksceWlanBtAttachMonitor.S",
            "SceWlanBtForDriver_SceWlanBtForDriver_ksceWlanBtDetachMonitor.S",
            "SceWlanBtForDriver_SceWlanBtForDriver_ksceWlanBtGetConfiguration.S",
            "SceWlanBtForDriver_SceWlanBtForDriver_ksceWlanBtSetConfiguration.S",
        },
    });
}
pub fn buildSceShaccCg(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceShaccCg",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceShaccCg_SceShaccCg_sceShaccCgCompileProgram.S",
            "SceShaccCg_SceShaccCg_sceShaccCgDestroyCompileOutput.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetArrayParameter.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetArraySize.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetFirstParameter.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetFirstStructParameter.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetFirstUniformBlockParameter.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetNextParameter.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterBaseType.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterBufferIndex.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterByName.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterClass.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterColumns.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterDirection.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterMemoryLayout.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterName.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterResourceIndex.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterRows.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterSemantic.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterUserType.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterVariability.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetParameterVectorWidth.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetRowParameter.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetSamplerQueryFormatPrecision.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetSamplerQueryFormatPrecisionCount.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetSamplerQueryFormatWidth.S",
            "SceShaccCg_SceShaccCg_sceShaccCgGetVersionString.S",
            "SceShaccCg_SceShaccCg_sceShaccCgInitializeCallbackList.S",
            "SceShaccCg_SceShaccCg_sceShaccCgInitializeCompileOptions.S",
            "SceShaccCg_SceShaccCg_sceShaccCgIsParameterReferenced.S",
            "SceShaccCg_SceShaccCg_sceShaccCgIsParameterRegFormat.S",
            "SceShaccCg_SceShaccCg_sceShaccCgReleaseCompiler.S",
            "SceShaccCg_SceShaccCg_sceShaccCgSetDefaultAllocator.S",
        },
    });
}
pub fn buildScePaf(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePaf",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePaf_ScePafMisc_scePafCreateHeap.S",
            "ScePaf_ScePafMisc_scePafDeleteHeap.S",
            "ScePaf_ScePafMisc_scePafFreeWithContext.S",
            "ScePaf_ScePafMisc_scePafGetCurrentClockLocalTime.S",
            "ScePaf_ScePafMisc_scePafMallocAlignWithContext.S",
            "ScePaf_ScePafMisc_scePafMallocWithContext.S",
            "ScePaf_ScePafMisc_scePafReallocWithContext.S",
            "ScePaf_ScePafMisc_scePafSha1Init.S",
            "ScePaf_ScePafMisc_scePafSha1Result.S",
            "ScePaf_ScePafMisc_scePafSha1Update.S",
            "ScePaf_ScePafMisc_sce_paf_misc_does_file_exist.S",
            "ScePaf_ScePafResource_scePafResourceGetAttribute.S",
            "ScePaf_ScePafResource_scePafResourceGetAttributeChar.S",
            "ScePaf_ScePafResource_scePafResourceGetAttributeData.S",
            "ScePaf_ScePafResource_scePafResourceGetAttributeFloat.S",
            "ScePaf_ScePafResource_scePafResourceGetAttributeFloatArray.S",
            "ScePaf_ScePafResource_scePafResourceGetAttributeIdInt.S",
            "ScePaf_ScePafResource_scePafResourceGetAttributeIdIntLpb.S",
            "ScePaf_ScePafResource_scePafResourceGetAttributeIdStr.S",
            "ScePaf_ScePafResource_scePafResourceGetAttributeIdStrLpb.S",
            "ScePaf_ScePafResource_scePafResourceGetAttributeInteger.S",
            "ScePaf_ScePafResource_scePafResourceGetAttributeIntegerArray.S",
            "ScePaf_ScePafResource_scePafResourceGetAttributeString.S",
            "ScePaf_ScePafResource_scePafResourceGetAttributeStyleId.S",
            "ScePaf_ScePafResource_scePafResourceGetChar.S",
            "ScePaf_ScePafResource_scePafResourceGetData.S",
            "ScePaf_ScePafResource_scePafResourceGetFloat.S",
            "ScePaf_ScePafResource_scePafResourceGetFloatArray.S",
            "ScePaf_ScePafResource_scePafResourceGetIdInt.S",
            "ScePaf_ScePafResource_scePafResourceGetIdIntLpb.S",
            "ScePaf_ScePafResource_scePafResourceGetIdStr.S",
            "ScePaf_ScePafResource_scePafResourceGetIdStrLpb.S",
            "ScePaf_ScePafResource_scePafResourceGetInteger.S",
            "ScePaf_ScePafResource_scePafResourceGetIntegerArray.S",
            "ScePaf_ScePafResource_scePafResourceGetString.S",
            "ScePaf_ScePafResource_scePafResourceGetStyleId.S",
            "ScePaf_ScePafStdc_sce_paf_abs.S",
            "ScePaf_ScePafStdc_sce_paf_atof.S",
            "ScePaf_ScePafStdc_sce_paf_atoi.S",
            "ScePaf_ScePafStdc_sce_paf_atol.S",
            "ScePaf_ScePafStdc_sce_paf_atoll.S",
            "ScePaf_ScePafStdc_sce_paf_bcmp.S",
            "ScePaf_ScePafStdc_sce_paf_bcopy.S",
            "ScePaf_ScePafStdc_sce_paf_bsearch.S",
            "ScePaf_ScePafStdc_sce_paf_bzero.S",
            "ScePaf_ScePafStdc_sce_paf_fclose.S",
            "ScePaf_ScePafStdc_sce_paf_fgetc.S",
            "ScePaf_ScePafStdc_sce_paf_fopen.S",
            "ScePaf_ScePafStdc_sce_paf_fputc.S",
            "ScePaf_ScePafStdc_sce_paf_fread.S",
            "ScePaf_ScePafStdc_sce_paf_free.S",
            "ScePaf_ScePafStdc_sce_paf_fseek.S",
            "ScePaf_ScePafStdc_sce_paf_ftell.S",
            "ScePaf_ScePafStdc_sce_paf_fwrite.S",
            "ScePaf_ScePafStdc_sce_paf_longjmp.S",
            "ScePaf_ScePafStdc_sce_paf_look_ctype_table.S",
            "ScePaf_ScePafStdc_sce_paf_malloc.S",
            "ScePaf_ScePafStdc_sce_paf_memalign.S",
            "ScePaf_ScePafStdc_sce_paf_memchr.S",
            "ScePaf_ScePafStdc_sce_paf_memcmp.S",
            "ScePaf_ScePafStdc_sce_paf_memcpy.S",
            "ScePaf_ScePafStdc_sce_paf_memmove.S",
            "ScePaf_ScePafStdc_sce_paf_memset.S",
            "ScePaf_ScePafStdc_sce_paf_private_atexit.S",
            "ScePaf_ScePafStdc_sce_paf_private_exit.S",
            "ScePaf_ScePafStdc_sce_paf_private_fflush.S",
            "ScePaf_ScePafStdc_sce_paf_private_strtok.S",
            "ScePaf_ScePafStdc_sce_paf_private_towlower.S",
            "ScePaf_ScePafStdc_sce_paf_qsort.S",
            "ScePaf_ScePafStdc_sce_paf_rand.S",
            "ScePaf_ScePafStdc_sce_paf_setjmp.S",
            "ScePaf_ScePafStdc_sce_paf_snprintf.S",
            "ScePaf_ScePafStdc_sce_paf_sprintf.S",
            "ScePaf_ScePafStdc_sce_paf_srand.S",
            "ScePaf_ScePafStdc_sce_paf_strcasecmp.S",
            "ScePaf_ScePafStdc_sce_paf_strcat.S",
            "ScePaf_ScePafStdc_sce_paf_strchr.S",
            "ScePaf_ScePafStdc_sce_paf_strcmp.S",
            "ScePaf_ScePafStdc_sce_paf_strcpy.S",
            "ScePaf_ScePafStdc_sce_paf_strcspn.S",
            "ScePaf_ScePafStdc_sce_paf_strlcat.S",
            "ScePaf_ScePafStdc_sce_paf_strlcpy.S",
            "ScePaf_ScePafStdc_sce_paf_strlen.S",
            "ScePaf_ScePafStdc_sce_paf_strncasecmp.S",
            "ScePaf_ScePafStdc_sce_paf_strncat.S",
            "ScePaf_ScePafStdc_sce_paf_strncmp.S",
            "ScePaf_ScePafStdc_sce_paf_strncpy.S",
            "ScePaf_ScePafStdc_sce_paf_strpbrk.S",
            "ScePaf_ScePafStdc_sce_paf_strrchr.S",
            "ScePaf_ScePafStdc_sce_paf_strspn.S",
            "ScePaf_ScePafStdc_sce_paf_strtod.S",
            "ScePaf_ScePafStdc_sce_paf_strtok_r.S",
            "ScePaf_ScePafStdc_sce_paf_strtol.S",
            "ScePaf_ScePafStdc_sce_paf_strtoll.S",
            "ScePaf_ScePafStdc_sce_paf_strtoul.S",
            "ScePaf_ScePafStdc_sce_paf_strtoull.S",
            "ScePaf_ScePafStdc_sce_paf_swprintf.S",
            "ScePaf_ScePafStdc_sce_paf_tolower.S",
            "ScePaf_ScePafStdc_sce_paf_toupper.S",
            "ScePaf_ScePafStdc_sce_paf_vsnprintf.S",
            "ScePaf_ScePafStdc_sce_paf_vsprintf.S",
            "ScePaf_ScePafStdc_sce_paf_wcscasecmp.S",
            "ScePaf_ScePafStdc_sce_paf_wcscat.S",
            "ScePaf_ScePafStdc_sce_paf_wcschr.S",
            "ScePaf_ScePafStdc_sce_paf_wcscmp.S",
            "ScePaf_ScePafStdc_sce_paf_wcscpy.S",
            "ScePaf_ScePafStdc_sce_paf_wcscspn.S",
            "ScePaf_ScePafStdc_sce_paf_wcslen.S",
            "ScePaf_ScePafStdc_sce_paf_wcsncasecmp.S",
            "ScePaf_ScePafStdc_sce_paf_wcsncat.S",
            "ScePaf_ScePafStdc_sce_paf_wcsncmp.S",
            "ScePaf_ScePafStdc_sce_paf_wcsncpy.S",
            "ScePaf_ScePafStdc_sce_paf_wcsnlen.S",
            "ScePaf_ScePafStdc_sce_paf_wcspbrk.S",
            "ScePaf_ScePafStdc_sce_paf_wcsrchr.S",
            "ScePaf_ScePafStdc_sce_paf_wcsspn.S",
            "ScePaf_ScePafStdc_sce_paf_wmemchr.S",
            "ScePaf_ScePafStdc_sce_paf_wmemcmp.S",
            "ScePaf_ScePafStdc_sce_paf_wmemcpy.S",
            "ScePaf_ScePafStdc_sce_paf_wmemmove.S",
            "ScePaf_ScePafStdc_sce_paf_wmemset.S",
            "ScePaf_ScePafWidget_scePafWidgetSetFontSize.S",
            "ScePaf_ScePafGraphics_scePafGraphicsUpdateCurrentWave.S",
            "ScePaf_ScePafGraphics_scePafGraphicsCurrentWave.S",
        },
    });
}
pub fn buildSceAudioenc(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAudioenc",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAudioenc_SceAudioencUser_sceAudioencClearContext.S",
            "SceAudioenc_SceAudioencUser_sceAudioencCreateEncoder.S",
            "SceAudioenc_SceAudioencUser_sceAudioencCreateEncoderExternal.S",
            "SceAudioenc_SceAudioencUser_sceAudioencCreateEncoderResident.S",
            "SceAudioenc_SceAudioencUser_sceAudioencDeleteEncoder.S",
            "SceAudioenc_SceAudioencUser_sceAudioencDeleteEncoderExternal.S",
            "SceAudioenc_SceAudioencUser_sceAudioencDeleteEncoderResident.S",
            "SceAudioenc_SceAudioencUser_sceAudioencEncode.S",
            "SceAudioenc_SceAudioencUser_sceAudioencEncodeNFrames.S",
            "SceAudioenc_SceAudioencUser_sceAudioencGetContextSize.S",
            "SceAudioenc_SceAudioencUser_sceAudioencGetInternalError.S",
            "SceAudioenc_SceAudioencUser_sceAudioencGetOptInfo.S",
            "SceAudioenc_SceAudioencUser_sceAudioencInitLibrary.S",
            "SceAudioenc_SceAudioencUser_sceAudioencTermLibrary.S",
        },
    });
}
pub fn buildSceAudiodec(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAudiodec",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAudiodec_SceAudiodecUser_sceAudiodecClearContext.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecCreateDecoder.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecCreateDecoderExternal.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecCreateDecoderResident.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecDecode.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecDecodeNFrames.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecDecodeNStreams.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecDeleteDecoder.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecDeleteDecoderExternal.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecDeleteDecoderResident.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecGetContextSize.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecGetInternalError.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecInitLibrary.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecPartlyDecode.S",
            "SceAudiodec_SceAudiodecUser_sceAudiodecTermLibrary.S",
        },
    });
}
pub fn buildSceCodecEngine(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceCodecEngine",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceCodecEngine_SceCodecEngineUser_sceCodecEngineAllocMemoryFromUnmapMemBlock.S",
            "SceCodecEngine_SceCodecEngineUser_sceCodecEngineCloseUnmapMemBlock.S",
            "SceCodecEngine_SceCodecEngineUser_sceCodecEngineFreeMemoryFromUnmapMemBlock.S",
            "SceCodecEngine_SceCodecEngineUser_sceCodecEngineOpenUnmapMemBlock.S",
        },
    });
}
pub fn buildSceJpeg(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceJpeg",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceJpeg_SceJpegUser_sceJpegCreateSplitDecoder.S",
            "SceJpeg_SceJpegUser_sceJpegCsc.S",
            "SceJpeg_SceJpegUser_sceJpegDecodeMJpeg.S",
            "SceJpeg_SceJpegUser_sceJpegDecodeMJpegYCbCr.S",
            "SceJpeg_SceJpegUser_sceJpegDeleteSplitDecoder.S",
            "SceJpeg_SceJpegUser_sceJpegFinishMJpeg.S",
            "SceJpeg_SceJpegUser_sceJpegGetOutputInfo.S",
            "SceJpeg_SceJpegUser_sceJpegInitMJpeg.S",
            "SceJpeg_SceJpegUser_sceJpegInitMJpegWithParam.S",
            "SceJpeg_SceJpegUser_sceJpegMJpegCsc.S",
            "SceJpeg_SceJpegUser_sceJpegSplitDecodeMJpeg.S",
        },
    });
}
pub fn buildSceJpegEnc(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceJpegEnc",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceJpegEnc_SceJpegEncUser_sceJpegEncoderCsc.S",
            "SceJpegEnc_SceJpegEncUser_sceJpegEncoderEncode.S",
            "SceJpegEnc_SceJpegEncUser_sceJpegEncoderEnd.S",
            "SceJpegEnc_SceJpegEncUser_sceJpegEncoderGetContextSize.S",
            "SceJpegEnc_SceJpegEncUser_sceJpegEncoderInit.S",
            "SceJpegEnc_SceJpegEncUser_sceJpegEncoderInitWithParam.S",
            "SceJpegEnc_SceJpegEncUser_sceJpegEncoderSetCompressionRatio.S",
            "SceJpegEnc_SceJpegEncUser_sceJpegEncoderSetHeaderMode.S",
            "SceJpegEnc_SceJpegEncUser_sceJpegEncoderSetOutputAddr.S",
            "SceJpegEnc_SceJpegEncUser_sceJpegEncoderSetValidRegion.S",
        },
    });
}
pub fn buildSceAvcodecUser(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAvcodecUser",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAvcodecUser_SceVideoencUser_sceAvcencCreateEncoder.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencCreateEncoderBasic.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencCreateEncoderInternal.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencCsc.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencDeleteEncoder.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencEncode.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencEncodeFlush.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencEncodeStop.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencGetNalUnit.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencQueryEncoderMemSize.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencQueryEncoderMemSizeBasic.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencQueryEncoderMemSizeInternal.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencSetAvailablePreset.S",
            "SceAvcodecUser_SceVideoencUser_sceAvcencSetEncoderParameter.S",
            "SceAvcodecUser_SceVideoencUser_sceVideoencInitLibrary.S",
            "SceAvcodecUser_SceVideoencUser_sceVideoencInitLibraryInternal.S",
            "SceAvcodecUser_SceVideoencUser_sceVideoencInitLibraryWithUnmapMem.S",
            "SceAvcodecUser_SceVideoencUser_sceVideoencInitLibraryWithUnmapMemInternal.S",
            "SceAvcodecUser_SceVideoencUser_sceVideoencQueryMemSize.S",
            "SceAvcodecUser_SceVideoencUser_sceVideoencQueryMemSizeInternal.S",
            "SceAvcodecUser_SceVideoencUser_sceVideoencTermLibrary.S",
        },
    });
}
pub fn buildSceVideodec(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceVideodec",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceVideodec_SceVideodecUser_sceAvcdecCreateDecoder.S",
            "SceVideodec_SceVideodecUser_sceAvcdecCreateDecoderInternal.S",
            "SceVideodec_SceVideodecUser_sceAvcdecCreateDecoderNongameapp.S",
            "SceVideodec_SceVideodecUser_sceAvcdecCsc.S",
            "SceVideodec_SceVideodecUser_sceAvcdecCscInternal.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecode.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeAuInternal.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeAuNalAuInternal.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeAuNalAuNongameapp.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeAuNongameapp.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeAvailableSize.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeFlush.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeGetPictureInternal.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeGetPictureNongameapp.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeGetPictureWithWorkPictureInternal.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeNalAu.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeNalAuWithWorkPicture.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeSetTrickModeNongameapp.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeSetUserDataSei1FieldMemSizeNongameapp.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeStop.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeStopWithWorkPicture.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDecodeWithWorkPicture.S",
            "SceVideodec_SceVideodecUser_sceAvcdecDeleteDecoder.S",
            "SceVideodec_SceVideodecUser_sceAvcdecGetSeiPictureTimingInternal.S",
            "SceVideodec_SceVideodecUser_sceAvcdecGetSeiUserDataNongameapp.S",
            "SceVideodec_SceVideodecUser_sceAvcdecQueryDecoderMemSize.S",
            "SceVideodec_SceVideodecUser_sceAvcdecQueryDecoderMemSizeInternal.S",
            "SceVideodec_SceVideodecUser_sceAvcdecQueryDecoderMemSizeNongameapp.S",
            "SceVideodec_SceVideodecUser_sceAvcdecRegisterCallbackInternal.S",
            "SceVideodec_SceVideodecUser_sceAvcdecRegisterCallbackNongameapp.S",
            "SceVideodec_SceVideodecUser_sceAvcdecSetDecodeMode.S",
            "SceVideodec_SceVideodecUser_sceAvcdecSetDecodeModeInternal.S",
            "SceVideodec_SceVideodecUser_sceAvcdecSetInterlacedStreamMode.S",
            "SceVideodec_SceVideodecUser_sceAvcdecSetLowDelayModeNongameapp.S",
            "SceVideodec_SceVideodecUser_sceAvcdecSetRecoveryPointSEIMode.S",
            "SceVideodec_SceVideodecUser_sceAvcdecUnregisterCallbackInternal.S",
            "SceVideodec_SceVideodecUser_sceAvcdecUnregisterCallbackNongameapp.S",
            "SceVideodec_SceVideodecUser_sceAvcdecUnregisterCallbackWithCbidInternal.S",
            "SceVideodec_SceVideodecUser_sceAvcdecUnregisterCallbackWithCbidNongameapp.S",
            "SceVideodec_SceVideodecUser_sceM4vdecCreateDecoder.S",
            "SceVideodec_SceVideodecUser_sceM4vdecCreateDecoderInternal.S",
            "SceVideodec_SceVideodecUser_sceM4vdecCsc.S",
            "SceVideodec_SceVideodecUser_sceM4vdecDecode.S",
            "SceVideodec_SceVideodecUser_sceM4vdecDecodeAvailableSize.S",
            "SceVideodec_SceVideodecUser_sceM4vdecDecodeFlush.S",
            "SceVideodec_SceVideodecUser_sceM4vdecDecodeStop.S",
            "SceVideodec_SceVideodecUser_sceM4vdecDecodeStopWithWorkPicture.S",
            "SceVideodec_SceVideodecUser_sceM4vdecDecodeWithWorkPicture.S",
            "SceVideodec_SceVideodecUser_sceM4vdecDeleteDecoder.S",
            "SceVideodec_SceVideodecUser_sceM4vdecQueryDecoderMemSize.S",
            "SceVideodec_SceVideodecUser_sceM4vdecQueryDecoderMemSizeInternal.S",
            "SceVideodec_SceVideodecUser_sceVideodecInitLibrary.S",
            "SceVideodec_SceVideodecUser_sceVideodecInitLibraryInternal.S",
            "SceVideodec_SceVideodecUser_sceVideodecInitLibraryNongameapp.S",
            "SceVideodec_SceVideodecUser_sceVideodecInitLibraryWithUnmapMem.S",
            "SceVideodec_SceVideodecUser_sceVideodecInitLibraryWithUnmapMemInternal.S",
            "SceVideodec_SceVideodecUser_sceVideodecInitLibraryWithUnmapMemNongameapp.S",
            "SceVideodec_SceVideodecUser_sceVideodecQueryInstanceNongameapp.S",
            "SceVideodec_SceVideodecUser_sceVideodecQueryMemSize.S",
            "SceVideodec_SceVideodecUser_sceVideodecQueryMemSizeInternal.S",
            "SceVideodec_SceVideodecUser_sceVideodecQueryMemSizeNongameapp.S",
            "SceVideodec_SceVideodecUser_sceVideodecSetConfig.S",
            "SceVideodec_SceVideodecUser_sceVideodecSetConfigInternal.S",
            "SceVideodec_SceVideodecUser_sceVideodecTermLibrary.S",
        },
    });
}
pub fn buildSceSmart(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSmart",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSmart_SceSmart_sceSmartCreateInstantImageTarget.S",
            "SceSmart_SceSmart_sceSmartCreateLearnedImageTarget.S",
            "SceSmart_SceSmart_sceSmartDestroyTarget.S",
            "SceSmart_SceSmart_sceSmartGetTargetInfo.S",
            "SceSmart_SceSmart_sceSmartInit.S",
            "SceSmart_SceSmart_sceSmartRelease.S",
            "SceSmart_SceSmart_sceSmartSceneMappingDispatchAndQuery.S",
            "SceSmart_SceSmart_sceSmartSceneMappingDispatchAndQueryWithMask.S",
            "SceSmart_SceSmart_sceSmartSceneMappingEnableMask.S",
            "SceSmart_SceSmart_sceSmartSceneMappingFixMap.S",
            "SceSmart_SceSmart_sceSmartSceneMappingForceLocalize.S",
            "SceSmart_SceSmart_sceSmartSceneMappingGetInitializationPointInfo.S",
            "SceSmart_SceSmart_sceSmartSceneMappingGetLandmarkInfo.S",
            "SceSmart_SceSmart_sceSmartSceneMappingGetNodePointInfo.S",
            "SceSmart_SceSmart_sceSmartSceneMappingGetNumInitializationPoints.S",
            "SceSmart_SceSmart_sceSmartSceneMappingGetNumLandmarks.S",
            "SceSmart_SceSmart_sceSmartSceneMappingGetNumNodePoints.S",
            "SceSmart_SceSmart_sceSmartSceneMappingLoadMap.S",
            "SceSmart_SceSmart_sceSmartSceneMappingPropagateResult.S",
            "SceSmart_SceSmart_sceSmartSceneMappingRegisterTarget.S",
            "SceSmart_SceSmart_sceSmartSceneMappingRemoveLandmark.S",
            "SceSmart_SceSmart_sceSmartSceneMappingReset.S",
            "SceSmart_SceSmart_sceSmartSceneMappingRun.S",
            "SceSmart_SceSmart_sceSmartSceneMappingRunCore.S",
            "SceSmart_SceSmart_sceSmartSceneMappingSaveMap.S",
            "SceSmart_SceSmart_sceSmartSceneMappingSetCustomListener.S",
            "SceSmart_SceSmart_sceSmartSceneMappingSetDenseMapMode.S",
            "SceSmart_SceSmart_sceSmartSceneMappingSetDispatchMode.S",
            "SceSmart_SceSmart_sceSmartSceneMappingStart.S",
            "SceSmart_SceSmart_sceSmartSceneMappingStop.S",
            "SceSmart_SceSmart_sceSmartSceneMappingUnregisterTarget.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingDispatchAndQuery.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingGetResults.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingQuery.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingQuery2.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingRegisterTarget.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingReset.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingRun.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingRun2.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingRunWorker.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingSetSearchPolicy.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingStart.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingStop.S",
            "SceSmart_SceSmart_sceSmartTargetTrackingUnregisterTarget.S",
        },
    });
}
pub fn buildSceNpScore(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpScore",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpScore_SceNpScore_sceNpScoreAbortRequest.S",
            "SceNpScore_SceNpScore_sceNpScoreCensorComment.S",
            "SceNpScore_SceNpScore_sceNpScoreCensorCommentAsync.S",
            "SceNpScore_SceNpScore_sceNpScoreChangeModeForOtherSaveDataOwners.S",
            "SceNpScore_SceNpScore_sceNpScoreCreateRequest.S",
            "SceNpScore_SceNpScore_sceNpScoreCreateTitleCtx.S",
            "SceNpScore_SceNpScore_sceNpScoreDeleteRequest.S",
            "SceNpScore_SceNpScore_sceNpScoreDeleteTitleCtx.S",
            "SceNpScore_SceNpScore_sceNpScoreGetBoardInfo.S",
            "SceNpScore_SceNpScore_sceNpScoreGetBoardInfoAsync.S",
            "SceNpScore_SceNpScore_sceNpScoreGetFriendsRanking.S",
            "SceNpScore_SceNpScore_sceNpScoreGetFriendsRankingAsync.S",
            "SceNpScore_SceNpScore_sceNpScoreGetGameData.S",
            "SceNpScore_SceNpScore_sceNpScoreGetGameDataAsync.S",
            "SceNpScore_SceNpScore_sceNpScoreGetRankingByNpId.S",
            "SceNpScore_SceNpScore_sceNpScoreGetRankingByNpIdAsync.S",
            "SceNpScore_SceNpScore_sceNpScoreGetRankingByNpIdPcId.S",
            "SceNpScore_SceNpScore_sceNpScoreGetRankingByNpIdPcIdAsync.S",
            "SceNpScore_SceNpScore_sceNpScoreGetRankingByRange.S",
            "SceNpScore_SceNpScore_sceNpScoreGetRankingByRangeAsync.S",
            "SceNpScore_SceNpScore_sceNpScoreInit.S",
            "SceNpScore_SceNpScore_sceNpScorePollAsync.S",
            "SceNpScore_SceNpScore_sceNpScoreRecordGameData.S",
            "SceNpScore_SceNpScore_sceNpScoreRecordGameDataAsync.S",
            "SceNpScore_SceNpScore_sceNpScoreRecordScore.S",
            "SceNpScore_SceNpScore_sceNpScoreRecordScoreAsync.S",
            "SceNpScore_SceNpScore_sceNpScoreSanitizeComment.S",
            "SceNpScore_SceNpScore_sceNpScoreSanitizeCommentAsync.S",
            "SceNpScore_SceNpScore_sceNpScoreSetPlayerCharacterId.S",
            "SceNpScore_SceNpScore_sceNpScoreSetTimeout.S",
            "SceNpScore_SceNpScore_sceNpScoreTerm.S",
            "SceNpScore_SceNpScore_sceNpScoreWaitAsync.S",
        },
    });
}
pub fn buildSceNpCommerce2(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpCommerce2",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2AbortReq.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2CreateCtx.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2CreateSessionCreateReq.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2CreateSessionGetResult.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2CreateSessionStart.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2DestroyCtx.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2DestroyGetCategoryContentsResult.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2DestroyGetProductInfoListResult.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2DestroyGetProductInfoResult.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2DestroyReq.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetCategoryContentsCreateReq.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetCategoryContentsGetResult.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetCategoryContentsStart.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetCategoryInfo.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetCategoryInfoFromContentInfo.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetContentInfo.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetContentRatingDescriptor.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetContentRatingInfoFromCategoryInfo.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetContentRatingInfoFromGameProductInfo.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetDrmContentInfoCreateReq.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetGameProductInfo.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetGameProductInfoFromContentInfo.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetGameProductInfoFromGetProductInfoListResult.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetGameSkuInfoFromGameProductInfo.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetPrice.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetProductInfoCreateReq.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetProductInfoGetResult.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetProductInfoListCreateReq.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetProductInfoListGetResult.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetProductInfoListStart.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetProductInfoStart.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetSessionInfo.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetShortfallOfLibhttpPool.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2GetShortfallOfLibsslPool.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2HidePsStoreIcon.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2Init.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2InitGetCategoryContentsResult.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2InitGetProductInfoListResult.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2InitGetProductInfoResult.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2ShowPsStoreIcon.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2StartEmptyStoreCheck.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2StopEmptyStoreCheck.S",
            "SceNpCommerce2_SceNpCommerce2_sceNpCommerce2Term.S",
        },
    });
}
pub fn buildSceVoice(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceVoice",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceVoice_SceVoice_sceVoiceCheckTopology.S",
            "SceVoice_SceVoice_sceVoiceConnectIPortToOPort.S",
            "SceVoice_SceVoice_sceVoiceCreatePort.S",
            "SceVoice_SceVoice_sceVoiceDeletePort.S",
            "SceVoice_SceVoice_sceVoiceDisconnectIPortFromOPort.S",
            "SceVoice_SceVoice_sceVoiceEnd.S",
            "SceVoice_SceVoice_sceVoiceGetBitRate.S",
            "SceVoice_SceVoice_sceVoiceGetMuteFlag.S",
            "SceVoice_SceVoice_sceVoiceGetPortAttr.S",
            "SceVoice_SceVoice_sceVoiceGetPortInfo.S",
            "SceVoice_SceVoice_sceVoiceGetResourceInfo.S",
            "SceVoice_SceVoice_sceVoiceGetVolume.S",
            "SceVoice_SceVoice_sceVoiceInit.S",
            "SceVoice_SceVoice_sceVoicePausePort.S",
            "SceVoice_SceVoice_sceVoicePausePortAll.S",
            "SceVoice_SceVoice_sceVoiceReadFromOPort.S",
            "SceVoice_SceVoice_sceVoiceResetPort.S",
            "SceVoice_SceVoice_sceVoiceResumePort.S",
            "SceVoice_SceVoice_sceVoiceResumePortAll.S",
            "SceVoice_SceVoice_sceVoiceSetBitRate.S",
            "SceVoice_SceVoice_sceVoiceSetMuteFlag.S",
            "SceVoice_SceVoice_sceVoiceSetMuteFlagAll.S",
            "SceVoice_SceVoice_sceVoiceSetPortAttr.S",
            "SceVoice_SceVoice_sceVoiceSetVolume.S",
            "SceVoice_SceVoice_sceVoiceStart.S",
            "SceVoice_SceVoice_sceVoiceStop.S",
            "SceVoice_SceVoice_sceVoiceUpdatePort.S",
            "SceVoice_SceVoice_sceVoiceWriteToIPort.S",
        },
    });
}
pub fn buildSceNpActivity(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpActivity",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpActivity_SceNpActivity_sceNpActivityInit.S",
            "SceNpActivity_SceNpActivity_sceNpActivityPostAppStartupStatus.S",
            "SceNpActivity_SceNpActivity_sceNpActivityPostStatus.S",
            "SceNpActivity_SceNpActivity_sceNpActivityTerm.S",
        },
    });
}
pub fn buildSceJpegArm(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceJpegArm",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceJpegArm_SceJpegArm_sceJpegArmCreateSplitDecoder.S",
            "SceJpegArm_SceJpegArm_sceJpegArmDecodeMJpeg.S",
            "SceJpegArm_SceJpegArm_sceJpegArmDecodeMJpegYCbCr.S",
            "SceJpegArm_SceJpegArm_sceJpegArmDeleteSplitDecoder.S",
            "SceJpegArm_SceJpegArm_sceJpegArmGetOutputInfo.S",
            "SceJpegArm_SceJpegArm_sceJpegArmSplitDecodeMJpeg.S",
        },
    });
}
pub fn buildScePamgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePamgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePamgr_ScePamgr__sceKernelPaAddArmTraceByKey.S",
            "ScePamgr_ScePamgr__sceKernelPaAddBusTraceByKey.S",
            "ScePamgr_ScePamgr__sceKernelPaAddCounterTraceByKey.S",
            "ScePamgr_ScePamgr__sceKernelPaAddGpuTraceByKey.S",
            "ScePamgr_ScePamgr__sceKernelPaGetGpuSampledData.S",
            "ScePamgr_ScePamgr__sceKernelPaSetupTraceBufferByKey.S",
            "ScePamgr_ScePamgr_sceKernelPaGetIoBaseAddress.S",
            "ScePamgr_ScePamgr_sceKernelPaGetSharedKey.S",
            "ScePamgr_ScePamgr_sceKernelPaGetTimebaseFrequency.S",
            "ScePamgr_ScePamgr_sceKernelPaGetTimebaseValue.S",
            "ScePamgr_ScePamgr_sceKernelPaGetTraceBufferSize.S",
            "ScePamgr_ScePamgr_sceKernelPaGetTraceBufferStatus.S",
            "ScePamgr_ScePamgr_sceKernelPaGetWritePointer.S",
            "ScePamgr_ScePamgr_sceKernelPaInsertBookmark.S",
            "ScePamgr_ScePamgr_sceKernelPaRegister.S",
            "ScePamgr_ScePamgr_sceKernelPaRegisterShared.S",
            "ScePamgr_ScePamgr_sceKernelPaRemoveArmTraceByKey.S",
            "ScePamgr_ScePamgr_sceKernelPaRemoveBusTraceByKey.S",
            "ScePamgr_ScePamgr_sceKernelPaRemoveCounterTraceByKey.S",
            "ScePamgr_ScePamgr_sceKernelPaRemoveGpuTraceByKey.S",
            "ScePamgr_ScePamgr_sceKernelPaSetBookmarkChannelEnableByKey.S",
            "ScePamgr_ScePamgr_sceKernelPaStartByKey.S",
            "ScePamgr_ScePamgr_sceKernelPaStopByKey.S",
            "ScePamgr_ScePamgr_sceKernelPaUnregister.S",
            "ScePamgr_ScePamgr_sceKernelPerfArmPmonClose.S",
            "ScePamgr_ScePamgr_sceKernelPerfArmPmonOpen.S",
            "ScePamgr_ScePamgr_sceKernelPerfArmPmonReset.S",
            "ScePamgr_ScePamgr_sceKernelPerfArmPmonSelectEvent.S",
            "ScePamgr_ScePamgr_sceKernelPerfArmPmonSetCounterValue.S",
            "ScePamgr_ScePamgr_sceKernelPerfArmPmonStart.S",
            "ScePamgr_ScePamgr_sceKernelPerfArmPmonStop.S",
        },
    });
}
pub fn buildSceSas(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSas",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSas_SceSas_sceSasCore.S",
            "SceSas_SceSas_sceSasCoreWithMix.S",
            "SceSas_SceSas_sceSasExit.S",
            "SceSas_SceSas_sceSasGetDryPeak.S",
            "SceSas_SceSas_sceSasGetEndState.S",
            "SceSas_SceSas_sceSasGetEnvelope.S",
            "SceSas_SceSas_sceSasGetGrain.S",
            "SceSas_SceSas_sceSasGetNeededMemorySize.S",
            "SceSas_SceSas_sceSasGetOutputmode.S",
            "SceSas_SceSas_sceSasGetPauseState.S",
            "SceSas_SceSas_sceSasGetPreMasterPeak.S",
            "SceSas_SceSas_sceSasGetWetPeak.S",
            "SceSas_SceSas_sceSasInit.S",
            "SceSas_SceSas_sceSasInitWithGrain.S",
            "SceSas_SceSas_sceSasSetADSR.S",
            "SceSas_SceSas_sceSasSetADSRmode.S",
            "SceSas_SceSas_sceSasSetDistortion.S",
            "SceSas_SceSas_sceSasSetEffect.S",
            "SceSas_SceSas_sceSasSetEffectParam.S",
            "SceSas_SceSas_sceSasSetEffectType.S",
            "SceSas_SceSas_sceSasSetEffectVolume.S",
            "SceSas_SceSas_sceSasSetGrain.S",
            "SceSas_SceSas_sceSasSetKeyOff.S",
            "SceSas_SceSas_sceSasSetKeyOn.S",
            "SceSas_SceSas_sceSasSetNoise.S",
            "SceSas_SceSas_sceSasSetOutputmode.S",
            "SceSas_SceSas_sceSasSetPause.S",
            "SceSas_SceSas_sceSasSetPitch.S",
            "SceSas_SceSas_sceSasSetSL.S",
            "SceSas_SceSas_sceSasSetSimpleADSR.S",
            "SceSas_SceSas_sceSasSetVoice.S",
            "SceSas_SceSas_sceSasSetVoicePCM.S",
            "SceSas_SceSas_sceSasSetVolume.S",
        },
    });
}
pub fn buildSceProcessmgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceProcessmgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceProcessmgr_SceProcessmgr__sceKernelExitProcessForUser.S",
            "SceProcessmgr_SceProcessmgr__sceKernelGetTimer5Reg.S",
            "SceProcessmgr_SceProcessmgr__sceKernelRegisterLibkernelAddresses.S",
            "SceProcessmgr_SceProcessmgr_sceKernelCDialogSessionClose.S",
            "SceProcessmgr_SceProcessmgr_sceKernelCDialogSetLeaseLimit.S",
            "SceProcessmgr_SceProcessmgr_sceKernelCallAbortHandler.S",
            "SceProcessmgr_SceProcessmgr_sceKernelGetCurrentProcess.S",
            "SceProcessmgr_SceProcessmgr_sceKernelGetExtraTty.S",
            "SceProcessmgr_SceProcessmgr_sceKernelGetProcessName.S",
            "SceProcessmgr_SceProcessmgr_sceKernelGetProcessParam.S",
            "SceProcessmgr_SceProcessmgr_sceKernelGetProcessTimeCore.S",
            "SceProcessmgr_SceProcessmgr_sceKernelGetProcessTimeLowCore.S",
            "SceProcessmgr_SceProcessmgr_sceKernelGetProcessTimeWideCore.S",
            "SceProcessmgr_SceProcessmgr_sceKernelGetProcessTitleId.S",
            "SceProcessmgr_SceProcessmgr_sceKernelGetRemoteProcessTime.S",
            "SceProcessmgr_SceProcessmgr_sceKernelGetStderr.S",
            "SceProcessmgr_SceProcessmgr_sceKernelGetStdin.S",
            "SceProcessmgr_SceProcessmgr_sceKernelGetStdout.S",
            "SceProcessmgr_SceProcessmgr_sceKernelIsCDialogAvailable.S",
            "SceProcessmgr_SceProcessmgr_sceKernelIsGameBudget.S",
            "SceProcessmgr_SceProcessmgr_sceKernelLibcClock.S",
            "SceProcessmgr_SceProcessmgr_sceKernelLibcGettimeofday.S",
            "SceProcessmgr_SceProcessmgr_sceKernelLibcGmtime_r.S",
            "SceProcessmgr_SceProcessmgr_sceKernelLibcLocaltime_r.S",
            "SceProcessmgr_SceProcessmgr_sceKernelLibcMktime.S",
            "SceProcessmgr_SceProcessmgr_sceKernelLibcTime.S",
            "SceProcessmgr_SceProcessmgr_sceKernelPowerLock.S",
            "SceProcessmgr_SceProcessmgr_sceKernelPowerTick.S",
            "SceProcessmgr_SceProcessmgr_sceKernelPowerUnlock.S",
            "SceProcessmgr_SceProcessmgr_sceKernelRegisterProcessTerminationCallback.S",
            "SceProcessmgr_SceProcessmgr_sceKernelUnregisterProcessTerminationCallback.S",
        },
    });
}
pub fn buildSceProcessmgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceProcessmgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceProcessmgrForDriver_SceProcessmgrForDriver_ksceKernelCreateProcessLocalStorage.S",
            "SceProcessmgrForDriver_SceProcessmgrForDriver_ksceKernelGetProcessInfo.S",
            "SceProcessmgrForDriver_SceProcessmgrForDriver_ksceKernelGetProcessLocalStorageAddr.S",
            "SceProcessmgrForDriver_SceProcessmgrForDriver_ksceKernelGetProcessLocalStorageAddrForPid.S",
            "SceProcessmgrForDriver_SceProcessmgrForDriver_ksceKernelGetProcessStatus.S",
            "SceProcessmgrForDriver_SceProcessmgrForDriver_ksceKernelGetProcessTimeCore.S",
            "SceProcessmgrForDriver_SceProcessmgrForDriver_ksceKernelGetProcessTimeLowCore.S",
            "SceProcessmgrForDriver_SceProcessmgrForDriver_ksceKernelGetProcessTimeWideCore.S",
            "SceProcessmgrForDriver_SceProcessmgrForDriver_ksceKernelGetRemoteProcessTime.S",
            "SceProcessmgrForDriver_SceProcessmgrForDriver_ksceKernelIsCDialogAvailable.S",
            "SceProcessmgrForDriver_SceProcessmgrForDriver_ksceKernelIsGameBudget.S",
        },
    });
}
pub fn buildlibScePiglet(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "libScePiglet",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "libScePiglet_libScePiglet_eglBindAPI.S",
            "libScePiglet_libScePiglet_eglBindTexImage.S",
            "libScePiglet_libScePiglet_eglChooseConfig.S",
            "libScePiglet_libScePiglet_eglCopyBuffers.S",
            "libScePiglet_libScePiglet_eglCreateContext.S",
            "libScePiglet_libScePiglet_eglCreatePbufferFromClientBuffer.S",
            "libScePiglet_libScePiglet_eglCreatePbufferSurface.S",
            "libScePiglet_libScePiglet_eglCreatePixmapSurface.S",
            "libScePiglet_libScePiglet_eglCreateWindowSurface.S",
            "libScePiglet_libScePiglet_eglDestroyContext.S",
            "libScePiglet_libScePiglet_eglDestroySurface.S",
            "libScePiglet_libScePiglet_eglGetConfigAttrib.S",
            "libScePiglet_libScePiglet_eglGetConfigs.S",
            "libScePiglet_libScePiglet_eglGetCurrentContext.S",
            "libScePiglet_libScePiglet_eglGetCurrentDisplay.S",
            "libScePiglet_libScePiglet_eglGetCurrentSurface.S",
            "libScePiglet_libScePiglet_eglGetDisplay.S",
            "libScePiglet_libScePiglet_eglGetError.S",
            "libScePiglet_libScePiglet_eglGetProcAddress.S",
            "libScePiglet_libScePiglet_eglInitialize.S",
            "libScePiglet_libScePiglet_eglMakeCurrent.S",
            "libScePiglet_libScePiglet_eglQueryAPI.S",
            "libScePiglet_libScePiglet_eglQueryContext.S",
            "libScePiglet_libScePiglet_eglQueryString.S",
            "libScePiglet_libScePiglet_eglQuerySurface.S",
            "libScePiglet_libScePiglet_eglReleaseTexImage.S",
            "libScePiglet_libScePiglet_eglReleaseThread.S",
            "libScePiglet_libScePiglet_eglSurfaceAttrib.S",
            "libScePiglet_libScePiglet_eglSwapBuffers.S",
            "libScePiglet_libScePiglet_eglSwapInterval.S",
            "libScePiglet_libScePiglet_eglTerminate.S",
            "libScePiglet_libScePiglet_eglWaitClient.S",
            "libScePiglet_libScePiglet_eglWaitGL.S",
            "libScePiglet_libScePiglet_eglWaitNative.S",
            "libScePiglet_libScePiglet_glActiveTexture.S",
            "libScePiglet_libScePiglet_glAttachShader.S",
            "libScePiglet_libScePiglet_glBindAttribLocation.S",
            "libScePiglet_libScePiglet_glBindBuffer.S",
            "libScePiglet_libScePiglet_glBindFramebuffer.S",
            "libScePiglet_libScePiglet_glBindRenderbuffer.S",
            "libScePiglet_libScePiglet_glBindTexture.S",
            "libScePiglet_libScePiglet_glBlendColor.S",
            "libScePiglet_libScePiglet_glBlendEquation.S",
            "libScePiglet_libScePiglet_glBlendEquationSeparate.S",
            "libScePiglet_libScePiglet_glBlendFunc.S",
            "libScePiglet_libScePiglet_glBlendFuncSeparate.S",
            "libScePiglet_libScePiglet_glBufferData.S",
            "libScePiglet_libScePiglet_glBufferSubData.S",
            "libScePiglet_libScePiglet_glCheckFramebufferStatus.S",
            "libScePiglet_libScePiglet_glClear.S",
            "libScePiglet_libScePiglet_glClearColor.S",
            "libScePiglet_libScePiglet_glClearDepthf.S",
            "libScePiglet_libScePiglet_glClearStencil.S",
            "libScePiglet_libScePiglet_glColorMask.S",
            "libScePiglet_libScePiglet_glCompileShader.S",
            "libScePiglet_libScePiglet_glCompressedTexImage2D.S",
            "libScePiglet_libScePiglet_glCompressedTexSubImage2D.S",
            "libScePiglet_libScePiglet_glCopyTexImage2D.S",
            "libScePiglet_libScePiglet_glCopyTexSubImage2D.S",
            "libScePiglet_libScePiglet_glCreateProgram.S",
            "libScePiglet_libScePiglet_glCreateShader.S",
            "libScePiglet_libScePiglet_glCullFace.S",
            "libScePiglet_libScePiglet_glDeleteBuffers.S",
            "libScePiglet_libScePiglet_glDeleteFramebuffers.S",
            "libScePiglet_libScePiglet_glDeleteProgram.S",
            "libScePiglet_libScePiglet_glDeleteRenderbuffers.S",
            "libScePiglet_libScePiglet_glDeleteShader.S",
            "libScePiglet_libScePiglet_glDeleteTextures.S",
            "libScePiglet_libScePiglet_glDepthFunc.S",
            "libScePiglet_libScePiglet_glDepthMask.S",
            "libScePiglet_libScePiglet_glDepthRangef.S",
            "libScePiglet_libScePiglet_glDetachShader.S",
            "libScePiglet_libScePiglet_glDisable.S",
            "libScePiglet_libScePiglet_glDisableVertexAttribArray.S",
            "libScePiglet_libScePiglet_glDrawArrays.S",
            "libScePiglet_libScePiglet_glDrawArraysInstancedEXT.S",
            "libScePiglet_libScePiglet_glDrawElements.S",
            "libScePiglet_libScePiglet_glDrawElementsInstancedEXT.S",
            "libScePiglet_libScePiglet_glEnable.S",
            "libScePiglet_libScePiglet_glEnableVertexAttribArray.S",
            "libScePiglet_libScePiglet_glFinish.S",
            "libScePiglet_libScePiglet_glFlush.S",
            "libScePiglet_libScePiglet_glFramebufferRenderbuffer.S",
            "libScePiglet_libScePiglet_glFramebufferTexture2D.S",
            "libScePiglet_libScePiglet_glFrontFace.S",
            "libScePiglet_libScePiglet_glGenBuffers.S",
            "libScePiglet_libScePiglet_glGenFramebuffers.S",
            "libScePiglet_libScePiglet_glGenRenderbuffers.S",
            "libScePiglet_libScePiglet_glGenTextures.S",
            "libScePiglet_libScePiglet_glGenerateMipmap.S",
            "libScePiglet_libScePiglet_glGetActiveAttrib.S",
            "libScePiglet_libScePiglet_glGetActiveUniform.S",
            "libScePiglet_libScePiglet_glGetAttachedShaders.S",
            "libScePiglet_libScePiglet_glGetAttribLocation.S",
            "libScePiglet_libScePiglet_glGetBooleanv.S",
            "libScePiglet_libScePiglet_glGetBufferParameteriv.S",
            "libScePiglet_libScePiglet_glGetError.S",
            "libScePiglet_libScePiglet_glGetFloatv.S",
            "libScePiglet_libScePiglet_glGetFramebufferAttachmentParameteriv.S",
            "libScePiglet_libScePiglet_glGetIntegerv.S",
            "libScePiglet_libScePiglet_glGetProgramInfoLog.S",
            "libScePiglet_libScePiglet_glGetProgramiv.S",
            "libScePiglet_libScePiglet_glGetRenderbufferParameteriv.S",
            "libScePiglet_libScePiglet_glGetShaderInfoLog.S",
            "libScePiglet_libScePiglet_glGetShaderPrecisionFormat.S",
            "libScePiglet_libScePiglet_glGetShaderSource.S",
            "libScePiglet_libScePiglet_glGetShaderiv.S",
            "libScePiglet_libScePiglet_glGetString.S",
            "libScePiglet_libScePiglet_glGetTexParameterfv.S",
            "libScePiglet_libScePiglet_glGetTexParameteriv.S",
            "libScePiglet_libScePiglet_glGetUniformLocation.S",
            "libScePiglet_libScePiglet_glGetUniformfv.S",
            "libScePiglet_libScePiglet_glGetUniformiv.S",
            "libScePiglet_libScePiglet_glGetVertexAttribPointerv.S",
            "libScePiglet_libScePiglet_glGetVertexAttribfv.S",
            "libScePiglet_libScePiglet_glGetVertexAttribiv.S",
            "libScePiglet_libScePiglet_glHint.S",
            "libScePiglet_libScePiglet_glIsBuffer.S",
            "libScePiglet_libScePiglet_glIsEnabled.S",
            "libScePiglet_libScePiglet_glIsFramebuffer.S",
            "libScePiglet_libScePiglet_glIsProgram.S",
            "libScePiglet_libScePiglet_glIsRenderbuffer.S",
            "libScePiglet_libScePiglet_glIsShader.S",
            "libScePiglet_libScePiglet_glIsTexture.S",
            "libScePiglet_libScePiglet_glLineWidth.S",
            "libScePiglet_libScePiglet_glLinkProgram.S",
            "libScePiglet_libScePiglet_glPigletGetShaderBinarySCE.S",
            "libScePiglet_libScePiglet_glPixelStorei.S",
            "libScePiglet_libScePiglet_glPolygonOffset.S",
            "libScePiglet_libScePiglet_glReadPixels.S",
            "libScePiglet_libScePiglet_glReleaseShaderCompiler.S",
            "libScePiglet_libScePiglet_glRenderbufferStorage.S",
            "libScePiglet_libScePiglet_glSampleCoverage.S",
            "libScePiglet_libScePiglet_glScissor.S",
            "libScePiglet_libScePiglet_glShaderBinary.S",
            "libScePiglet_libScePiglet_glShaderSource.S",
            "libScePiglet_libScePiglet_glStencilFunc.S",
            "libScePiglet_libScePiglet_glStencilFuncSeparate.S",
            "libScePiglet_libScePiglet_glStencilMask.S",
            "libScePiglet_libScePiglet_glStencilMaskSeparate.S",
            "libScePiglet_libScePiglet_glStencilOp.S",
            "libScePiglet_libScePiglet_glStencilOpSeparate.S",
            "libScePiglet_libScePiglet_glTexImage2D.S",
            "libScePiglet_libScePiglet_glTexParameterf.S",
            "libScePiglet_libScePiglet_glTexParameterfv.S",
            "libScePiglet_libScePiglet_glTexParameteri.S",
            "libScePiglet_libScePiglet_glTexParameteriv.S",
            "libScePiglet_libScePiglet_glTexStorage2DEXT.S",
            "libScePiglet_libScePiglet_glTexSubImage2D.S",
            "libScePiglet_libScePiglet_glTextureStorage2DEXT.S",
            "libScePiglet_libScePiglet_glUniform1f.S",
            "libScePiglet_libScePiglet_glUniform1fv.S",
            "libScePiglet_libScePiglet_glUniform1i.S",
            "libScePiglet_libScePiglet_glUniform1iv.S",
            "libScePiglet_libScePiglet_glUniform2f.S",
            "libScePiglet_libScePiglet_glUniform2fv.S",
            "libScePiglet_libScePiglet_glUniform2i.S",
            "libScePiglet_libScePiglet_glUniform2iv.S",
            "libScePiglet_libScePiglet_glUniform3f.S",
            "libScePiglet_libScePiglet_glUniform3fv.S",
            "libScePiglet_libScePiglet_glUniform3i.S",
            "libScePiglet_libScePiglet_glUniform3iv.S",
            "libScePiglet_libScePiglet_glUniform4f.S",
            "libScePiglet_libScePiglet_glUniform4fv.S",
            "libScePiglet_libScePiglet_glUniform4i.S",
            "libScePiglet_libScePiglet_glUniform4iv.S",
            "libScePiglet_libScePiglet_glUniformMatrix2fv.S",
            "libScePiglet_libScePiglet_glUniformMatrix3fv.S",
            "libScePiglet_libScePiglet_glUniformMatrix4fv.S",
            "libScePiglet_libScePiglet_glUseProgram.S",
            "libScePiglet_libScePiglet_glValidateProgram.S",
            "libScePiglet_libScePiglet_glVertexAttrib1f.S",
            "libScePiglet_libScePiglet_glVertexAttrib1fv.S",
            "libScePiglet_libScePiglet_glVertexAttrib2f.S",
            "libScePiglet_libScePiglet_glVertexAttrib2fv.S",
            "libScePiglet_libScePiglet_glVertexAttrib3f.S",
            "libScePiglet_libScePiglet_glVertexAttrib3fv.S",
            "libScePiglet_libScePiglet_glVertexAttrib4f.S",
            "libScePiglet_libScePiglet_glVertexAttrib4fv.S",
            "libScePiglet_libScePiglet_glVertexAttribDivisorEXT.S",
            "libScePiglet_libScePiglet_glVertexAttribPointer.S",
            "libScePiglet_libScePiglet_glViewport.S",
        },
    });
}
pub fn buildSceDsiForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceDsiForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceDsiForDriver_SceDsiForDriver_ksceDsiDcsRead.S",
            "SceDsiForDriver_SceDsiForDriver_ksceDsiDcsShortWrite.S",
            "SceDsiForDriver_SceDsiForDriver_ksceDsiDisableHead.S",
            "SceDsiForDriver_SceDsiForDriver_ksceDsiEnableHead.S",
            "SceDsiForDriver_SceDsiForDriver_ksceDsiGenericReadRequest.S",
            "SceDsiForDriver_SceDsiForDriver_ksceDsiGenericShortWrite.S",
            "SceDsiForDriver_SceDsiForDriver_ksceDsiGetPixelClock.S",
            "SceDsiForDriver_SceDsiForDriver_ksceDsiGetVicResolution.S",
            "SceDsiForDriver_SceDsiForDriver_ksceDsiSendBlankingPacket.S",
            "SceDsiForDriver_SceDsiForDriver_ksceDsiSetLanesAndPixelSize.S",
            "SceDsiForDriver_SceDsiForDriver_ksceDsiSetVic.S",
            "SceDsiForDriver_SceDsiForDriver_ksceDsiStartDisplay.S",
        },
    });
}
pub fn buildSceGpioForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceGpioForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceGpioForDriver_SceGpioForDriver_ksceGpioAcquireIntr.S",
            "SceGpioForDriver_SceGpioForDriver_ksceGpioGetIntrMode.S",
            "SceGpioForDriver_SceGpioForDriver_ksceGpioGetPortMode.S",
            "SceGpioForDriver_SceGpioForDriver_ksceGpioPortClear.S",
            "SceGpioForDriver_SceGpioForDriver_ksceGpioPortRead.S",
            "SceGpioForDriver_SceGpioForDriver_ksceGpioPortReset.S",
            "SceGpioForDriver_SceGpioForDriver_ksceGpioPortSet.S",
            "SceGpioForDriver_SceGpioForDriver_ksceGpioQueryIntr.S",
            "SceGpioForDriver_SceGpioForDriver_ksceGpioSetIntrMode.S",
            "SceGpioForDriver_SceGpioForDriver_ksceGpioSetPortMode.S",
        },
    });
}
pub fn buildSceI2cForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceI2cForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceI2cForDriver_SceI2cForDriver_ksceI2cInit.S",
            "SceI2cForDriver_SceI2cForDriver_ksceI2cReset.S",
            "SceI2cForDriver_SceI2cForDriver_ksceI2cSetDebugHandlers.S",
            "SceI2cForDriver_SceI2cForDriver_ksceI2cTransferRead.S",
            "SceI2cForDriver_SceI2cForDriver_ksceI2cTransferWrite.S",
            "SceI2cForDriver_SceI2cForDriver_ksceI2cTransferWriteRead.S",
        },
    });
}
pub fn buildSceIftuForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceIftuForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceIftuForDriver_SceIftuForDriver_ksceIftuCsc.S",
            "SceIftuForDriver_SceIftuForDriver_ksceIftuDisable.S",
            "SceIftuForDriver_SceIftuForDriver_ksceIftuEnable.S",
            "SceIftuForDriver_SceIftuForDriver_ksceIftuSetInputFrameBuffer.S",
            "SceIftuForDriver_SceIftuForDriver_ksceIftuSetMergeSetting.S",
            "SceIftuForDriver_SceIftuForDriver_ksceIftuSetOutputFormat.S",
        },
    });
}
pub fn buildScePervasiveForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePervasiveForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveDsiClockDisable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveDsiClockEnable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveDsiResetDisable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveDsiResetEnable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveDsiSetPixelClock.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveGetSoCRevision.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveGpioClockDisable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveGpioClockEnable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveGpioResetDisable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveGpioResetEnable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveMsifClockDisable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveMsifClockEnable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveMsifResetDisable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveMsifResetEnable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveMsifSetClock.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveRemovableMemoryGetCardInsertState.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveSpiClockDisable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveSpiClockEnable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveSpiResetDisable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveSpiResetEnable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveUartClockDisable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveUartClockEnable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveUartResetDisable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveUartResetEnable.S",
            "ScePervasiveForDriver_ScePervasiveForDriver_kscePervasiveUartSetBaudrate.S",
        },
    });
}
pub fn buildSceSblUpdateMgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblUpdateMgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsAllocateBuffer.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsCheckSystemIntegrity.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsExtractSpackage.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsGetApplicableVersion.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsGetExtractSpackage.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsGetSpkgInfo.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsGetStatus.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsGetUpdateMode.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsInformUpdateFinished.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsInformUpdateOngoing.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsInformUpdateStarted.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsInspectSpackage.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsPowerControl.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsReleaseBuffer.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsSetSwInfoBin.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsSetSwInfoInt.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsSetSwInfoStr.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsSetUpdateMode.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsUpdateSpackage.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsVerifyPup.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsVerifyPupAdditionalSign.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsVerifyPupHeader.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsVerifyPupSegment.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsVerifyPupSegmentById.S",
            "SceSblUpdateMgr_SceSblSsUpdateMgr_sceSblUsVerifyPupWatermark.S",
        },
    });
}
pub fn buildScePromoterUtil(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "ScePromoterUtil",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityCheckExist.S",
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityDeletePkg.S",
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityExit.S",
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityGetResult.S",
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityGetSize.S",
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityGetState.S",
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityInit.S",
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityPromoteImport.S",
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityPromotePkg.S",
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityPromotePkgWithRif.S",
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityRemoveSavedata.S",
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityUpdateLiveArea.S",
            "ScePromoterUtil_ScePromoterUtil_scePromoterUtilityUpdateUpgradableStatus.S",
        },
    });
}
pub fn buildSceSsl(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSsl",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSsl_SceSsl_sceSslFreeSslCertName.S",
            "SceSsl_SceSsl_sceSslGetIssuerName.S",
            "SceSsl_SceSsl_sceSslGetMemoryPoolStats.S",
            "SceSsl_SceSsl_sceSslGetNameEntryCount.S",
            "SceSsl_SceSsl_sceSslGetNameEntryInfo.S",
            "SceSsl_SceSsl_sceSslGetNotAfter.S",
            "SceSsl_SceSsl_sceSslGetNotBefore.S",
            "SceSsl_SceSsl_sceSslGetSerialNumber.S",
            "SceSsl_SceSsl_sceSslGetSubjectName.S",
            "SceSsl_SceSsl_sceSslInit.S",
            "SceSsl_SceSsl_sceSslTerm.S",
            "SceSsl_SceSslInternal_sceSslInternalGetCertificateAuthority.S",
            "SceSsl_SceSslInternal_sceSslInternalIsInitalized.S",
            "SceSsl_SceSslInternal_sceSslInternalWrite.S",
        },
    });
}
pub fn buildSceKernelModulemgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceKernelModulemgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceKernelModulemgr_SceBacktrace__sceKernelBacktrace.S",
            "SceKernelModulemgr_SceModulemgr__sceKernelCloseModule.S",
            "SceKernelModulemgr_SceModulemgr__sceKernelLoadModule.S",
            "SceKernelModulemgr_SceModulemgr__sceKernelLoadStartModule.S",
            "SceKernelModulemgr_SceModulemgr__sceKernelOpenModule.S",
            "SceKernelModulemgr_SceModulemgr__sceKernelStartModule.S",
            "SceKernelModulemgr_SceModulemgr__sceKernelStopModule.S",
            "SceKernelModulemgr_SceModulemgr__sceKernelStopUnloadModule.S",
            "SceKernelModulemgr_SceModulemgr__sceKernelUnloadModule.S",
            "SceKernelModulemgr_SceModulemgr_sceKernelGetAllowedSdkVersionOnSystem.S",
            "SceKernelModulemgr_SceModulemgr_sceKernelGetLibraryInfoByNID.S",
            "SceKernelModulemgr_SceModulemgr_sceKernelGetModuleIdByAddr.S",
            "SceKernelModulemgr_SceModulemgr_sceKernelGetModuleInfo.S",
            "SceKernelModulemgr_SceModulemgr_sceKernelGetModuleList.S",
            "SceKernelModulemgr_SceModulemgr_sceKernelGetSystemSwVersion.S",
            "SceKernelModulemgr_SceModulemgr_sceKernelInhibitLoadingModule.S",
            "SceKernelModulemgr_SceModulemgr_sceKernelIsCalledFromSysModule.S",
        },
    });
}
pub fn buildSceBacktraceForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceBacktraceForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceBacktraceForDriver_SceBacktraceForDriver_ksceKernelBacktrace.S",
        },
    });
}
pub fn buildSceModulemgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceModulemgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelGetModuleInfoByAddr.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelGetSystemSwVersion.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelLoadModule.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelLoadStartModule.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelLoadStartModuleForPid.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelLoadStartSharedModuleForPid.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelRegisterLibary.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelReleaseLibary.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelSearchModuleByName.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelStartModule.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelStopModule.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelStopUnloadModule.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelStopUnloadModuleForPid.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelStopUnloadSharedModuleForPid.S",
            "SceModulemgrForDriver_SceModulemgrForDriver_ksceKernelUnloadModule.S",
        },
    });
}
pub fn buildSceGpuEs4ForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceGpuEs4ForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_DevInitSGXPart2KM.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_OSAllocMem.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_OSFreeMem.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_OSGetCurrentProcessIDKM.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_OSMemCopy.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_OSMemSet.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_OSProcHasPrivSrvInit.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_PVRSRVAcquireDeviceDataKM.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_PVRSRVAllocDeviceMemKM.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_PVRSRVEnumerateDevicesKM.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_PVRSRVFinaliseSystem.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_PVRSRVFreeDeviceMemKM.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_PVRSRVGetInitServerState.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_PVRSRVGetMiscInfoKM.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_PVRSRVPerProcessData.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_PVRSRVPerProcessDataConnect.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_PVRSRVPerProcessDataDisconnect.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_PVRSRVSetInitServerState.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_SGXGetInfoForSrvinitKM.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_ksceGpuGetRegisterDump.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_ksceGpuMmuMapMemory.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_ksceGpuMmuUnmapMemory.S",
            "SceGpuEs4ForDriver_SceGpuEs4ForDriver_ksceGpuSignalWaitLockup.S",
        },
    });
}
pub fn buildSceGpuEs4(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceGpuEs4",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceGpuEs4_SceGpuEs4ForUser_PVRSRVOpen.S",
            "SceGpuEs4_SceGpuEs4ForUser_PVRSRVRelease.S",
            "SceGpuEs4_SceGpuEs4ForUser_PVRSRV_BridgeDispatchKM.S",
            "SceGpuEs4_SceGpuEs4ForUser_sceGpuRegisterSalvage.S",
            "SceGpuEs4_SceGpuEs4ForUser_sceGpuSignalWait.S",
            "SceGpuEs4_SceGpuEs4ForUser_sceGpuSignalWaitLockup.S",
            "SceGpuEs4_SceGpuEs4ForUser_sceGpuUnregisterSalvage.S",
        },
    });
}
pub fn buildSceTeleportClient(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceTeleportClient",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceTeleportClient_SceTeleportClient_sceTeleportClientClearCacheInfo.S",
            "SceTeleportClient_SceTeleportClient_sceTeleportClientDeleteRemoteApp.S",
            "SceTeleportClient_SceTeleportClient_sceTeleportClientEndSearchDevice.S",
            "SceTeleportClient_SceTeleportClient_sceTeleportClientFinalize.S",
            "SceTeleportClient_SceTeleportClient_sceTeleportClientGetCacheInfo.S",
            "SceTeleportClient_SceTeleportClient_sceTeleportClientGetDeviceDescription.S",
            "SceTeleportClient_SceTeleportClient_sceTeleportClientGetRemoteAppInfo.S",
            "SceTeleportClient_SceTeleportClient_sceTeleportClientGetRemoteAppInfoNum.S",
            "SceTeleportClient_SceTeleportClient_sceTeleportClientInitialize.S",
            "SceTeleportClient_SceTeleportClient_sceTeleportClientLaunchRemoteApp.S",
            "SceTeleportClient_SceTeleportClient_sceTeleportClientRegisterGetDeviceInfoCallback.S",
            "SceTeleportClient_SceTeleportClient_sceTeleportClientStartSearchDevice.S",
            "SceTeleportClient_SceTeleportClient_sceTeleportClientWakeupLatestDevice.S",
        },
    });
}
pub fn buildSceUsbstorVStorDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUsbstorVStorDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUsbstorVStorDriver_SceUsbstorVStor_sceUsbstorVStorSetDeviceInfo.S",
            "SceUsbstorVStorDriver_SceUsbstorVStor_sceUsbstorVStorSetImgFilePath.S",
            "SceUsbstorVStorDriver_SceUsbstorVStor_sceUsbstorVStorStart.S",
            "SceUsbstorVStorDriver_SceUsbstorVStor_sceUsbstorVStorStop.S",
        },
    });
}
pub fn buildSceGps(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceGps",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceGps_SceGps__sceGpsClose.S",
            "SceGps_SceGps__sceGpsGetData.S",
            "SceGps_SceGps__sceGpsGetDeviceInfo.S",
            "SceGps_SceGps__sceGpsGetState.S",
            "SceGps_SceGps__sceGpsIoctl.S",
            "SceGps_SceGps__sceGpsIsDevice.S",
            "SceGps_SceGps__sceGpsOpen.S",
            "SceGps_SceGps__sceGpsResumeCallback.S",
            "SceGps_SceGps__sceGpsSelectDevice.S",
            "SceGps_SceGps__sceGpsStart.S",
            "SceGps_SceGps__sceGpsStop.S",
        },
    });
}
pub fn buildSceShellSvc(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceShellSvc",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceShellSvc_SceShellUtil_sceShellUtilInitEvents.S",
            "SceShellSvc_SceShellUtil_sceShellUtilLock.S",
            "SceShellSvc_SceShellUtil_sceShellUtilRegisterEventHandler.S",
            "SceShellSvc_SceShellUtil_sceShellUtilRequestLaunchApp.S",
            "SceShellSvc_SceShellUtil_sceShellUtilUnlock.S",
            "SceShellSvc_SceShellUtilLaunchApp_sceShellUtilLaunchAppRequestLaunchApp.S",
        },
    });
}
pub fn buildSceFace(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceFace",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceFace_SceFace_sceFaceAgeGetWorkingMemorySize.S",
            "SceFace_SceFace_sceFaceAgeRangeEstimate.S",
            "SceFace_SceFace_sceFaceAgeRangeIntegrate.S",
            "SceFace_SceFace_sceFaceAllParts.S",
            "SceFace_SceFace_sceFaceAllPartsGetWorkingMemorySize.S",
            "SceFace_SceFace_sceFaceAttribute.S",
            "SceFace_SceFace_sceFaceAttributeGetWorkingMemorySize.S",
            "SceFace_SceFace_sceFaceDetection.S",
            "SceFace_SceFace_sceFaceDetectionEx.S",
            "SceFace_SceFace_sceFaceDetectionGetDefaultParam.S",
            "SceFace_SceFace_sceFaceDetectionGetWorkingMemorySize.S",
            "SceFace_SceFace_sceFaceDetectionLocal.S",
            "SceFace_SceFace_sceFaceEstimatePoseRegion.S",
            "SceFace_SceFace_sceFaceIdentifyGetFeature.S",
            "SceFace_SceFace_sceFaceIdentifyGetWorkingMemorySize.S",
            "SceFace_SceFace_sceFaceIdentifySimilarity.S",
            "SceFace_SceFace_sceFaceParts.S",
            "SceFace_SceFace_sceFacePartsEx.S",
            "SceFace_SceFace_sceFacePartsGetWorkingMemorySize.S",
            "SceFace_SceFace_sceFacePartsResultCheck.S",
            "SceFace_SceFace_sceFaceShapeFit.S",
            "SceFace_SceFace_sceFaceShapeGetWorkingMemorySize.S",
            "SceFace_SceFace_sceFaceShapeTrack.S",
        },
    });
}
pub fn buildSceAVConfig(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceAVConfig",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceAVConfig_SceAVConfig_sceAVConfigChangeReg.S",
            "SceAVConfig_SceAVConfig_sceAVConfigClearAutoSuspend2.S",
            "SceAVConfig_SceAVConfig_sceAVConfigDisplayOn.S",
            "SceAVConfig_SceAVConfig_sceAVConfigGetAcStatus.S",
            "SceAVConfig_SceAVConfig_sceAVConfigGetBtVol.S",
            "SceAVConfig_SceAVConfig_sceAVConfigGetConnectedAudioDevice.S",
            "SceAVConfig_SceAVConfig_sceAVConfigGetDisplayMaxBrightness.S",
            "SceAVConfig_SceAVConfig_sceAVConfigGetMasterVol.S",
            "SceAVConfig_SceAVConfig_sceAVConfigGetShutterVol.S",
            "SceAVConfig_SceAVConfig_sceAVConfigGetSystemVol.S",
            "SceAVConfig_SceAVConfig_sceAVConfigGetVolCtrlEnable.S",
            "SceAVConfig_SceAVConfig_sceAVConfigHdmiCecCmdOneTouchPlay.S",
            "SceAVConfig_SceAVConfig_sceAVConfigHdmiCecDisable.S",
            "SceAVConfig_SceAVConfig_sceAVConfigHdmiCecEnable.S",
            "SceAVConfig_SceAVConfig_sceAVConfigHdmiClearCecInfo.S",
            "SceAVConfig_SceAVConfig_sceAVConfigHdmiGetCecInfo.S",
            "SceAVConfig_SceAVConfig_sceAVConfigHdmiGetMonitorInfo.S",
            "SceAVConfig_SceAVConfig_sceAVConfigHdmiGetOutScalingRatio.S",
            "SceAVConfig_SceAVConfig_sceAVConfigHdmiSetOutScalingRatio.S",
            "SceAVConfig_SceAVConfig_sceAVConfigHdmiSetResolution.S",
            "SceAVConfig_SceAVConfig_sceAVConfigHdmiSetRgbRangeMode.S",
            "SceAVConfig_SceAVConfig_sceAVConfigMuteOn.S",
            "SceAVConfig_SceAVConfig_sceAVConfigRegisterCallback.S",
            "SceAVConfig_SceAVConfig_sceAVConfigSendVolKey.S",
            "SceAVConfig_SceAVConfig_sceAVConfigSetAutoDisplayDimming.S",
            "SceAVConfig_SceAVConfig_sceAVConfigSetAutoSuspend.S",
            "SceAVConfig_SceAVConfig_sceAVConfigSetAutoSuspend2.S",
            "SceAVConfig_SceAVConfig_sceAVConfigSetDisplayBrightness.S",
            "SceAVConfig_SceAVConfig_sceAVConfigSetDisplayColorSpaceMode.S",
            "SceAVConfig_SceAVConfig_sceAVConfigSetMasterVol.S",
            "SceAVConfig_SceAVConfig_sceAVConfigSetSystemVol.S",
            "SceAVConfig_SceAVConfig_sceAVConfigUnRegisterCallback.S",
            "SceAVConfig_SceAVConfig_sceAVConfigWriteMasterVol.S",
            "SceAVConfig_SceAVConfig_sceAVConfigWriteRegSystemVol.S",
        },
    });
}
pub fn buildSceLibc(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceLibc",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceLibc_SceLibc__Assert.S",
            "SceLibc_SceLibc__Btowc.S",
            "SceLibc_SceLibc__Exit.S",
            "SceLibc_SceLibc__FCbuild.S",
            "SceLibc_SceLibc__Fltrounds.S",
            "SceLibc_SceLibc__Iswctype.S",
            "SceLibc_SceLibc__Lockfilelock.S",
            "SceLibc_SceLibc__Locksyslock.S",
            "SceLibc_SceLibc__Mbtowc.S",
            "SceLibc_SceLibc__SCE_Assert.S",
            "SceLibc_SceLibc__Stod.S",
            "SceLibc_SceLibc__Stodx.S",
            "SceLibc_SceLibc__Stof.S",
            "SceLibc_SceLibc__Stofx.S",
            "SceLibc_SceLibc__Stold.S",
            "SceLibc_SceLibc__Stoldx.S",
            "SceLibc_SceLibc__Stoll.S",
            "SceLibc_SceLibc__Stollx.S",
            "SceLibc_SceLibc__Stolx.S",
            "SceLibc_SceLibc__Stoul.S",
            "SceLibc_SceLibc__Stoull.S",
            "SceLibc_SceLibc__Stoullx.S",
            "SceLibc_SceLibc__Stoulx.S",
            "SceLibc_SceLibc__Towctrans.S",
            "SceLibc_SceLibc__Unlockfilelock.S",
            "SceLibc_SceLibc__Unlocksyslock.S",
            "SceLibc_SceLibc__WStod.S",
            "SceLibc_SceLibc__WStof.S",
            "SceLibc_SceLibc__WStold.S",
            "SceLibc_SceLibc__WStoul.S",
            "SceLibc_SceLibc__Wctob.S",
            "SceLibc_SceLibc__Wctomb.S",
            "SceLibc_SceLibc___aeabi_atexit.S",
            "SceLibc_SceLibc___at_quick_exit.S",
            "SceLibc_SceLibc___cxa_atexit.S",
            "SceLibc_SceLibc___cxa_finalize.S",
            "SceLibc_SceLibc___cxa_guard_abort.S",
            "SceLibc_SceLibc___cxa_guard_acquire.S",
            "SceLibc_SceLibc___cxa_guard_release.S",
            "SceLibc_SceLibc___cxa_set_dso_handle_main.S",
            "SceLibc_SceLibc___set_exidx_main.S",
            "SceLibc_SceLibc___tls_get_addr.S",
            "SceLibc_SceLibc__sceLdTlsRegisterModuleInfo.S",
            "SceLibc_SceLibc__sceLdTlsUnregisterModuleInfo.S",
            "SceLibc_SceLibc__sceLibcErrnoLoc.S",
            "SceLibc_SceLibc_abort.S",
            "SceLibc_SceLibc_abort_handler_s.S",
            "SceLibc_SceLibc_abs.S",
            "SceLibc_SceLibc_asctime.S",
            "SceLibc_SceLibc_asctime_s.S",
            "SceLibc_SceLibc_atof.S",
            "SceLibc_SceLibc_atoff.S",
            "SceLibc_SceLibc_atoi.S",
            "SceLibc_SceLibc_atol.S",
            "SceLibc_SceLibc_atoll.S",
            "SceLibc_SceLibc_bsearch.S",
            "SceLibc_SceLibc_bsearch_s.S",
            "SceLibc_SceLibc_btowc.S",
            "SceLibc_SceLibc_c16rtomb.S",
            "SceLibc_SceLibc_c32rtomb.S",
            "SceLibc_SceLibc_calloc.S",
            "SceLibc_SceLibc_clearerr.S",
            "SceLibc_SceLibc_clock.S",
            "SceLibc_SceLibc_ctime.S",
            "SceLibc_SceLibc_ctime_s.S",
            "SceLibc_SceLibc_difftime.S",
            "SceLibc_SceLibc_div.S",
            "SceLibc_SceLibc_exit.S",
            "SceLibc_SceLibc_fclose.S",
            "SceLibc_SceLibc_fdopen.S",
            "SceLibc_SceLibc_feof.S",
            "SceLibc_SceLibc_ferror.S",
            "SceLibc_SceLibc_fflush.S",
            "SceLibc_SceLibc_fgetc.S",
            "SceLibc_SceLibc_fgetpos.S",
            "SceLibc_SceLibc_fgets.S",
            "SceLibc_SceLibc_fgetwc.S",
            "SceLibc_SceLibc_fgetws.S",
            "SceLibc_SceLibc_fileno.S",
            "SceLibc_SceLibc_fopen.S",
            "SceLibc_SceLibc_fopen_s.S",
            "SceLibc_SceLibc_fprintf.S",
            "SceLibc_SceLibc_fprintf_s.S",
            "SceLibc_SceLibc_fputc.S",
            "SceLibc_SceLibc_fputs.S",
            "SceLibc_SceLibc_fputwc.S",
            "SceLibc_SceLibc_fputws.S",
            "SceLibc_SceLibc_fread.S",
            "SceLibc_SceLibc_free.S",
            "SceLibc_SceLibc_freopen.S",
            "SceLibc_SceLibc_freopen_s.S",
            "SceLibc_SceLibc_fscanf.S",
            "SceLibc_SceLibc_fscanf_s.S",
            "SceLibc_SceLibc_fseek.S",
            "SceLibc_SceLibc_fsetpos.S",
            "SceLibc_SceLibc_ftell.S",
            "SceLibc_SceLibc_fwide.S",
            "SceLibc_SceLibc_fwprintf.S",
            "SceLibc_SceLibc_fwprintf_s.S",
            "SceLibc_SceLibc_fwrite.S",
            "SceLibc_SceLibc_fwscanf.S",
            "SceLibc_SceLibc_fwscanf_s.S",
            "SceLibc_SceLibc_getc.S",
            "SceLibc_SceLibc_getchar.S",
            "SceLibc_SceLibc_gets.S",
            "SceLibc_SceLibc_gets_s.S",
            "SceLibc_SceLibc_getwc.S",
            "SceLibc_SceLibc_getwchar.S",
            "SceLibc_SceLibc_gmtime.S",
            "SceLibc_SceLibc_gmtime_s.S",
            "SceLibc_SceLibc_ignore_handler_s.S",
            "SceLibc_SceLibc_imaxabs.S",
            "SceLibc_SceLibc_imaxdiv.S",
            "SceLibc_SceLibc_isalnum.S",
            "SceLibc_SceLibc_isalpha.S",
            "SceLibc_SceLibc_isblank.S",
            "SceLibc_SceLibc_iscntrl.S",
            "SceLibc_SceLibc_isdigit.S",
            "SceLibc_SceLibc_isgraph.S",
            "SceLibc_SceLibc_islower.S",
            "SceLibc_SceLibc_isprint.S",
            "SceLibc_SceLibc_ispunct.S",
            "SceLibc_SceLibc_isspace.S",
            "SceLibc_SceLibc_isupper.S",
            "SceLibc_SceLibc_iswalnum.S",
            "SceLibc_SceLibc_iswalpha.S",
            "SceLibc_SceLibc_iswblank.S",
            "SceLibc_SceLibc_iswcntrl.S",
            "SceLibc_SceLibc_iswctype.S",
            "SceLibc_SceLibc_iswdigit.S",
            "SceLibc_SceLibc_iswgraph.S",
            "SceLibc_SceLibc_iswlower.S",
            "SceLibc_SceLibc_iswprint.S",
            "SceLibc_SceLibc_iswpunct.S",
            "SceLibc_SceLibc_iswspace.S",
            "SceLibc_SceLibc_iswupper.S",
            "SceLibc_SceLibc_iswxdigit.S",
            "SceLibc_SceLibc_isxdigit.S",
            "SceLibc_SceLibc_labs.S",
            "SceLibc_SceLibc_ldiv.S",
            "SceLibc_SceLibc_llabs.S",
            "SceLibc_SceLibc_lldiv.S",
            "SceLibc_SceLibc_localtime.S",
            "SceLibc_SceLibc_localtime_s.S",
            "SceLibc_SceLibc_longjmp.S",
            "SceLibc_SceLibc_malloc.S",
            "SceLibc_SceLibc_malloc_stats.S",
            "SceLibc_SceLibc_malloc_stats_fast.S",
            "SceLibc_SceLibc_malloc_usable_size.S",
            "SceLibc_SceLibc_mblen.S",
            "SceLibc_SceLibc_mbrlen.S",
            "SceLibc_SceLibc_mbrtoc16.S",
            "SceLibc_SceLibc_mbrtoc32.S",
            "SceLibc_SceLibc_mbrtowc.S",
            "SceLibc_SceLibc_mbsinit.S",
            "SceLibc_SceLibc_mbsrtowcs.S",
            "SceLibc_SceLibc_mbsrtowcs_s.S",
            "SceLibc_SceLibc_mbstowcs.S",
            "SceLibc_SceLibc_mbstowcs_s.S",
            "SceLibc_SceLibc_mbtowc.S",
            "SceLibc_SceLibc_memalign.S",
            "SceLibc_SceLibc_memchr.S",
            "SceLibc_SceLibc_memcmp.S",
            "SceLibc_SceLibc_memcpy.S",
            "SceLibc_SceLibc_memcpy_s.S",
            "SceLibc_SceLibc_memmove.S",
            "SceLibc_SceLibc_memmove_s.S",
            "SceLibc_SceLibc_memset.S",
            "SceLibc_SceLibc_mktime.S",
            "SceLibc_SceLibc_mspace_calloc.S",
            "SceLibc_SceLibc_mspace_create.S",
            "SceLibc_SceLibc_mspace_create_internal.S",
            "SceLibc_SceLibc_mspace_create_with_flag.S",
            "SceLibc_SceLibc_mspace_destroy.S",
            "SceLibc_SceLibc_mspace_free.S",
            "SceLibc_SceLibc_mspace_is_heap_empty.S",
            "SceLibc_SceLibc_mspace_malloc.S",
            "SceLibc_SceLibc_mspace_malloc_stats.S",
            "SceLibc_SceLibc_mspace_malloc_stats_fast.S",
            "SceLibc_SceLibc_mspace_malloc_usable_size.S",
            "SceLibc_SceLibc_mspace_memalign.S",
            "SceLibc_SceLibc_mspace_realloc.S",
            "SceLibc_SceLibc_mspace_reallocalign.S",
            "SceLibc_SceLibc_perror.S",
            "SceLibc_SceLibc_printf.S",
            "SceLibc_SceLibc_printf_s.S",
            "SceLibc_SceLibc_putc.S",
            "SceLibc_SceLibc_putchar.S",
            "SceLibc_SceLibc_puts.S",
            "SceLibc_SceLibc_putwc.S",
            "SceLibc_SceLibc_putwchar.S",
            "SceLibc_SceLibc_qsort.S",
            "SceLibc_SceLibc_qsort_s.S",
            "SceLibc_SceLibc_quick_exit.S",
            "SceLibc_SceLibc_rand.S",
            "SceLibc_SceLibc_rand_r.S",
            "SceLibc_SceLibc_realloc.S",
            "SceLibc_SceLibc_reallocalign.S",
            "SceLibc_SceLibc_remove.S",
            "SceLibc_SceLibc_rename.S",
            "SceLibc_SceLibc_rewind.S",
            "SceLibc_SceLibc_scanf.S",
            "SceLibc_SceLibc_scanf_s.S",
            "SceLibc_SceLibc_sceLibcFopenWithFD.S",
            "SceLibc_SceLibc_sceLibcFopenWithFH.S",
            "SceLibc_SceLibc_sceLibcGetFD.S",
            "SceLibc_SceLibc_sceLibcGetFH.S",
            "SceLibc_SceLibc_sceLibcSetHeapInitError.S",
            "SceLibc_SceLibc_set_constraint_handler_s.S",
            "SceLibc_SceLibc_setbuf.S",
            "SceLibc_SceLibc_setjmp.S",
            "SceLibc_SceLibc_setvbuf.S",
            "SceLibc_SceLibc_snprintf.S",
            "SceLibc_SceLibc_snprintf_s.S",
            "SceLibc_SceLibc_snwprintf_s.S",
            "SceLibc_SceLibc_sprintf.S",
            "SceLibc_SceLibc_sprintf_s.S",
            "SceLibc_SceLibc_srand.S",
            "SceLibc_SceLibc_sscanf.S",
            "SceLibc_SceLibc_sscanf_s.S",
            "SceLibc_SceLibc_strcasecmp.S",
            "SceLibc_SceLibc_strcat.S",
            "SceLibc_SceLibc_strcat_s.S",
            "SceLibc_SceLibc_strchr.S",
            "SceLibc_SceLibc_strcmp.S",
            "SceLibc_SceLibc_strcoll.S",
            "SceLibc_SceLibc_strcpy.S",
            "SceLibc_SceLibc_strcpy_s.S",
            "SceLibc_SceLibc_strcspn.S",
            "SceLibc_SceLibc_strdup.S",
            "SceLibc_SceLibc_strerror.S",
            "SceLibc_SceLibc_strerror_s.S",
            "SceLibc_SceLibc_strerrorlen_s.S",
            "SceLibc_SceLibc_strftime.S",
            "SceLibc_SceLibc_strlen.S",
            "SceLibc_SceLibc_strncasecmp.S",
            "SceLibc_SceLibc_strncat.S",
            "SceLibc_SceLibc_strncat_s.S",
            "SceLibc_SceLibc_strncmp.S",
            "SceLibc_SceLibc_strncpy.S",
            "SceLibc_SceLibc_strncpy_s.S",
            "SceLibc_SceLibc_strnlen_s.S",
            "SceLibc_SceLibc_strpbrk.S",
            "SceLibc_SceLibc_strrchr.S",
            "SceLibc_SceLibc_strspn.S",
            "SceLibc_SceLibc_strstr.S",
            "SceLibc_SceLibc_strtod.S",
            "SceLibc_SceLibc_strtof.S",
            "SceLibc_SceLibc_strtoimax.S",
            "SceLibc_SceLibc_strtok.S",
            "SceLibc_SceLibc_strtok_r.S",
            "SceLibc_SceLibc_strtok_s.S",
            "SceLibc_SceLibc_strtol.S",
            "SceLibc_SceLibc_strtold.S",
            "SceLibc_SceLibc_strtoll.S",
            "SceLibc_SceLibc_strtoul.S",
            "SceLibc_SceLibc_strtoull.S",
            "SceLibc_SceLibc_strtoumax.S",
            "SceLibc_SceLibc_strxfrm.S",
            "SceLibc_SceLibc_swprintf.S",
            "SceLibc_SceLibc_swprintf_s.S",
            "SceLibc_SceLibc_swscanf.S",
            "SceLibc_SceLibc_swscanf_s.S",
            "SceLibc_SceLibc_time.S",
            "SceLibc_SceLibc_tolower.S",
            "SceLibc_SceLibc_toupper.S",
            "SceLibc_SceLibc_towctrans.S",
            "SceLibc_SceLibc_towlower.S",
            "SceLibc_SceLibc_towupper.S",
            "SceLibc_SceLibc_ungetc.S",
            "SceLibc_SceLibc_ungetwc.S",
            "SceLibc_SceLibc_vfprintf.S",
            "SceLibc_SceLibc_vfprintf_s.S",
            "SceLibc_SceLibc_vfscanf.S",
            "SceLibc_SceLibc_vfscanf_s.S",
            "SceLibc_SceLibc_vfwprintf.S",
            "SceLibc_SceLibc_vfwprintf_s.S",
            "SceLibc_SceLibc_vfwscanf.S",
            "SceLibc_SceLibc_vfwscanf_s.S",
            "SceLibc_SceLibc_vprintf.S",
            "SceLibc_SceLibc_vprintf_s.S",
            "SceLibc_SceLibc_vscanf.S",
            "SceLibc_SceLibc_vscanf_s.S",
            "SceLibc_SceLibc_vsnprintf.S",
            "SceLibc_SceLibc_vsnprintf_s.S",
            "SceLibc_SceLibc_vsnwprintf_s.S",
            "SceLibc_SceLibc_vsprintf.S",
            "SceLibc_SceLibc_vsprintf_s.S",
            "SceLibc_SceLibc_vsscanf.S",
            "SceLibc_SceLibc_vsscanf_s.S",
            "SceLibc_SceLibc_vswprintf.S",
            "SceLibc_SceLibc_vswprintf_s.S",
            "SceLibc_SceLibc_vswscanf.S",
            "SceLibc_SceLibc_vswscanf_s.S",
            "SceLibc_SceLibc_vwprintf.S",
            "SceLibc_SceLibc_vwprintf_s.S",
            "SceLibc_SceLibc_vwscanf.S",
            "SceLibc_SceLibc_vwscanf_s.S",
            "SceLibc_SceLibc_wcrtomb.S",
            "SceLibc_SceLibc_wcrtomb_s.S",
            "SceLibc_SceLibc_wcscat.S",
            "SceLibc_SceLibc_wcscat_s.S",
            "SceLibc_SceLibc_wcschr.S",
            "SceLibc_SceLibc_wcscmp.S",
            "SceLibc_SceLibc_wcscoll.S",
            "SceLibc_SceLibc_wcscpy.S",
            "SceLibc_SceLibc_wcscpy_s.S",
            "SceLibc_SceLibc_wcscspn.S",
            "SceLibc_SceLibc_wcsftime.S",
            "SceLibc_SceLibc_wcslen.S",
            "SceLibc_SceLibc_wcsncat.S",
            "SceLibc_SceLibc_wcsncat_s.S",
            "SceLibc_SceLibc_wcsncmp.S",
            "SceLibc_SceLibc_wcsncpy.S",
            "SceLibc_SceLibc_wcsncpy_s.S",
            "SceLibc_SceLibc_wcsnlen_s.S",
            "SceLibc_SceLibc_wcspbrk.S",
            "SceLibc_SceLibc_wcsrchr.S",
            "SceLibc_SceLibc_wcsrtombs.S",
            "SceLibc_SceLibc_wcsrtombs_s.S",
            "SceLibc_SceLibc_wcsspn.S",
            "SceLibc_SceLibc_wcsstr.S",
            "SceLibc_SceLibc_wcstod.S",
            "SceLibc_SceLibc_wcstof.S",
            "SceLibc_SceLibc_wcstoimax.S",
            "SceLibc_SceLibc_wcstok.S",
            "SceLibc_SceLibc_wcstok_s.S",
            "SceLibc_SceLibc_wcstol.S",
            "SceLibc_SceLibc_wcstold.S",
            "SceLibc_SceLibc_wcstoll.S",
            "SceLibc_SceLibc_wcstombs.S",
            "SceLibc_SceLibc_wcstombs_s.S",
            "SceLibc_SceLibc_wcstoul.S",
            "SceLibc_SceLibc_wcstoull.S",
            "SceLibc_SceLibc_wcstoumax.S",
            "SceLibc_SceLibc_wcsxfrm.S",
            "SceLibc_SceLibc_wctob.S",
            "SceLibc_SceLibc_wctomb.S",
            "SceLibc_SceLibc_wctomb_s.S",
            "SceLibc_SceLibc_wctrans.S",
            "SceLibc_SceLibc_wctype.S",
            "SceLibc_SceLibc_wmemchr.S",
            "SceLibc_SceLibc_wmemcmp.S",
            "SceLibc_SceLibc_wmemcpy.S",
            "SceLibc_SceLibc_wmemcpy_s.S",
            "SceLibc_SceLibc_wmemmove.S",
            "SceLibc_SceLibc_wmemmove_s.S",
            "SceLibc_SceLibc_wmemset.S",
            "SceLibc_SceLibc_wprintf.S",
            "SceLibc_SceLibc_wprintf_s.S",
            "SceLibc_SceLibc_wscanf.S",
            "SceLibc_SceLibc_wscanf_s.S",
            "SceLibc_SceLibc__Ctype.S",
            "SceLibc_SceLibc__Dbl.S",
            "SceLibc_SceLibc__Denorm.S",
            "SceLibc_SceLibc__FDenorm.S",
            "SceLibc_SceLibc__FInf.S",
            "SceLibc_SceLibc__FNan.S",
            "SceLibc_SceLibc__FSnan.S",
            "SceLibc_SceLibc__Flt.S",
            "SceLibc_SceLibc__Inf.S",
            "SceLibc_SceLibc__LDenorm.S",
            "SceLibc_SceLibc__LInf.S",
            "SceLibc_SceLibc__LNan.S",
            "SceLibc_SceLibc__LSnan.S",
            "SceLibc_SceLibc__Ldbl.S",
            "SceLibc_SceLibc__Nan.S",
            "SceLibc_SceLibc__PJP_C_Copyright.S",
            "SceLibc_SceLibc__Snan.S",
            "SceLibc_SceLibc__Stderr.S",
            "SceLibc_SceLibc__Stdin.S",
            "SceLibc_SceLibc__Stdout.S",
            "SceLibc_SceLibc__Tolotab.S",
            "SceLibc_SceLibc__Touptab.S",
            "SceLibc_SceLibc_libc_heap_mspace.S",
            "SceLibc_SceLibm__Cosh.S",
            "SceLibc_SceLibm__Dclass.S",
            "SceLibc_SceLibm__Dsign.S",
            "SceLibc_SceLibm__Dtest.S",
            "SceLibc_SceLibm__Exp.S",
            "SceLibc_SceLibm__FCosh.S",
            "SceLibc_SceLibm__FDclass.S",
            "SceLibc_SceLibm__FDsign.S",
            "SceLibc_SceLibm__FDtest.S",
            "SceLibc_SceLibm__FExp.S",
            "SceLibc_SceLibm__FFpcomp.S",
            "SceLibc_SceLibm__FLog.S",
            "SceLibc_SceLibm__FSin.S",
            "SceLibc_SceLibm__FSinh.S",
            "SceLibc_SceLibm__FSinx.S",
            "SceLibc_SceLibm__Fpcomp.S",
            "SceLibc_SceLibm__LCosh.S",
            "SceLibc_SceLibm__LDclass.S",
            "SceLibc_SceLibm__LDsign.S",
            "SceLibc_SceLibm__LDtest.S",
            "SceLibc_SceLibm__LExp.S",
            "SceLibc_SceLibm__LFpcomp.S",
            "SceLibc_SceLibm__LLog.S",
            "SceLibc_SceLibm__LSin.S",
            "SceLibc_SceLibm__LSinh.S",
            "SceLibc_SceLibm__LSinx.S",
            "SceLibc_SceLibm__Log.S",
            "SceLibc_SceLibm__Sin.S",
            "SceLibc_SceLibm__Sinh.S",
            "SceLibc_SceLibm__Sinx.S",
            "SceLibc_SceLibm_acos.S",
            "SceLibc_SceLibm_acosf.S",
            "SceLibc_SceLibm_acosh.S",
            "SceLibc_SceLibm_acoshf.S",
            "SceLibc_SceLibm_acoshl.S",
            "SceLibc_SceLibm_acosl.S",
            "SceLibc_SceLibm_asin.S",
            "SceLibc_SceLibm_asinf.S",
            "SceLibc_SceLibm_asinh.S",
            "SceLibc_SceLibm_asinhf.S",
            "SceLibc_SceLibm_asinhl.S",
            "SceLibc_SceLibm_asinl.S",
            "SceLibc_SceLibm_atan.S",
            "SceLibc_SceLibm_atan2.S",
            "SceLibc_SceLibm_atan2f.S",
            "SceLibc_SceLibm_atan2l.S",
            "SceLibc_SceLibm_atanf.S",
            "SceLibc_SceLibm_atanh.S",
            "SceLibc_SceLibm_atanhf.S",
            "SceLibc_SceLibm_atanhl.S",
            "SceLibc_SceLibm_atanl.S",
            "SceLibc_SceLibm_cbrt.S",
            "SceLibc_SceLibm_cbrtf.S",
            "SceLibc_SceLibm_cbrtl.S",
            "SceLibc_SceLibm_ceil.S",
            "SceLibc_SceLibm_ceilf.S",
            "SceLibc_SceLibm_ceill.S",
            "SceLibc_SceLibm_copysign.S",
            "SceLibc_SceLibm_copysignf.S",
            "SceLibc_SceLibm_copysignl.S",
            "SceLibc_SceLibm_cos.S",
            "SceLibc_SceLibm_cosf.S",
            "SceLibc_SceLibm_cosh.S",
            "SceLibc_SceLibm_coshf.S",
            "SceLibc_SceLibm_coshl.S",
            "SceLibc_SceLibm_cosl.S",
            "SceLibc_SceLibm_erf.S",
            "SceLibc_SceLibm_erfc.S",
            "SceLibc_SceLibm_erfcf.S",
            "SceLibc_SceLibm_erfcl.S",
            "SceLibc_SceLibm_erff.S",
            "SceLibc_SceLibm_erfl.S",
            "SceLibc_SceLibm_exp.S",
            "SceLibc_SceLibm_exp2.S",
            "SceLibc_SceLibm_exp2f.S",
            "SceLibc_SceLibm_exp2l.S",
            "SceLibc_SceLibm_expf.S",
            "SceLibc_SceLibm_expl.S",
            "SceLibc_SceLibm_expm1.S",
            "SceLibc_SceLibm_expm1f.S",
            "SceLibc_SceLibm_expm1l.S",
            "SceLibc_SceLibm_fabs.S",
            "SceLibc_SceLibm_fabsf.S",
            "SceLibc_SceLibm_fabsl.S",
            "SceLibc_SceLibm_fdim.S",
            "SceLibc_SceLibm_fdimf.S",
            "SceLibc_SceLibm_fdiml.S",
            "SceLibc_SceLibm_floor.S",
            "SceLibc_SceLibm_floorf.S",
            "SceLibc_SceLibm_floorl.S",
            "SceLibc_SceLibm_fma.S",
            "SceLibc_SceLibm_fmaf.S",
            "SceLibc_SceLibm_fmal.S",
            "SceLibc_SceLibm_fmax.S",
            "SceLibc_SceLibm_fmaxf.S",
            "SceLibc_SceLibm_fmaxl.S",
            "SceLibc_SceLibm_fmin.S",
            "SceLibc_SceLibm_fminf.S",
            "SceLibc_SceLibm_fminl.S",
            "SceLibc_SceLibm_fmod.S",
            "SceLibc_SceLibm_fmodf.S",
            "SceLibc_SceLibm_fmodl.S",
            "SceLibc_SceLibm_frexp.S",
            "SceLibc_SceLibm_frexpf.S",
            "SceLibc_SceLibm_frexpl.S",
            "SceLibc_SceLibm_hypot.S",
            "SceLibc_SceLibm_hypotf.S",
            "SceLibc_SceLibm_hypotl.S",
            "SceLibc_SceLibm_ilogb.S",
            "SceLibc_SceLibm_ilogbf.S",
            "SceLibc_SceLibm_ilogbl.S",
            "SceLibc_SceLibm_ldexp.S",
            "SceLibc_SceLibm_ldexpf.S",
            "SceLibc_SceLibm_ldexpl.S",
            "SceLibc_SceLibm_lgamma.S",
            "SceLibc_SceLibm_lgammaf.S",
            "SceLibc_SceLibm_lgammal.S",
            "SceLibc_SceLibm_llrint.S",
            "SceLibc_SceLibm_llrintf.S",
            "SceLibc_SceLibm_llrintl.S",
            "SceLibc_SceLibm_llround.S",
            "SceLibc_SceLibm_llroundf.S",
            "SceLibc_SceLibm_llroundl.S",
            "SceLibc_SceLibm_log.S",
            "SceLibc_SceLibm_log10.S",
            "SceLibc_SceLibm_log10f.S",
            "SceLibc_SceLibm_log10l.S",
            "SceLibc_SceLibm_log1p.S",
            "SceLibc_SceLibm_log1pf.S",
            "SceLibc_SceLibm_log1pl.S",
            "SceLibc_SceLibm_log2.S",
            "SceLibc_SceLibm_log2f.S",
            "SceLibc_SceLibm_log2l.S",
            "SceLibc_SceLibm_logb.S",
            "SceLibc_SceLibm_logbf.S",
            "SceLibc_SceLibm_logbl.S",
            "SceLibc_SceLibm_logf.S",
            "SceLibc_SceLibm_logl.S",
            "SceLibc_SceLibm_lrint.S",
            "SceLibc_SceLibm_lrintf.S",
            "SceLibc_SceLibm_lrintl.S",
            "SceLibc_SceLibm_lround.S",
            "SceLibc_SceLibm_lroundf.S",
            "SceLibc_SceLibm_lroundl.S",
            "SceLibc_SceLibm_modf.S",
            "SceLibc_SceLibm_modff.S",
            "SceLibc_SceLibm_modfl.S",
            "SceLibc_SceLibm_nan.S",
            "SceLibc_SceLibm_nanf.S",
            "SceLibc_SceLibm_nanl.S",
            "SceLibc_SceLibm_nearbyint.S",
            "SceLibc_SceLibm_nearbyintf.S",
            "SceLibc_SceLibm_nearbyintl.S",
            "SceLibc_SceLibm_nextafter.S",
            "SceLibc_SceLibm_nextafterf.S",
            "SceLibc_SceLibm_nextafterl.S",
            "SceLibc_SceLibm_nexttoward.S",
            "SceLibc_SceLibm_nexttowardf.S",
            "SceLibc_SceLibm_nexttowardl.S",
            "SceLibc_SceLibm_pow.S",
            "SceLibc_SceLibm_powf.S",
            "SceLibc_SceLibm_powl.S",
            "SceLibc_SceLibm_remainder.S",
            "SceLibc_SceLibm_remainderf.S",
            "SceLibc_SceLibm_remainderl.S",
            "SceLibc_SceLibm_remquo.S",
            "SceLibc_SceLibm_remquof.S",
            "SceLibc_SceLibm_remquol.S",
            "SceLibc_SceLibm_rint.S",
            "SceLibc_SceLibm_rintf.S",
            "SceLibc_SceLibm_rintl.S",
            "SceLibc_SceLibm_round.S",
            "SceLibc_SceLibm_roundf.S",
            "SceLibc_SceLibm_roundl.S",
            "SceLibc_SceLibm_scalbln.S",
            "SceLibc_SceLibm_scalblnf.S",
            "SceLibc_SceLibm_scalblnl.S",
            "SceLibc_SceLibm_scalbn.S",
            "SceLibc_SceLibm_scalbnf.S",
            "SceLibc_SceLibm_scalbnl.S",
            "SceLibc_SceLibm_sin.S",
            "SceLibc_SceLibm_sinf.S",
            "SceLibc_SceLibm_sinh.S",
            "SceLibc_SceLibm_sinhf.S",
            "SceLibc_SceLibm_sinhl.S",
            "SceLibc_SceLibm_sinl.S",
            "SceLibc_SceLibm_sqrt.S",
            "SceLibc_SceLibm_sqrtf.S",
            "SceLibc_SceLibm_sqrtl.S",
            "SceLibc_SceLibm_tan.S",
            "SceLibc_SceLibm_tanf.S",
            "SceLibc_SceLibm_tanh.S",
            "SceLibc_SceLibm_tanhf.S",
            "SceLibc_SceLibm_tanhl.S",
            "SceLibc_SceLibm_tanl.S",
            "SceLibc_SceLibm_tgamma.S",
            "SceLibc_SceLibm_tgammaf.S",
            "SceLibc_SceLibm_tgammal.S",
            "SceLibc_SceLibm_trunc.S",
            "SceLibc_SceLibm_truncf.S",
            "SceLibc_SceLibm_truncl.S",
            "SceLibc_SceLibstdcxx__Atomic_compare_exchange_strong.S",
            "SceLibc_SceLibstdcxx__Atomic_compare_exchange_strong_1.S",
            "SceLibc_SceLibstdcxx__Atomic_compare_exchange_strong_2.S",
            "SceLibc_SceLibstdcxx__Atomic_compare_exchange_strong_4.S",
            "SceLibc_SceLibstdcxx__Atomic_compare_exchange_strong_8.S",
            "SceLibc_SceLibstdcxx__Atomic_compare_exchange_weak.S",
            "SceLibc_SceLibstdcxx__Atomic_compare_exchange_weak_1.S",
            "SceLibc_SceLibstdcxx__Atomic_compare_exchange_weak_2.S",
            "SceLibc_SceLibstdcxx__Atomic_compare_exchange_weak_4.S",
            "SceLibc_SceLibstdcxx__Atomic_compare_exchange_weak_8.S",
            "SceLibc_SceLibstdcxx__Atomic_copy.S",
            "SceLibc_SceLibstdcxx__Atomic_exchange.S",
            "SceLibc_SceLibstdcxx__Atomic_exchange_1.S",
            "SceLibc_SceLibstdcxx__Atomic_exchange_2.S",
            "SceLibc_SceLibstdcxx__Atomic_exchange_4.S",
            "SceLibc_SceLibstdcxx__Atomic_exchange_8.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_add_1.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_add_2.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_add_4.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_add_8.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_and_1.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_and_2.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_and_4.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_and_8.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_or_1.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_or_2.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_or_4.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_or_8.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_sub_1.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_sub_2.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_sub_4.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_sub_8.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_xor_1.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_xor_2.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_xor_4.S",
            "SceLibc_SceLibstdcxx__Atomic_fetch_xor_8.S",
            "SceLibc_SceLibstdcxx__Atomic_flag_clear.S",
            "SceLibc_SceLibstdcxx__Atomic_flag_test_and_set.S",
            "SceLibc_SceLibstdcxx__Atomic_is_lock_free_1.S",
            "SceLibc_SceLibstdcxx__Atomic_is_lock_free_2.S",
            "SceLibc_SceLibstdcxx__Atomic_is_lock_free_4.S",
            "SceLibc_SceLibstdcxx__Atomic_is_lock_free_8.S",
            "SceLibc_SceLibstdcxx__Atomic_load_1.S",
            "SceLibc_SceLibstdcxx__Atomic_load_2.S",
            "SceLibc_SceLibstdcxx__Atomic_load_4.S",
            "SceLibc_SceLibstdcxx__Atomic_load_8.S",
            "SceLibc_SceLibstdcxx__Atomic_signal_fence.S",
            "SceLibc_SceLibstdcxx__Atomic_store_1.S",
            "SceLibc_SceLibstdcxx__Atomic_store_2.S",
            "SceLibc_SceLibstdcxx__Atomic_store_4.S",
            "SceLibc_SceLibstdcxx__Atomic_store_8.S",
            "SceLibc_SceLibstdcxx__Atomic_thread_fence.S",
            "SceLibc_SceLibstdcxx__Call_onceEx.S",
            "SceLibc_SceLibstdcxx__Cnd_broadcast.S",
            "SceLibc_SceLibstdcxx__Cnd_destroy.S",
            "SceLibc_SceLibstdcxx__Cnd_do_broadcast_at_thread_exit.S",
            "SceLibc_SceLibstdcxx__Cnd_init.S",
            "SceLibc_SceLibstdcxx__Cnd_register_at_thread_exit.S",
            "SceLibc_SceLibstdcxx__Cnd_signal.S",
            "SceLibc_SceLibstdcxx__Cnd_timedwait.S",
            "SceLibc_SceLibstdcxx__Cnd_unregister_at_thread_exit.S",
            "SceLibc_SceLibstdcxx__Cnd_wait.S",
            "SceLibc_SceLibstdcxx__Do_call.S",
            "SceLibc_SceLibstdcxx__Lock_shared_ptr_spin_lock.S",
            "SceLibc_SceLibstdcxx__Mtx_current_owns.S",
            "SceLibc_SceLibstdcxx__Mtx_destroy.S",
            "SceLibc_SceLibstdcxx__Mtx_init.S",
            "SceLibc_SceLibstdcxx__Mtx_lock.S",
            "SceLibc_SceLibstdcxx__Mtx_timedlock.S",
            "SceLibc_SceLibstdcxx__Mtx_trylock.S",
            "SceLibc_SceLibstdcxx__Mtx_unlock.S",
            "SceLibc_SceLibstdcxx__Restore_state.S",
            "SceLibc_SceLibstdcxx__Save_state.S",
            "SceLibc_SceLibstdcxx__Thrd_abort.S",
            "SceLibc_SceLibstdcxx__Thrd_create.S",
            "SceLibc_SceLibstdcxx__Thrd_current.S",
            "SceLibc_SceLibstdcxx__Thrd_detach.S",
            "SceLibc_SceLibstdcxx__Thrd_equal.S",
            "SceLibc_SceLibstdcxx__Thrd_exit.S",
            "SceLibc_SceLibstdcxx__Thrd_join.S",
            "SceLibc_SceLibstdcxx__Thrd_lt.S",
            "SceLibc_SceLibstdcxx__Thrd_sleep.S",
            "SceLibc_SceLibstdcxx__Thrd_start.S",
            "SceLibc_SceLibstdcxx__Thrd_yield.S",
            "SceLibc_SceLibstdcxx__Unlock_shared_ptr_spin_lock.S",
            "SceLibc_SceLibstdcxx__Unwind_Resume.S",
            "SceLibc_SceLibstdcxx__Xtime_get_ticks.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv116__enum_type_infoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv116__enum_type_infoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv116__enum_type_infoD2Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv117__array_type_infoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv117__array_type_infoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv117__array_type_infoD2Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv117__class_type_infoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv117__class_type_infoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv117__class_type_infoD2Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv117__pbase_type_infoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv117__pbase_type_infoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv117__pbase_type_infoD2Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv119__pointer_type_infoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv119__pointer_type_infoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv119__pointer_type_infoD2Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv120__function_type_infoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv120__function_type_infoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv120__function_type_infoD2Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv120__si_class_type_infoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv120__si_class_type_infoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv120__si_class_type_infoD2Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv121__vmi_class_type_infoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv121__vmi_class_type_infoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv121__vmi_class_type_infoD2Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv123__fundamental_type_infoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv123__fundamental_type_infoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv123__fundamental_type_infoD2Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv129__pointer_to_member_type_infoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv129__pointer_to_member_type_infoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZN10__cxxabiv129__pointer_to_member_type_infoD2Ev.S",
            "SceLibc_SceLibstdcxx__ZN6Dinkum7threads17_Throw_lock_errorEv.S",
            "SceLibc_SceLibstdcxx__ZN6Dinkum7threads21_Throw_resource_errorEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt10bad_typeid4whatEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt10bad_typeid8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt11logic_error4whatEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt11logic_error8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt11range_error8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt12_String_base5_XlenEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt12_String_base5_XranEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt12domain_error8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt12length_error8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt12out_of_range8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt13_codecvt_base11do_encodingEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt13_codecvt_base13do_max_lengthEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt13_codecvt_base16do_always_noconvEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt13bad_exception4whatEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt13bad_exception8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt13runtime_error4whatEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt13runtime_error8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt14overflow_error8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt15underflow_error8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt16invalid_argument8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIcE10do_tolowerEPcPKc.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIcE10do_tolowerEc.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIcE10do_toupperEPcPKc.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIcE10do_toupperEc.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIcE8do_widenEPKcS2_Pc.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIcE8do_widenEc.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIcE9do_narrowEPKcS2_cPc.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIcE9do_narrowEcc.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIwE10do_scan_isEsPKwS2_.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIwE10do_tolowerEPwPKw.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIwE10do_tolowerEw.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIwE10do_toupperEPwPKw.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIwE10do_toupperEw.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIwE11do_scan_notEsPKwS2_.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIwE5do_isEPKwS2_Ps.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIwE5do_isEsw.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIwE8do_widenEPKcS2_Pw.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIwE8do_widenEc.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIwE9do_narrowEPKwS2_cPc.S",
            "SceLibc_SceLibstdcxx__ZNKSt6_ctypeIwE9do_narrowEwc.S",
            "SceLibc_SceLibstdcxx__ZNKSt8_codecvtIccSt9_MbstatetE10do_unshiftERS0_PcS3_RS3_.S",
            "SceLibc_SceLibstdcxx__ZNKSt8_codecvtIccSt9_MbstatetE5do_inERS0_PKcS4_RS4_PcS6_RS6_.S",
            "SceLibc_SceLibstdcxx__ZNKSt8_codecvtIccSt9_MbstatetE6do_outERS0_PKcS4_RS4_PcS6_RS6_.S",
            "SceLibc_SceLibstdcxx__ZNKSt8_codecvtIccSt9_MbstatetE9do_lengthERKS0_PKcS5_j.S",
            "SceLibc_SceLibstdcxx__ZNKSt8_codecvtIwcSt9_MbstatetE10do_unshiftERS0_PcS3_RS3_.S",
            "SceLibc_SceLibstdcxx__ZNKSt8_codecvtIwcSt9_MbstatetE11do_encodingEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt8_codecvtIwcSt9_MbstatetE13do_max_lengthEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt8_codecvtIwcSt9_MbstatetE16do_always_noconvEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt8_codecvtIwcSt9_MbstatetE5do_inERS0_PKcS4_RS4_PwS6_RS6_.S",
            "SceLibc_SceLibstdcxx__ZNKSt8_codecvtIwcSt9_MbstatetE6do_outERS0_PKwS4_RS4_PcS6_RS6_.S",
            "SceLibc_SceLibstdcxx__ZNKSt8_codecvtIwcSt9_MbstatetE9do_lengthERKS0_PKcS5_j.S",
            "SceLibc_SceLibstdcxx__ZNKSt8bad_cast4whatEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt8bad_cast8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt8ios_base7failure8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt9bad_alloc4whatEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt9bad_alloc8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt9exception4whatEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt9exception6_RaiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt9exception8_DoraiseEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt9type_info4nameEv.S",
            "SceLibc_SceLibstdcxx__ZNKSt9type_info6beforeERKS_.S",
            "SceLibc_SceLibstdcxx__ZNKSt9type_infoeqERKS_.S",
            "SceLibc_SceLibstdcxx__ZNKSt9type_infoneERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSdD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSdD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSiD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSiD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSoC1EPSt15basic_streambufIcSt11char_traitsIcEEb.S",
            "SceLibc_SceLibstdcxx__ZNSoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSs5_GrowEjb.S",
            "SceLibc_SceLibstdcxx__ZNSs6assignERKSsjj.S",
            "SceLibc_SceLibstdcxx__ZNSsC1EPKc.S",
            "SceLibc_SceLibstdcxx__ZNSsC1ERKSs.S",
            "SceLibc_SceLibstdcxx__ZNSt10bad_typeidC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt10bad_typeidC1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt10bad_typeidC2ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt10bad_typeidC2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt10bad_typeidD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt10bad_typeidD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt10bad_typeidD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt10bad_typeidaSERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt10istrstreamD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt10istrstreamD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt10istrstreamD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt10ostrstreamC1EPciNSt5_IosbIiE9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt10ostrstreamC2EPciNSt5_IosbIiE9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt10ostrstreamD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt10ostrstreamD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt10ostrstreamD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt11logic_errorC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt11logic_errorC2ERKSs.S",
            "SceLibc_SceLibstdcxx__ZNSt11logic_errorD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt11logic_errorD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt11logic_errorD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt11range_errorC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt11range_errorD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt11range_errorD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt11range_errorD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt11regex_errorD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12bad_weak_ptrD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12domain_errorC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt12domain_errorD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12domain_errorD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12domain_errorD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12future_errorD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12length_errorC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt12length_errorC1ERKSs.S",
            "SceLibc_SceLibstdcxx__ZNSt12length_errorD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12length_errorD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12length_errorD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12out_of_rangeC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt12out_of_rangeC1ERKSs.S",
            "SceLibc_SceLibstdcxx__ZNSt12out_of_rangeD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12out_of_rangeD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12out_of_rangeD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12strstreambuf5_InitEiPcS0_i.S",
            "SceLibc_SceLibstdcxx__ZNSt12strstreambuf5_TidyEv.S",
            "SceLibc_SceLibstdcxx__ZNSt12strstreambuf6freezeEb.S",
            "SceLibc_SceLibstdcxx__ZNSt12strstreambuf7seekoffElNSt5_IosbIiE8_SeekdirENS1_9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt12strstreambuf7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt12strstreambuf8overflowEi.S",
            "SceLibc_SceLibstdcxx__ZNSt12strstreambuf9pbackfailEi.S",
            "SceLibc_SceLibstdcxx__ZNSt12strstreambuf9underflowEv.S",
            "SceLibc_SceLibstdcxx__ZNSt12strstreambufD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12strstreambufD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12strstreambufD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12system_errorD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt12system_errorD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13_codecvt_baseD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13_codecvt_baseD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13bad_exceptionC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt13bad_exceptionC1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13bad_exceptionC2ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt13bad_exceptionC2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13bad_exceptionD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13bad_exceptionD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13bad_exceptionD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13bad_exceptionaSERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEE4syncEv.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEE5_LockEv.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEE5uflowEv.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEE6setbufEPci.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEE7_UnlockEv.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEE7seekoffElNSt5_IosbIiE8_SeekdirENS4_9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEE7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEE8overflowEi.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEE9_EndwriteEv.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEE9pbackfailEi.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEE9underflowEv.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEED0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIcSt11char_traitsIcEED1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEE4syncEv.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEE5_LockEv.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEE5uflowEv.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEE6setbufEPwi.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEE7_UnlockEv.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEE7seekoffElNSt5_IosbIiE8_SeekdirENS4_9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEE7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEE8overflowEj.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEE9_EndwriteEv.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEE9pbackfailEj.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEE9underflowEv.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEED0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_filebufIwSt11char_traitsIwEED1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_istreamIwSt11char_traitsIwEED0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_istreamIwSt11char_traitsIwEED1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_ostreamIwSt11char_traitsIwEEC1EPSt15basic_streambufIwS1_Eb.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_ostreamIwSt11char_traitsIwEED0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13basic_ostreamIwSt11char_traitsIwEED1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13runtime_errorC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt13runtime_errorD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13runtime_errorD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt13runtime_errorD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt14overflow_errorC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt14overflow_errorD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt14overflow_errorD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt14overflow_errorD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE4syncEv.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE5_LockEv.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE5uflowEv.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE6setbufEPci.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE6xsgetnEPci.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE6xsputnEPKci.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE7_UnlockEv.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE7seekoffElNSt5_IosbIiE8_SeekdirENS4_9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE8overflowEi.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE9pbackfailEi.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE9showmanycEv.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEE9underflowEv.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEED0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIcSt11char_traitsIcEED1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE4syncEv.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE5_LockEv.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE5uflowEv.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE6setbufEPwi.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE6xsgetnEPwi.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE6xsputnEPKwi.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE7_UnlockEv.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE7seekoffElNSt5_IosbIiE8_SeekdirENS4_9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE7seekposESt4fposISt9_MbstatetENSt5_IosbIiE9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE8overflowEj.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE9pbackfailEj.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE9showmanycEv.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEE9underflowEv.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEED0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt15basic_streambufIwSt11char_traitsIwEED1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt15underflow_errorC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt15underflow_errorD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt15underflow_errorD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt15underflow_errorD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt16invalid_argumentC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt16invalid_argumentD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt16invalid_argumentD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt16invalid_argumentD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt16nested_exceptionD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt16nested_exceptionD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt16nested_exceptionD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt17bad_function_callD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt20bad_array_new_lengthD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt4_Pad7_LaunchEPij.S",
            "SceLibc_SceLibstdcxx__ZNSt4_Pad8_ReleaseEv.S",
            "SceLibc_SceLibstdcxx__ZNSt4_PadC1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt4_PadC2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt4_PadD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt4_PadD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt6_Mutex5_LockEv.S",
            "SceLibc_SceLibstdcxx__ZNSt6_Mutex7_UnlockEv.S",
            "SceLibc_SceLibstdcxx__ZNSt6_MutexC1ESt14_Uninitialized.S",
            "SceLibc_SceLibstdcxx__ZNSt6_MutexC1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt6_MutexC2ESt14_Uninitialized.S",
            "SceLibc_SceLibstdcxx__ZNSt6_MutexC2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt6_MutexD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt6_MutexD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt6_WinitC1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt6_WinitC2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt6_WinitD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt6_WinitD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt6_ctypeIcED0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt6_ctypeIcED1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt6_ctypeIwED0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt6_ctypeIwED1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8_codecvtIccSt9_MbstatetED0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8_codecvtIccSt9_MbstatetED1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8_codecvtIwcSt9_MbstatetED0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8_codecvtIwcSt9_MbstatetED1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8bad_castC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt8bad_castC1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8bad_castC2ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt8bad_castC2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8bad_castD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8bad_castD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8bad_castD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8bad_castaSERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base17register_callbackEPFvNS_5eventERS_iEi.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base4InitC1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base4InitC2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base4InitD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base4InitD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base5_InitEv.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base5_TidyEv.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base5clearENSt5_IosbIiE8_IostateEb.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base7_AddstdEPS_.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base7_AddstdEv.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base7copyfmtERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base7failureC1ERKS0_.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base7failureC1ERKSs.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base7failureD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base7failureD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base8_CallfnsENS_5eventE.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base8_FindarrEi.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_baseD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_baseD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_baseD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9bad_allocC1EPKc.S",
            "SceLibc_SceLibstdcxx__ZNSt9bad_allocC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt9bad_allocC1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9bad_allocC2EPKc.S",
            "SceLibc_SceLibstdcxx__ZNSt9bad_allocC2ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt9bad_allocC2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9bad_allocD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9bad_allocD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9bad_allocD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9bad_allocaSERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt9basic_iosIcSt11char_traitsIcEED0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9basic_iosIcSt11char_traitsIcEED1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9basic_iosIwSt11char_traitsIwEED0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9basic_iosIwSt11char_traitsIwEED1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9exception18_Set_raise_handlerEPFvRKS_E.S",
            "SceLibc_SceLibstdcxx__ZNSt9exceptionC1ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt9exceptionC1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9exceptionC2ERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt9exceptionC2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9exceptionD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9exceptionD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9exceptionD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9exceptionaSERKS_.S",
            "SceLibc_SceLibstdcxx__ZNSt9strstreamC1EPciNSt5_IosbIiE9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt9strstreamC2EPciNSt5_IosbIiE9_OpenmodeE.S",
            "SceLibc_SceLibstdcxx__ZNSt9strstreamD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9strstreamD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9strstreamD2Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9type_infoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9type_infoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZNSt9type_infoD2Ev.S",
            "SceLibc_SceLibstdcxx__ZSt10_Rng_abortPKc.S",
            "SceLibc_SceLibstdcxx__ZSt10adopt_lock.S",
            "SceLibc_SceLibstdcxx__ZSt10defer_lock.S",
            "SceLibc_SceLibstdcxx__ZSt10unexpectedv.S",
            "SceLibc_SceLibstdcxx__ZSt11_Xbad_allocv.S",
            "SceLibc_SceLibstdcxx__ZSt11setiosflagsNSt5_IosbIiE9_FmtflagsE.S",
            "SceLibc_SceLibstdcxx__ZSt11try_to_lock.S",
            "SceLibc_SceLibstdcxx__ZSt12setprecisioni.S",
            "SceLibc_SceLibstdcxx__ZSt13_Syserror_mapi.S",
            "SceLibc_SceLibstdcxx__ZSt13_Xregex_errorNSt15regex_constants10error_typeE.S",
            "SceLibc_SceLibstdcxx__ZSt13resetiosflagsNSt5_IosbIiE9_FmtflagsE.S",
            "SceLibc_SceLibstdcxx__ZSt13set_terminatePFvvE.S",
            "SceLibc_SceLibstdcxx__ZSt14_Debug_messagePKcS0_.S",
            "SceLibc_SceLibstdcxx__ZSt14_Debug_messagePKcS0_j.S",
            "SceLibc_SceLibstdcxx__ZSt14_Random_devicev.S",
            "SceLibc_SceLibstdcxx__ZSt14_Throw_C_errori.S",
            "SceLibc_SceLibstdcxx__ZSt14_Xlength_errorPKc.S",
            "SceLibc_SceLibstdcxx__ZSt14_Xout_of_rangePKc.S",
            "SceLibc_SceLibstdcxx__ZSt14set_unexpectedPFvvE.S",
            "SceLibc_SceLibstdcxx__ZSt15_Xruntime_errorPKc.S",
            "SceLibc_SceLibstdcxx__ZSt15get_new_handlerv.S",
            "SceLibc_SceLibstdcxx__ZSt15set_new_handlerPFvvE.S",
            "SceLibc_SceLibstdcxx__ZSt16_Throw_Cpp_errori.S",
            "SceLibc_SceLibstdcxx__ZSt16_Xoverflow_errorPKc.S",
            "SceLibc_SceLibstdcxx__ZSt16_get_new_handlerv.S",
            "SceLibc_SceLibstdcxx__ZSt17_Future_error_mapi.S",
            "SceLibc_SceLibstdcxx__ZSt18_Xinvalid_argumentPKc.S",
            "SceLibc_SceLibstdcxx__ZSt18uncaught_exceptionv.S",
            "SceLibc_SceLibstdcxx__ZSt19_Throw_future_errorRKSt10error_code.S",
            "SceLibc_SceLibstdcxx__ZSt19_Xbad_function_callv.S",
            "SceLibc_SceLibstdcxx__ZSt22_Get_future_error_whati.S",
            "SceLibc_SceLibstdcxx__ZSt22_Random_device_entropyv.S",
            "SceLibc_SceLibstdcxx__ZSt25_Rethrow_future_exceptionSt13exception_ptr.S",
            "SceLibc_SceLibstdcxx__ZSt4setwi.S",
            "SceLibc_SceLibstdcxx__ZSt6_ThrowRKSt9exception.S",
            "SceLibc_SceLibstdcxx__ZSt7_FiopenPKcNSt5_IosbIiE9_OpenmodeEi.S",
            "SceLibc_SceLibstdcxx__ZSt7_FiopenPKwNSt5_IosbIiE9_OpenmodeEi.S",
            "SceLibc_SceLibstdcxx__ZSt7_MP_AddPyy.S",
            "SceLibc_SceLibstdcxx__ZSt7_MP_GetPy.S",
            "SceLibc_SceLibstdcxx__ZSt7_MP_MulPyyy.S",
            "SceLibc_SceLibstdcxx__ZSt7_MP_RemPyy.S",
            "SceLibc_SceLibstdcxx__ZSt7setbasei.S",
            "SceLibc_SceLibstdcxx__ZSt8_XLgammad.S",
            "SceLibc_SceLibstdcxx__ZSt8_XLgammae.S",
            "SceLibc_SceLibstdcxx__ZSt8_XLgammaf.S",
            "SceLibc_SceLibstdcxx__ZSt9terminatev.S",
            "SceLibc_SceLibstdcxx__ZThn8_NSdD0Ev.S",
            "SceLibc_SceLibstdcxx__ZThn8_NSdD1Ev.S",
            "SceLibc_SceLibstdcxx__ZThn8_NSt9strstreamD0Ev.S",
            "SceLibc_SceLibstdcxx__ZThn8_NSt9strstreamD1Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSdD0Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSdD1Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSiD0Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSiD1Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSoD0Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSoD1Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSt10istrstreamD0Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSt10istrstreamD1Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSt10ostrstreamD0Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSt10ostrstreamD1Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSt13basic_istreamIwSt11char_traitsIwEED0Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSt13basic_istreamIwSt11char_traitsIwEED1Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSt13basic_ostreamIwSt11char_traitsIwEED0Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSt13basic_ostreamIwSt11char_traitsIwEED1Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSt9strstreamD0Ev.S",
            "SceLibc_SceLibstdcxx__ZTv0_n12_NSt9strstreamD1Ev.S",
            "SceLibc_SceLibstdcxx__ZdaPv.S",
            "SceLibc_SceLibstdcxx__ZdaPvRKSt9nothrow_t.S",
            "SceLibc_SceLibstdcxx__ZdaPvS_.S",
            "SceLibc_SceLibstdcxx__ZdlPv.S",
            "SceLibc_SceLibstdcxx__ZdlPvRKSt9nothrow_t.S",
            "SceLibc_SceLibstdcxx__ZdlPvS_.S",
            "SceLibc_SceLibstdcxx__Znaj.S",
            "SceLibc_SceLibstdcxx__ZnajRKSt9nothrow_t.S",
            "SceLibc_SceLibstdcxx__Znwj.S",
            "SceLibc_SceLibstdcxx__ZnwjRKSt9nothrow_t.S",
            "SceLibc_SceLibstdcxx___aeabi_unwind_cpp_pr0.S",
            "SceLibc_SceLibstdcxx___aeabi_unwind_cpp_pr1.S",
            "SceLibc_SceLibstdcxx___aeabi_unwind_cpp_pr2.S",
            "SceLibc_SceLibstdcxx___cxa_allocate_exception.S",
            "SceLibc_SceLibstdcxx___cxa_begin_catch.S",
            "SceLibc_SceLibstdcxx___cxa_begin_cleanup.S",
            "SceLibc_SceLibstdcxx___cxa_call_terminate.S",
            "SceLibc_SceLibstdcxx___cxa_call_unexpected.S",
            "SceLibc_SceLibstdcxx___cxa_current_primary_exception.S",
            "SceLibc_SceLibstdcxx___cxa_decrement_exception_refcount.S",
            "SceLibc_SceLibstdcxx___cxa_end_catch.S",
            "SceLibc_SceLibstdcxx___cxa_end_cleanup.S",
            "SceLibc_SceLibstdcxx___cxa_free_exception.S",
            "SceLibc_SceLibstdcxx___cxa_get_exception_ptr.S",
            "SceLibc_SceLibstdcxx___cxa_increment_exception_refcount.S",
            "SceLibc_SceLibstdcxx___cxa_rethrow.S",
            "SceLibc_SceLibstdcxx___cxa_rethrow_primary_exception.S",
            "SceLibc_SceLibstdcxx___cxa_throw.S",
            "SceLibc_SceLibstdcxx___snc_personality_v0.S",
            "SceLibc_SceLibstdcxx_xtime_get.S",
            "SceLibc_SceLibstdcxx__PJP_CPP_Copyright.S",
            "SceLibc_SceLibstdcxx__ZNSbIwSt11char_traitsIwESaIwEE4nposE.S",
            "SceLibc_SceLibstdcxx__ZNSs4nposE.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders2_1E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders2_2E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders2_3E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders2_4E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders2_5E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders2_6E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders2_7E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders2_8E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders2_9E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders3_10E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders3_11E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders3_12E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders3_13E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders3_14E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders3_15E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders3_16E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders3_17E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders3_18E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders3_19E.S",
            "SceLibc_SceLibstdcxx__ZNSt12placeholders3_20E.S",
            "SceLibc_SceLibstdcxx__ZNSt13_Num_int_base10is_boundedE.S",
            "SceLibc_SceLibstdcxx__ZNSt13_Num_int_base10is_integerE.S",
            "SceLibc_SceLibstdcxx__ZNSt13_Num_int_base14is_specializedE.S",
            "SceLibc_SceLibstdcxx__ZNSt13_Num_int_base5radixE.S",
            "SceLibc_SceLibstdcxx__ZNSt13_Num_int_base8is_exactE.S",
            "SceLibc_SceLibstdcxx__ZNSt13_Num_int_base9is_moduloE.S",
            "SceLibc_SceLibstdcxx__ZNSt13_Regex_traitsIcE6_NamesE.S",
            "SceLibc_SceLibstdcxx__ZNSt13_Regex_traitsIwE6_NamesE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIaE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIaE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIaE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIbE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIbE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIbE9is_moduloE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIbE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIcE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIcE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIcE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIdE12max_exponentE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIdE12min_exponentE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIdE14max_exponent10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIdE14min_exponent10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIdE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIdE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIeE12max_exponentE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIeE12min_exponentE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIeE14max_exponent10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIeE14min_exponent10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIeE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIeE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIfE12max_exponentE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIfE12min_exponentE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIfE14max_exponent10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIfE14min_exponent10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIfE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIfE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIhE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIhE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIhE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIiE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIiE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIiE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIjE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIjE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIjE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIlE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIlE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIlE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsImE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsImE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsImE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIsE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIsE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIsE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsItE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsItE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsItE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIwE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIwE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIwE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIxE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIxE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIxE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIyE6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIyE8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt14numeric_limitsIyE9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base10has_denormE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base10is_boundedE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base10is_integerE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base11round_styleE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base12has_infinityE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base13has_quiet_NaNE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base14is_specializedE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base15has_denorm_lossE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base15tinyness_beforeE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base17has_signaling_NaNE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base5radixE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base5trapsE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base8is_exactE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base9is_iec559E.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base9is_moduloE.S",
            "SceLibc_SceLibstdcxx__ZNSt15_Num_float_base9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZNSt4fposISt9_MbstatetE4_StzE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE10_NoreplaceE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE2inE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE3appE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE3ateE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE3begE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE3curE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE3decE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE3endE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE3hexE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE3octE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE3outE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE5truncE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE6badbitE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE6binaryE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE6skipwsE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE7failbitE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE7goodbitE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE7unitbufE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE9_NocreateE.S",
            "SceLibc_SceLibstdcxx__ZNSt5_IosbIiE9basefieldE.S",
            "SceLibc_SceLibstdcxx__ZNSt6_Winit9_Init_cntE.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base4Init9_Init_cntE.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base5_SyncE.S",
            "SceLibc_SceLibstdcxx__ZNSt8ios_base6_IndexE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base10has_denormE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base10is_boundedE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base10is_integerE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base11round_styleE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base12has_infinityE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base12max_exponentE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base12min_exponentE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base13has_quiet_NaNE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base14is_specializedE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base14max_exponent10E.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base14min_exponent10E.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base15has_denorm_lossE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base15tinyness_beforeE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base17has_signaling_NaNE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base5radixE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base5trapsE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base6digitsE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base8digits10E.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base8is_exactE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base9is_iec559E.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base9is_moduloE.S",
            "SceLibc_SceLibstdcxx__ZNSt9_Num_base9is_signedE.S",
            "SceLibc_SceLibstdcxx__ZSt14_Raise_handler.S",
            "SceLibc_SceLibstdcxx__ZSt3cin.S",
            "SceLibc_SceLibstdcxx__ZSt4_Fpz.S",
            "SceLibc_SceLibstdcxx__ZSt4cerr.S",
            "SceLibc_SceLibstdcxx__ZSt4clog.S",
            "SceLibc_SceLibstdcxx__ZSt4cout.S",
            "SceLibc_SceLibstdcxx__ZSt4wcin.S",
            "SceLibc_SceLibstdcxx__ZSt5wcerr.S",
            "SceLibc_SceLibstdcxx__ZSt5wclog.S",
            "SceLibc_SceLibstdcxx__ZSt5wcout.S",
            "SceLibc_SceLibstdcxx__ZSt7_BADOFF.S",
            "SceLibc_SceLibstdcxx__ZSt7nothrow.S",
            "SceLibc_SceLibstdcxx__ZTI15__simd64_int8_t.S",
            "SceLibc_SceLibstdcxx__ZTI16__simd128_int8_t.S",
            "SceLibc_SceLibstdcxx__ZTI16__simd64_int16_t.S",
            "SceLibc_SceLibstdcxx__ZTI16__simd64_int32_t.S",
            "SceLibc_SceLibstdcxx__ZTI16__simd64_int64_t.S",
            "SceLibc_SceLibstdcxx__ZTI16__simd64_poly8_t.S",
            "SceLibc_SceLibstdcxx__ZTI16__simd64_uint8_t.S",
            "SceLibc_SceLibstdcxx__ZTI17__simd128_int16_t.S",
            "SceLibc_SceLibstdcxx__ZTI17__simd128_int32_t.S",
            "SceLibc_SceLibstdcxx__ZTI17__simd128_int64_t.S",
            "SceLibc_SceLibstdcxx__ZTI17__simd128_poly8_t.S",
            "SceLibc_SceLibstdcxx__ZTI17__simd128_uint8_t.S",
            "SceLibc_SceLibstdcxx__ZTI17__simd64_poly16_t.S",
            "SceLibc_SceLibstdcxx__ZTI17__simd64_uint16_t.S",
            "SceLibc_SceLibstdcxx__ZTI17__simd64_uint32_t.S",
            "SceLibc_SceLibstdcxx__ZTI17__simd64_uint64_t.S",
            "SceLibc_SceLibstdcxx__ZTI18__simd128_poly16_t.S",
            "SceLibc_SceLibstdcxx__ZTI18__simd128_uint16_t.S",
            "SceLibc_SceLibstdcxx__ZTI18__simd128_uint32_t.S",
            "SceLibc_SceLibstdcxx__ZTI18__simd128_uint64_t.S",
            "SceLibc_SceLibstdcxx__ZTI18__simd64_float16_t.S",
            "SceLibc_SceLibstdcxx__ZTI18__simd64_float32_t.S",
            "SceLibc_SceLibstdcxx__ZTI19__simd128_float16_t.S",
            "SceLibc_SceLibstdcxx__ZTI19__simd128_float32_t.S",
            "SceLibc_SceLibstdcxx__ZTIDh.S",
            "SceLibc_SceLibstdcxx__ZTIDi.S",
            "SceLibc_SceLibstdcxx__ZTIDn.S",
            "SceLibc_SceLibstdcxx__ZTIDs.S",
            "SceLibc_SceLibstdcxx__ZTIN10__cxxabiv116__enum_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTIN10__cxxabiv117__array_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTIN10__cxxabiv117__class_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTIN10__cxxabiv117__pbase_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTIN10__cxxabiv119__pointer_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTIN10__cxxabiv120__function_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTIN10__cxxabiv120__si_class_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTIN10__cxxabiv121__vmi_class_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTIN10__cxxabiv123__fundamental_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTIN10__cxxabiv129__pointer_to_member_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTINSt8ios_base7failureE.S",
            "SceLibc_SceLibstdcxx__ZTIP15__simd64_int8_t.S",
            "SceLibc_SceLibstdcxx__ZTIP16__simd128_int8_t.S",
            "SceLibc_SceLibstdcxx__ZTIP16__simd64_int16_t.S",
            "SceLibc_SceLibstdcxx__ZTIP16__simd64_int32_t.S",
            "SceLibc_SceLibstdcxx__ZTIP16__simd64_int64_t.S",
            "SceLibc_SceLibstdcxx__ZTIP16__simd64_poly8_t.S",
            "SceLibc_SceLibstdcxx__ZTIP16__simd64_uint8_t.S",
            "SceLibc_SceLibstdcxx__ZTIP17__simd128_int16_t.S",
            "SceLibc_SceLibstdcxx__ZTIP17__simd128_int32_t.S",
            "SceLibc_SceLibstdcxx__ZTIP17__simd128_int64_t.S",
            "SceLibc_SceLibstdcxx__ZTIP17__simd128_poly8_t.S",
            "SceLibc_SceLibstdcxx__ZTIP17__simd128_uint8_t.S",
            "SceLibc_SceLibstdcxx__ZTIP17__simd64_poly16_t.S",
            "SceLibc_SceLibstdcxx__ZTIP17__simd64_uint16_t.S",
            "SceLibc_SceLibstdcxx__ZTIP17__simd64_uint32_t.S",
            "SceLibc_SceLibstdcxx__ZTIP17__simd64_uint64_t.S",
            "SceLibc_SceLibstdcxx__ZTIP18__simd128_poly16_t.S",
            "SceLibc_SceLibstdcxx__ZTIP18__simd128_uint16_t.S",
            "SceLibc_SceLibstdcxx__ZTIP18__simd128_uint32_t.S",
            "SceLibc_SceLibstdcxx__ZTIP18__simd128_uint64_t.S",
            "SceLibc_SceLibstdcxx__ZTIP18__simd64_float16_t.S",
            "SceLibc_SceLibstdcxx__ZTIP18__simd64_float32_t.S",
            "SceLibc_SceLibstdcxx__ZTIP19__simd128_float16_t.S",
            "SceLibc_SceLibstdcxx__ZTIP19__simd128_float32_t.S",
            "SceLibc_SceLibstdcxx__ZTIPDh.S",
            "SceLibc_SceLibstdcxx__ZTIPDi.S",
            "SceLibc_SceLibstdcxx__ZTIPDn.S",
            "SceLibc_SceLibstdcxx__ZTIPDs.S",
            "SceLibc_SceLibstdcxx__ZTIPK15__simd64_int8_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK16__simd128_int8_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK16__simd64_int16_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK16__simd64_int32_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK16__simd64_int64_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK16__simd64_poly8_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK16__simd64_uint8_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK17__simd128_int16_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK17__simd128_int32_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK17__simd128_int64_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK17__simd128_poly8_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK17__simd128_uint8_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK17__simd64_poly16_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK17__simd64_uint16_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK17__simd64_uint32_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK17__simd64_uint64_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK18__simd128_poly16_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK18__simd128_uint16_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK18__simd128_uint32_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK18__simd128_uint64_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK18__simd64_float16_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK18__simd64_float32_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK19__simd128_float16_t.S",
            "SceLibc_SceLibstdcxx__ZTIPK19__simd128_float32_t.S",
            "SceLibc_SceLibstdcxx__ZTIPKDh.S",
            "SceLibc_SceLibstdcxx__ZTIPKDi.S",
            "SceLibc_SceLibstdcxx__ZTIPKDn.S",
            "SceLibc_SceLibstdcxx__ZTIPKDs.S",
            "SceLibc_SceLibstdcxx__ZTIPKa.S",
            "SceLibc_SceLibstdcxx__ZTIPKb.S",
            "SceLibc_SceLibstdcxx__ZTIPKc.S",
            "SceLibc_SceLibstdcxx__ZTIPKd.S",
            "SceLibc_SceLibstdcxx__ZTIPKe.S",
            "SceLibc_SceLibstdcxx__ZTIPKf.S",
            "SceLibc_SceLibstdcxx__ZTIPKh.S",
            "SceLibc_SceLibstdcxx__ZTIPKi.S",
            "SceLibc_SceLibstdcxx__ZTIPKj.S",
            "SceLibc_SceLibstdcxx__ZTIPKl.S",
            "SceLibc_SceLibstdcxx__ZTIPKm.S",
            "SceLibc_SceLibstdcxx__ZTIPKs.S",
            "SceLibc_SceLibstdcxx__ZTIPKt.S",
            "SceLibc_SceLibstdcxx__ZTIPKv.S",
            "SceLibc_SceLibstdcxx__ZTIPKw.S",
            "SceLibc_SceLibstdcxx__ZTIPKx.S",
            "SceLibc_SceLibstdcxx__ZTIPKy.S",
            "SceLibc_SceLibstdcxx__ZTIPa.S",
            "SceLibc_SceLibstdcxx__ZTIPb.S",
            "SceLibc_SceLibstdcxx__ZTIPc.S",
            "SceLibc_SceLibstdcxx__ZTIPd.S",
            "SceLibc_SceLibstdcxx__ZTIPe.S",
            "SceLibc_SceLibstdcxx__ZTIPf.S",
            "SceLibc_SceLibstdcxx__ZTIPh.S",
            "SceLibc_SceLibstdcxx__ZTIPi.S",
            "SceLibc_SceLibstdcxx__ZTIPj.S",
            "SceLibc_SceLibstdcxx__ZTIPl.S",
            "SceLibc_SceLibstdcxx__ZTIPm.S",
            "SceLibc_SceLibstdcxx__ZTIPs.S",
            "SceLibc_SceLibstdcxx__ZTIPt.S",
            "SceLibc_SceLibstdcxx__ZTIPv.S",
            "SceLibc_SceLibstdcxx__ZTIPw.S",
            "SceLibc_SceLibstdcxx__ZTIPx.S",
            "SceLibc_SceLibstdcxx__ZTIPy.S",
            "SceLibc_SceLibstdcxx__ZTISd.S",
            "SceLibc_SceLibstdcxx__ZTISi.S",
            "SceLibc_SceLibstdcxx__ZTISo.S",
            "SceLibc_SceLibstdcxx__ZTISt10bad_typeid.S",
            "SceLibc_SceLibstdcxx__ZTISt10istrstream.S",
            "SceLibc_SceLibstdcxx__ZTISt10ostrstream.S",
            "SceLibc_SceLibstdcxx__ZTISt11_ctype_base.S",
            "SceLibc_SceLibstdcxx__ZTISt11logic_error.S",
            "SceLibc_SceLibstdcxx__ZTISt11range_error.S",
            "SceLibc_SceLibstdcxx__ZTISt11regex_error.S",
            "SceLibc_SceLibstdcxx__ZTISt12bad_weak_ptr.S",
            "SceLibc_SceLibstdcxx__ZTISt12domain_error.S",
            "SceLibc_SceLibstdcxx__ZTISt12future_error.S",
            "SceLibc_SceLibstdcxx__ZTISt12length_error.S",
            "SceLibc_SceLibstdcxx__ZTISt12out_of_range.S",
            "SceLibc_SceLibstdcxx__ZTISt12strstreambuf.S",
            "SceLibc_SceLibstdcxx__ZTISt12system_error.S",
            "SceLibc_SceLibstdcxx__ZTISt13_codecvt_base.S",
            "SceLibc_SceLibstdcxx__ZTISt13bad_exception.S",
            "SceLibc_SceLibstdcxx__ZTISt13basic_filebufIcSt11char_traitsIcEE.S",
            "SceLibc_SceLibstdcxx__ZTISt13basic_filebufIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTISt13basic_istreamIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTISt13basic_ostreamIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTISt13runtime_error.S",
            "SceLibc_SceLibstdcxx__ZTISt14overflow_error.S",
            "SceLibc_SceLibstdcxx__ZTISt15basic_streambufIcSt11char_traitsIcEE.S",
            "SceLibc_SceLibstdcxx__ZTISt15basic_streambufIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTISt15underflow_error.S",
            "SceLibc_SceLibstdcxx__ZTISt16invalid_argument.S",
            "SceLibc_SceLibstdcxx__ZTISt16nested_exception.S",
            "SceLibc_SceLibstdcxx__ZTISt17bad_function_call.S",
            "SceLibc_SceLibstdcxx__ZTISt20bad_array_new_length.S",
            "SceLibc_SceLibstdcxx__ZTISt5_IosbIiE.S",
            "SceLibc_SceLibstdcxx__ZTISt6_ctypeIcE.S",
            "SceLibc_SceLibstdcxx__ZTISt6_ctypeIwE.S",
            "SceLibc_SceLibstdcxx__ZTISt8_codecvtIccSt9_MbstatetE.S",
            "SceLibc_SceLibstdcxx__ZTISt8_codecvtIwcSt9_MbstatetE.S",
            "SceLibc_SceLibstdcxx__ZTISt8bad_cast.S",
            "SceLibc_SceLibstdcxx__ZTISt8ios_base.S",
            "SceLibc_SceLibstdcxx__ZTISt9bad_alloc.S",
            "SceLibc_SceLibstdcxx__ZTISt9basic_iosIcSt11char_traitsIcEE.S",
            "SceLibc_SceLibstdcxx__ZTISt9basic_iosIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTISt9exception.S",
            "SceLibc_SceLibstdcxx__ZTISt9strstream.S",
            "SceLibc_SceLibstdcxx__ZTISt9type_info.S",
            "SceLibc_SceLibstdcxx__ZTIa.S",
            "SceLibc_SceLibstdcxx__ZTIb.S",
            "SceLibc_SceLibstdcxx__ZTIc.S",
            "SceLibc_SceLibstdcxx__ZTId.S",
            "SceLibc_SceLibstdcxx__ZTIe.S",
            "SceLibc_SceLibstdcxx__ZTIf.S",
            "SceLibc_SceLibstdcxx__ZTIh.S",
            "SceLibc_SceLibstdcxx__ZTIi.S",
            "SceLibc_SceLibstdcxx__ZTIj.S",
            "SceLibc_SceLibstdcxx__ZTIl.S",
            "SceLibc_SceLibstdcxx__ZTIm.S",
            "SceLibc_SceLibstdcxx__ZTIs.S",
            "SceLibc_SceLibstdcxx__ZTIt.S",
            "SceLibc_SceLibstdcxx__ZTIv.S",
            "SceLibc_SceLibstdcxx__ZTIw.S",
            "SceLibc_SceLibstdcxx__ZTIx.S",
            "SceLibc_SceLibstdcxx__ZTIy.S",
            "SceLibc_SceLibstdcxx__ZTS15__simd64_int8_t.S",
            "SceLibc_SceLibstdcxx__ZTS16__simd128_int8_t.S",
            "SceLibc_SceLibstdcxx__ZTS16__simd64_int16_t.S",
            "SceLibc_SceLibstdcxx__ZTS16__simd64_int32_t.S",
            "SceLibc_SceLibstdcxx__ZTS16__simd64_int64_t.S",
            "SceLibc_SceLibstdcxx__ZTS16__simd64_poly8_t.S",
            "SceLibc_SceLibstdcxx__ZTS16__simd64_uint8_t.S",
            "SceLibc_SceLibstdcxx__ZTS17__simd128_int16_t.S",
            "SceLibc_SceLibstdcxx__ZTS17__simd128_int32_t.S",
            "SceLibc_SceLibstdcxx__ZTS17__simd128_int64_t.S",
            "SceLibc_SceLibstdcxx__ZTS17__simd128_poly8_t.S",
            "SceLibc_SceLibstdcxx__ZTS17__simd128_uint8_t.S",
            "SceLibc_SceLibstdcxx__ZTS17__simd64_poly16_t.S",
            "SceLibc_SceLibstdcxx__ZTS17__simd64_uint16_t.S",
            "SceLibc_SceLibstdcxx__ZTS17__simd64_uint32_t.S",
            "SceLibc_SceLibstdcxx__ZTS17__simd64_uint64_t.S",
            "SceLibc_SceLibstdcxx__ZTS18__simd128_poly16_t.S",
            "SceLibc_SceLibstdcxx__ZTS18__simd128_uint16_t.S",
            "SceLibc_SceLibstdcxx__ZTS18__simd128_uint32_t.S",
            "SceLibc_SceLibstdcxx__ZTS18__simd128_uint64_t.S",
            "SceLibc_SceLibstdcxx__ZTS18__simd64_float16_t.S",
            "SceLibc_SceLibstdcxx__ZTS18__simd64_float32_t.S",
            "SceLibc_SceLibstdcxx__ZTS19__simd128_float16_t.S",
            "SceLibc_SceLibstdcxx__ZTS19__simd128_float32_t.S",
            "SceLibc_SceLibstdcxx__ZTSDh.S",
            "SceLibc_SceLibstdcxx__ZTSDi.S",
            "SceLibc_SceLibstdcxx__ZTSDs.S",
            "SceLibc_SceLibstdcxx__ZTSN10__cxxabiv116__enum_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTSN10__cxxabiv117__array_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTSN10__cxxabiv117__class_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTSN10__cxxabiv117__pbase_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTSN10__cxxabiv119__pointer_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTSN10__cxxabiv120__function_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTSN10__cxxabiv120__si_class_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTSN10__cxxabiv121__vmi_class_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTSN10__cxxabiv123__fundamental_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTSN10__cxxabiv129__pointer_to_member_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTSNSt8ios_base7failureE.S",
            "SceLibc_SceLibstdcxx__ZTSP15__simd64_int8_t.S",
            "SceLibc_SceLibstdcxx__ZTSP16__simd128_int8_t.S",
            "SceLibc_SceLibstdcxx__ZTSP16__simd64_int16_t.S",
            "SceLibc_SceLibstdcxx__ZTSP16__simd64_int32_t.S",
            "SceLibc_SceLibstdcxx__ZTSP16__simd64_int64_t.S",
            "SceLibc_SceLibstdcxx__ZTSP16__simd64_poly8_t.S",
            "SceLibc_SceLibstdcxx__ZTSP16__simd64_uint8_t.S",
            "SceLibc_SceLibstdcxx__ZTSP17__simd128_int16_t.S",
            "SceLibc_SceLibstdcxx__ZTSP17__simd128_int32_t.S",
            "SceLibc_SceLibstdcxx__ZTSP17__simd128_int64_t.S",
            "SceLibc_SceLibstdcxx__ZTSP17__simd128_poly8_t.S",
            "SceLibc_SceLibstdcxx__ZTSP17__simd128_uint8_t.S",
            "SceLibc_SceLibstdcxx__ZTSP17__simd64_poly16_t.S",
            "SceLibc_SceLibstdcxx__ZTSP17__simd64_uint16_t.S",
            "SceLibc_SceLibstdcxx__ZTSP17__simd64_uint32_t.S",
            "SceLibc_SceLibstdcxx__ZTSP17__simd64_uint64_t.S",
            "SceLibc_SceLibstdcxx__ZTSP18__simd128_poly16_t.S",
            "SceLibc_SceLibstdcxx__ZTSP18__simd128_uint16_t.S",
            "SceLibc_SceLibstdcxx__ZTSP18__simd128_uint32_t.S",
            "SceLibc_SceLibstdcxx__ZTSP18__simd128_uint64_t.S",
            "SceLibc_SceLibstdcxx__ZTSP18__simd64_float16_t.S",
            "SceLibc_SceLibstdcxx__ZTSP18__simd64_float32_t.S",
            "SceLibc_SceLibstdcxx__ZTSP19__simd128_float16_t.S",
            "SceLibc_SceLibstdcxx__ZTSP19__simd128_float32_t.S",
            "SceLibc_SceLibstdcxx__ZTSPDh.S",
            "SceLibc_SceLibstdcxx__ZTSPDi.S",
            "SceLibc_SceLibstdcxx__ZTSPDs.S",
            "SceLibc_SceLibstdcxx__ZTSPK15__simd64_int8_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK16__simd128_int8_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK16__simd64_int16_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK16__simd64_int32_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK16__simd64_int64_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK16__simd64_poly8_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK16__simd64_uint8_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK17__simd128_int16_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK17__simd128_int32_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK17__simd128_int64_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK17__simd128_poly8_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK17__simd128_uint8_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK17__simd64_poly16_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK17__simd64_uint16_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK17__simd64_uint32_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK17__simd64_uint64_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK18__simd128_poly16_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK18__simd128_uint16_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK18__simd128_uint32_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK18__simd128_uint64_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK18__simd64_float16_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK18__simd64_float32_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK19__simd128_float16_t.S",
            "SceLibc_SceLibstdcxx__ZTSPK19__simd128_float32_t.S",
            "SceLibc_SceLibstdcxx__ZTSPKDh.S",
            "SceLibc_SceLibstdcxx__ZTSPKDi.S",
            "SceLibc_SceLibstdcxx__ZTSPKDs.S",
            "SceLibc_SceLibstdcxx__ZTSPKa.S",
            "SceLibc_SceLibstdcxx__ZTSPKb.S",
            "SceLibc_SceLibstdcxx__ZTSPKc.S",
            "SceLibc_SceLibstdcxx__ZTSPKd.S",
            "SceLibc_SceLibstdcxx__ZTSPKe.S",
            "SceLibc_SceLibstdcxx__ZTSPKf.S",
            "SceLibc_SceLibstdcxx__ZTSPKh.S",
            "SceLibc_SceLibstdcxx__ZTSPKi.S",
            "SceLibc_SceLibstdcxx__ZTSPKj.S",
            "SceLibc_SceLibstdcxx__ZTSPKl.S",
            "SceLibc_SceLibstdcxx__ZTSPKm.S",
            "SceLibc_SceLibstdcxx__ZTSPKs.S",
            "SceLibc_SceLibstdcxx__ZTSPKt.S",
            "SceLibc_SceLibstdcxx__ZTSPKv.S",
            "SceLibc_SceLibstdcxx__ZTSPKw.S",
            "SceLibc_SceLibstdcxx__ZTSPKx.S",
            "SceLibc_SceLibstdcxx__ZTSPKy.S",
            "SceLibc_SceLibstdcxx__ZTSPa.S",
            "SceLibc_SceLibstdcxx__ZTSPb.S",
            "SceLibc_SceLibstdcxx__ZTSPc.S",
            "SceLibc_SceLibstdcxx__ZTSPd.S",
            "SceLibc_SceLibstdcxx__ZTSPe.S",
            "SceLibc_SceLibstdcxx__ZTSPf.S",
            "SceLibc_SceLibstdcxx__ZTSPh.S",
            "SceLibc_SceLibstdcxx__ZTSPi.S",
            "SceLibc_SceLibstdcxx__ZTSPj.S",
            "SceLibc_SceLibstdcxx__ZTSPl.S",
            "SceLibc_SceLibstdcxx__ZTSPm.S",
            "SceLibc_SceLibstdcxx__ZTSPs.S",
            "SceLibc_SceLibstdcxx__ZTSPt.S",
            "SceLibc_SceLibstdcxx__ZTSPv.S",
            "SceLibc_SceLibstdcxx__ZTSPw.S",
            "SceLibc_SceLibstdcxx__ZTSPx.S",
            "SceLibc_SceLibstdcxx__ZTSPy.S",
            "SceLibc_SceLibstdcxx__ZTSSd.S",
            "SceLibc_SceLibstdcxx__ZTSSi.S",
            "SceLibc_SceLibstdcxx__ZTSSo.S",
            "SceLibc_SceLibstdcxx__ZTSSt10bad_typeid.S",
            "SceLibc_SceLibstdcxx__ZTSSt10istrstream.S",
            "SceLibc_SceLibstdcxx__ZTSSt10ostrstream.S",
            "SceLibc_SceLibstdcxx__ZTSSt11_ctype_base.S",
            "SceLibc_SceLibstdcxx__ZTSSt11logic_error.S",
            "SceLibc_SceLibstdcxx__ZTSSt11range_error.S",
            "SceLibc_SceLibstdcxx__ZTSSt12domain_error.S",
            "SceLibc_SceLibstdcxx__ZTSSt12length_error.S",
            "SceLibc_SceLibstdcxx__ZTSSt12out_of_range.S",
            "SceLibc_SceLibstdcxx__ZTSSt12strstreambuf.S",
            "SceLibc_SceLibstdcxx__ZTSSt13_codecvt_base.S",
            "SceLibc_SceLibstdcxx__ZTSSt13bad_exception.S",
            "SceLibc_SceLibstdcxx__ZTSSt13basic_filebufIcSt11char_traitsIcEE.S",
            "SceLibc_SceLibstdcxx__ZTSSt13basic_filebufIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTSSt13basic_istreamIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTSSt13basic_ostreamIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTSSt13runtime_error.S",
            "SceLibc_SceLibstdcxx__ZTSSt14overflow_error.S",
            "SceLibc_SceLibstdcxx__ZTSSt15basic_streambufIcSt11char_traitsIcEE.S",
            "SceLibc_SceLibstdcxx__ZTSSt15basic_streambufIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTSSt15underflow_error.S",
            "SceLibc_SceLibstdcxx__ZTSSt16invalid_argument.S",
            "SceLibc_SceLibstdcxx__ZTSSt16nested_exception.S",
            "SceLibc_SceLibstdcxx__ZTSSt5_IosbIiE.S",
            "SceLibc_SceLibstdcxx__ZTSSt6_ctypeIcE.S",
            "SceLibc_SceLibstdcxx__ZTSSt6_ctypeIwE.S",
            "SceLibc_SceLibstdcxx__ZTSSt8_codecvtIccSt9_MbstatetE.S",
            "SceLibc_SceLibstdcxx__ZTSSt8_codecvtIwcSt9_MbstatetE.S",
            "SceLibc_SceLibstdcxx__ZTSSt8bad_cast.S",
            "SceLibc_SceLibstdcxx__ZTSSt8ios_base.S",
            "SceLibc_SceLibstdcxx__ZTSSt9_numpunctIcE.S",
            "SceLibc_SceLibstdcxx__ZTSSt9_numpunctIwE.S",
            "SceLibc_SceLibstdcxx__ZTSSt9bad_alloc.S",
            "SceLibc_SceLibstdcxx__ZTSSt9basic_iosIcSt11char_traitsIcEE.S",
            "SceLibc_SceLibstdcxx__ZTSSt9basic_iosIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTSSt9exception.S",
            "SceLibc_SceLibstdcxx__ZTSSt9strstream.S",
            "SceLibc_SceLibstdcxx__ZTSSt9type_info.S",
            "SceLibc_SceLibstdcxx__ZTSa.S",
            "SceLibc_SceLibstdcxx__ZTSb.S",
            "SceLibc_SceLibstdcxx__ZTSc.S",
            "SceLibc_SceLibstdcxx__ZTSd.S",
            "SceLibc_SceLibstdcxx__ZTSe.S",
            "SceLibc_SceLibstdcxx__ZTSf.S",
            "SceLibc_SceLibstdcxx__ZTSh.S",
            "SceLibc_SceLibstdcxx__ZTSi.S",
            "SceLibc_SceLibstdcxx__ZTSj.S",
            "SceLibc_SceLibstdcxx__ZTSl.S",
            "SceLibc_SceLibstdcxx__ZTSm.S",
            "SceLibc_SceLibstdcxx__ZTSs.S",
            "SceLibc_SceLibstdcxx__ZTSt.S",
            "SceLibc_SceLibstdcxx__ZTSv.S",
            "SceLibc_SceLibstdcxx__ZTSw.S",
            "SceLibc_SceLibstdcxx__ZTSx.S",
            "SceLibc_SceLibstdcxx__ZTSy.S",
            "SceLibc_SceLibstdcxx__ZTTSd.S",
            "SceLibc_SceLibstdcxx__ZTTSi.S",
            "SceLibc_SceLibstdcxx__ZTTSo.S",
            "SceLibc_SceLibstdcxx__ZTTSt10istrstream.S",
            "SceLibc_SceLibstdcxx__ZTTSt10ostrstream.S",
            "SceLibc_SceLibstdcxx__ZTTSt13basic_istreamIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTTSt13basic_ostreamIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTTSt9strstream.S",
            "SceLibc_SceLibstdcxx__ZTVN10__cxxabiv116__enum_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTVN10__cxxabiv117__array_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTVN10__cxxabiv117__class_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTVN10__cxxabiv117__pbase_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTVN10__cxxabiv119__pointer_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTVN10__cxxabiv120__function_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTVN10__cxxabiv120__si_class_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTVN10__cxxabiv121__vmi_class_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTVN10__cxxabiv123__fundamental_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTVN10__cxxabiv129__pointer_to_member_type_infoE.S",
            "SceLibc_SceLibstdcxx__ZTVNSt8ios_base7failureE.S",
            "SceLibc_SceLibstdcxx__ZTVSd.S",
            "SceLibc_SceLibstdcxx__ZTVSd__St9strstream.S",
            "SceLibc_SceLibstdcxx__ZTVSi.S",
            "SceLibc_SceLibstdcxx__ZTVSiSd__St9strstream.S",
            "SceLibc_SceLibstdcxx__ZTVSi__Sd.S",
            "SceLibc_SceLibstdcxx__ZTVSi__St10istrstream.S",
            "SceLibc_SceLibstdcxx__ZTVSo.S",
            "SceLibc_SceLibstdcxx__ZTVSoSd__St9strstream.S",
            "SceLibc_SceLibstdcxx__ZTVSo__Sd.S",
            "SceLibc_SceLibstdcxx__ZTVSo__Sd__St9strstream.S",
            "SceLibc_SceLibstdcxx__ZTVSo__St10ostrstream.S",
            "SceLibc_SceLibstdcxx__ZTVSt10bad_typeid.S",
            "SceLibc_SceLibstdcxx__ZTVSt10istrstream.S",
            "SceLibc_SceLibstdcxx__ZTVSt10ostrstream.S",
            "SceLibc_SceLibstdcxx__ZTVSt11logic_error.S",
            "SceLibc_SceLibstdcxx__ZTVSt11range_error.S",
            "SceLibc_SceLibstdcxx__ZTVSt11regex_error.S",
            "SceLibc_SceLibstdcxx__ZTVSt12bad_weak_ptr.S",
            "SceLibc_SceLibstdcxx__ZTVSt12domain_error.S",
            "SceLibc_SceLibstdcxx__ZTVSt12future_error.S",
            "SceLibc_SceLibstdcxx__ZTVSt12length_error.S",
            "SceLibc_SceLibstdcxx__ZTVSt12out_of_range.S",
            "SceLibc_SceLibstdcxx__ZTVSt12strstreambuf.S",
            "SceLibc_SceLibstdcxx__ZTVSt12system_error.S",
            "SceLibc_SceLibstdcxx__ZTVSt13_codecvt_base.S",
            "SceLibc_SceLibstdcxx__ZTVSt13bad_exception.S",
            "SceLibc_SceLibstdcxx__ZTVSt13basic_filebufIcSt11char_traitsIcEE.S",
            "SceLibc_SceLibstdcxx__ZTVSt13basic_filebufIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTVSt13basic_istreamIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTVSt13basic_ostreamIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTVSt13runtime_error.S",
            "SceLibc_SceLibstdcxx__ZTVSt14overflow_error.S",
            "SceLibc_SceLibstdcxx__ZTVSt15basic_streambufIcSt11char_traitsIcEE.S",
            "SceLibc_SceLibstdcxx__ZTVSt15basic_streambufIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTVSt15underflow_error.S",
            "SceLibc_SceLibstdcxx__ZTVSt16invalid_argument.S",
            "SceLibc_SceLibstdcxx__ZTVSt16nested_exception.S",
            "SceLibc_SceLibstdcxx__ZTVSt17bad_function_call.S",
            "SceLibc_SceLibstdcxx__ZTVSt20bad_array_new_length.S",
            "SceLibc_SceLibstdcxx__ZTVSt6_ctypeIcE.S",
            "SceLibc_SceLibstdcxx__ZTVSt6_ctypeIwE.S",
            "SceLibc_SceLibstdcxx__ZTVSt8_codecvtIccSt9_MbstatetE.S",
            "SceLibc_SceLibstdcxx__ZTVSt8_codecvtIwcSt9_MbstatetE.S",
            "SceLibc_SceLibstdcxx__ZTVSt8bad_cast.S",
            "SceLibc_SceLibstdcxx__ZTVSt8ios_base.S",
            "SceLibc_SceLibstdcxx__ZTVSt9bad_alloc.S",
            "SceLibc_SceLibstdcxx__ZTVSt9basic_iosIcSt11char_traitsIcEE.S",
            "SceLibc_SceLibstdcxx__ZTVSt9basic_iosIcSt11char_traitsIcEE__Sd__St9strstream.S",
            "SceLibc_SceLibstdcxx__ZTVSt9basic_iosIcSt11char_traitsIcEE__SiSd__St9strstream.S",
            "SceLibc_SceLibstdcxx__ZTVSt9basic_iosIcSt11char_traitsIcEE__Si__Sd.S",
            "SceLibc_SceLibstdcxx__ZTVSt9basic_iosIcSt11char_traitsIcEE__Si__St10istrstream.S",
            "SceLibc_SceLibstdcxx__ZTVSt9basic_iosIcSt11char_traitsIcEE__SoSd__St9strstream.S",
            "SceLibc_SceLibstdcxx__ZTVSt9basic_iosIcSt11char_traitsIcEE__So__Sd.S",
            "SceLibc_SceLibstdcxx__ZTVSt9basic_iosIcSt11char_traitsIcEE__So__St10ostrstream.S",
            "SceLibc_SceLibstdcxx__ZTVSt9basic_iosIwSt11char_traitsIwEE.S",
            "SceLibc_SceLibstdcxx__ZTVSt9exception.S",
            "SceLibc_SceLibstdcxx__ZTVSt9strstream.S",
            "SceLibc_SceLibstdcxx__ZTVSt9type_info.S",
            "SceLibc_SceLibstdcxx__ZZNSt13basic_filebufIcSt11char_traitsIcEE5_InitEPSt10_Dnk_filetNS2_7_InitflEE7_Stinit.S",
            "SceLibc_SceLibstdcxx__ZZNSt13basic_filebufIwSt11char_traitsIwEE5_InitEPSt10_Dnk_filetNS2_7_InitflEE7_Stinit.S",
        },
    });
}
pub fn buildSceUsbAudioForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUsbAudioForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUsbAudioForDriver_SceUsbAudioForDriver_ksceUsbAudioGetDeviceIdList.S",
            "SceUsbAudioForDriver_SceUsbAudioForDriver_ksceUsbAudioInput.S",
            "SceUsbAudioForDriver_SceUsbAudioForDriver_ksceUsbAudioInput2.S",
            "SceUsbAudioForDriver_SceUsbAudioForDriver_ksceUsbAudioRegisterCallback.S",
            "SceUsbAudioForDriver_SceUsbAudioForDriver_ksceUsbAudioUnregisterCallback.S",
        },
    });
}
pub fn buildSceUsbAudioIn(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceUsbAudioIn",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceUsbAudioIn_SceUsbAudioIn_sceUsbAudioInCloseDevice.S",
            "SceUsbAudioIn_SceUsbAudioIn_sceUsbAudioInGetDeviceIdList.S",
            "SceUsbAudioIn_SceUsbAudioIn_sceUsbAudioInGetDeviceInformation.S",
            "SceUsbAudioIn_SceUsbAudioIn_sceUsbAudioInGetMaxValueOfVolume.S",
            "SceUsbAudioIn_SceUsbAudioIn_sceUsbAudioInGetMinValueOfVolume.S",
            "SceUsbAudioIn_SceUsbAudioIn_sceUsbAudioInInput.S",
            "SceUsbAudioIn_SceUsbAudioIn_sceUsbAudioInOpenDevice.S",
            "SceUsbAudioIn_SceUsbAudioIn_sceUsbAudioInSetCurrentValueOfVolume.S",
        },
    });
}
pub fn buildSceSblSsMgr(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblSsMgr",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblSsMgr_SceSblAimgr__sceKernelGetOpenPsId.S",
            "SceSblSsMgr_SceSblDmac5Mgr_sceSblDmac5EncDec.S",
            "SceSblSsMgr_SceSblDmac5Mgr_sceSblDmac5EncDecKeyGen.S",
            "SceSblSsMgr_SceSblDmac5Mgr_sceSblDmac5HashTransform.S",
            "SceSblSsMgr_SceSblDmac5Mgr_sceSblDmac5HmacKeyGen.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafManagerDeleteQafTokenForUser.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafManagerGetQafNameForUser.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafManagerIsAllowKernelDebugForUser.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafManagerSetQafTokenForUser.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrDeleteQafToken2.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrGetQafName.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrGetQafToken.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrGetQafToken2.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrIsAllowAllDebugMenuDisplay.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrIsAllowForceUpdate.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrIsAllowLimitedDebugMenuDisplay.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrIsAllowMinimumDebugMenuDisplay.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrIsAllowNonQAPup.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrIsAllowNpFullTest.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrIsAllowNpTest.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrIsAllowRemoteSysmoduleLoad.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrIsAllowScreenShotAlways.S",
            "SceSblSsMgr_SceSblQafMgr_sceSblQafMgrSetQafToken2.S",
            "SceSblSsMgr_SceSblRng__sceKernelGetRandomNumber.S",
        },
    });
}
pub fn buildSceSblSsMgrForDriver(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblSsMgrForDriver",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblAimgrGetConsoleId.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblAimgrGetOpenPsId.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblAimgrGetPscode.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblAimgrGetPscode2.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblAimgrGetVisibleId.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesCbcDec.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesCbcDecNP.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesCbcEnc.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesCbcEncNP.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesCmacNP.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesCmacWithKeyslot.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesCtrDec.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesCtrEnc.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesEcbDec.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesEcbDecNP.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesEcbDecWithKeyslot.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesEcbEnc.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesEcbEncNP.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5AesEcbEncWithKeyslot.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5DesCbcDecWithKeyslot.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5DesCbcEncWithKeyslot.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5DesEcbDecWithKeyslot.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5DesEcbEncWithKeyslot.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5Rnd.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5Sha1.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5Sha1HmacNP.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5Sha1HmacTransform.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblDmac5Sha256Hmac.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblRngGenuineRandomNumber.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblRngPseudoRandomNumber.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblSsCreatePassPhrase.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblSsDecryptWithPortability.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblSsEncryptWithPortability.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblSsGetNvsData.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblSsMemset.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblSsMgrExecuteDmac5HashCommand.S",
            "SceSblSsMgrForDriver_SceSblSsMgrForDriver_ksceSblSsSetNvsData.S",
        },
    });
}
pub fn buildSceSblSsMgrForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblSsMgrForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblSsMgrForKernel_SceSblSsMgrForKernel_ksceSblNvsReadData.S",
            "SceSblSsMgrForKernel_SceSblSsMgrForKernel_ksceSblNvsWriteData.S",
            "SceSblSsMgrForKernel_SceSblSsMgrForKernel_ksceSblQafManagerGetQAFlags.S",
            "SceSblSsMgrForKernel_SceSblSsMgrForKernel_ksceSblQafManagerGetQafName.S",
        },
    });
}
pub fn buildSceRudp(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceRudp",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceRudp_SceLibRudp_sceRudpActivate.S",
            "SceRudp_SceLibRudp_sceRudpBind.S",
            "SceRudp_SceLibRudp_sceRudpCreateContext.S",
            "SceRudp_SceLibRudp_sceRudpEnableInternalIOThread.S",
            "SceRudp_SceLibRudp_sceRudpEnableInternalIOThread2.S",
            "SceRudp_SceLibRudp_sceRudpEnd.S",
            "SceRudp_SceLibRudp_sceRudpFlush.S",
            "SceRudp_SceLibRudp_sceRudpGetContextStatus.S",
            "SceRudp_SceLibRudp_sceRudpGetLocalInfo.S",
            "SceRudp_SceLibRudp_sceRudpGetMaxSegmentSize.S",
            "SceRudp_SceLibRudp_sceRudpGetNumberOfPacketsToRead.S",
            "SceRudp_SceLibRudp_sceRudpGetOption.S",
            "SceRudp_SceLibRudp_sceRudpGetRemoteInfo.S",
            "SceRudp_SceLibRudp_sceRudpGetSizeReadable.S",
            "SceRudp_SceLibRudp_sceRudpGetSizeWritable.S",
            "SceRudp_SceLibRudp_sceRudpGetStatus.S",
            "SceRudp_SceLibRudp_sceRudpInit.S",
            "SceRudp_SceLibRudp_sceRudpInitiate.S",
            "SceRudp_SceLibRudp_sceRudpNetReceived.S",
            "SceRudp_SceLibRudp_sceRudpPollCancel.S",
            "SceRudp_SceLibRudp_sceRudpPollControl.S",
            "SceRudp_SceLibRudp_sceRudpPollCreate.S",
            "SceRudp_SceLibRudp_sceRudpPollDestroy.S",
            "SceRudp_SceLibRudp_sceRudpPollWait.S",
            "SceRudp_SceLibRudp_sceRudpProcessEvents.S",
            "SceRudp_SceLibRudp_sceRudpRead.S",
            "SceRudp_SceLibRudp_sceRudpSetEventHandler.S",
            "SceRudp_SceLibRudp_sceRudpSetMaxSegmentSize.S",
            "SceRudp_SceLibRudp_sceRudpSetOption.S",
            "SceRudp_SceLibRudp_sceRudpTerminate.S",
            "SceRudp_SceLibRudp_sceRudpWrite.S",
        },
    });
}
pub fn buildSceSblSmSchedProxyForKernel(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceSblSmSchedProxyForKernel",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedCallFunc.S",
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedProxyChangeF00DStatus.S",
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedProxyDisableCry2ArmInterrupt.S",
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedProxyEnableCry2ArmInterrupt.S",
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedProxyExecuteF00DCommand.S",
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedProxyGetCommandF00DRegister.S",
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedProxyGetStatus.S",
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedProxyInitialize.S",
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedProxyInvoke.S",
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedProxyReadCry2Arm.S",
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedProxyUninitialize.S",
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedProxyWait.S",
            "SceSblSmSchedProxyForKernel_SceSblSmSchedProxyForKernel_ksceSblSmSchedProxyWriteCry2Arm.S",
        },
    });
}
pub fn buildSceNpManager(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    const mod = b.createModule(.{
        .target = target,
        .optimize = .ReleaseSmall,
    });
    const lib = b.addLibrary(.{
        .root_module = mod,
        .name = "SceNpManager",
    });
    b.installArtifact(lib);
    mod.addCSourceFiles(.{
        .root = stubs_dir,
        .language = .assembly_with_preprocessor,
        .flags = &.{"-DGEN_WEAK_EXPORTS=0"},
        .files = &.{
            "SceNpManager_SceNpManager_sceNpAuthAbortOAuthRequest.S",
            "SceNpManager_SceNpManager_sceNpAuthCreateOAuthRequest.S",
            "SceNpManager_SceNpManager_sceNpAuthDeleteOAuthRequest.S",
            "SceNpManager_SceNpManager_sceNpAuthGetAuthorizationCode.S",
            "SceNpManager_SceNpManager_sceNpCheckCallback.S",
            "SceNpManager_SceNpManager_sceNpGetServiceState.S",
            "SceNpManager_SceNpManager_sceNpInit.S",
            "SceNpManager_SceNpManager_sceNpManagerGetAccountRegion.S",
            "SceNpManager_SceNpManager_sceNpManagerGetCachedParam.S",
            "SceNpManager_SceNpManager_sceNpManagerGetChatRestrictionFlag.S",
            "SceNpManager_SceNpManager_sceNpManagerGetContentRatingFlag.S",
            "SceNpManager_SceNpManager_sceNpManagerGetNpId.S",
            "SceNpManager_SceNpManager_sceNpRegisterServiceStateCallback.S",
            "SceNpManager_SceNpManager_sceNpTerm.S",
            "SceNpManager_SceNpManager_sceNpUnregisterServiceStateCallback.S",
        },
    });
}
pub fn build(b: *std.Build, target: std.Build.ResolvedTarget, stubs_dir: std.Build.LazyPath) void {
    buildSceSysmemForDriver(b, target, stubs_dir);
    buildSceStdio(b, target, stubs_dir);
    buildSceIntrmgrForKernel(b, target, stubs_dir);
    buildSceProcessmgrForKernel(b, target, stubs_dir);
    buildSceExcpmgrForKernel(b, target, stubs_dir);
    buildSceSysmemForKernel(b, target, stubs_dir);
    buildSceUartForKernel(b, target, stubs_dir);
    buildSceDebugForKernel(b, target, stubs_dir);
    buildSceCpuForKernel(b, target, stubs_dir);
    buildSceThreadmgrForKernel(b, target, stubs_dir);
    buildSceModulemgrForKernel(b, target, stubs_dir);
    buildSceLibG729(b, target, stubs_dir);
    buildSceIntrmgrForDriver(b, target, stubs_dir);
    buildSceClockgenForDriver(b, target, stubs_dir);
    buildSceTeleportServer(b, target, stubs_dir);
    buildSceLocationExtension(b, target, stubs_dir);
    buildSceOledForDriver(b, target, stubs_dir);
    buildScePgf(b, target, stubs_dir);
    buildSceLocation(b, target, stubs_dir);
    buildSceNpSnsFacebook(b, target, stubs_dir);
    buildSceSysconForDriver(b, target, stubs_dir);
    buildSceTriggerUtil(b, target, stubs_dir);
    buildSceSystemGesture(b, target, stubs_dir);
    buildSceNpWebApi(b, target, stubs_dir);
    buildSceRazorHud(b, target, stubs_dir);
    buildSceSysmodule(b, target, stubs_dir);
    buildScePvf(b, target, stubs_dir);
    buildSceLsdb(b, target, stubs_dir);
    buildSceNpCommon(b, target, stubs_dir);
    buildSceNpTus(b, target, stubs_dir);
    buildSceMtpIfDriver(b, target, stubs_dir);
    buildSceLibJson(b, target, stubs_dir);
    buildSceError(b, target, stubs_dir);
    buildSceLibDbg(b, target, stubs_dir);
    buildSceUlobjMgr(b, target, stubs_dir);
    buildSceSqlite(b, target, stubs_dir);
    buildSceNpParty(b, target, stubs_dir);
    buildSceLibMono(b, target, stubs_dir);
    buildSceHid(b, target, stubs_dir);
    buildSceHidForDriver(b, target, stubs_dir);
    buildSceSblFwLoaderForDriver(b, target, stubs_dir);
    buildSceSblPostSsMgr(b, target, stubs_dir);
    buildSceSblPostSsMgrForDriver(b, target, stubs_dir);
    buildSceBgAppUtil(b, target, stubs_dir);
    buildSceHandwriting(b, target, stubs_dir);
    buildSceFiber(b, target, stubs_dir);
    buildSceNetCtl(b, target, stubs_dir);
    buildSceUsbdForDriver(b, target, stubs_dir);
    buildSceUsbd(b, target, stubs_dir);
    buildSceCodecEnginePerf(b, target, stubs_dir);
    buildSceMsifForDriver(b, target, stubs_dir);
    buildSceAtrac(b, target, stubs_dir);
    buildSceFios2(b, target, stubs_dir);
    buildSceDeci4pDbgpForDriver(b, target, stubs_dir);
    buildSceNearDialogUtil(b, target, stubs_dir);
    buildScePhotoExport(b, target, stubs_dir);
    buildSceAudioIn(b, target, stubs_dir);
    buildSceFios2Kernel(b, target, stubs_dir);
    buildSceFios2KernelForDriver(b, target, stubs_dir);
    buildSceUsbSerial(b, target, stubs_dir);
    buildSceUsbSerialForDriver(b, target, stubs_dir);
    buildSceUdcd(b, target, stubs_dir);
    buildSceUdcdForDriver(b, target, stubs_dir);
    buildSceAvcodec(b, target, stubs_dir);
    buildSceAvcodecForDriver(b, target, stubs_dir);
    buildSceCoredump(b, target, stubs_dir);
    buildSceCoredumpForDriver(b, target, stubs_dir);
    buildSceLcdForDriver(b, target, stubs_dir);
    buildSceDeci4pUserp(b, target, stubs_dir);
    buildSceSysmem(b, target, stubs_dir);
    buildSceCpuForDriver(b, target, stubs_dir);
    buildSceDebugForDriver(b, target, stubs_dir);
    buildSceDebugLedForDriver(b, target, stubs_dir);
    buildSceDipswForDriver(b, target, stubs_dir);
    buildSceKernelSuspendForDriver(b, target, stubs_dir);
    buildSceKernelUtilsForDriver(b, target, stubs_dir);
    buildScePmMgrForDriver(b, target, stubs_dir);
    buildSceProcEventForDriver(b, target, stubs_dir);
    buildSceQafMgrForDriver(b, target, stubs_dir);
    buildSceSblAIMgrForDriver(b, target, stubs_dir);
    buildSceSysclibForDriver(b, target, stubs_dir);
    buildSceSysrootForDriver(b, target, stubs_dir);
    buildSceSysrootForKernel(b, target, stubs_dir);
    buildSceAudio(b, target, stubs_dir);
    buildSceNearUtil(b, target, stubs_dir);
    buildSceLibMp4Recorder(b, target, stubs_dir);
    buildSceUlt(b, target, stubs_dir);
    buildSceIme(b, target, stubs_dir);
    buildSceLiveArea(b, target, stubs_dir);
    buildSceMotionDev(b, target, stubs_dir);
    buildSceMotionDevForDriver(b, target, stubs_dir);
    buildSceSblACMgr(b, target, stubs_dir);
    buildSceSblACMgrForDriver(b, target, stubs_dir);
    buildSceSblACMgrForKernel(b, target, stubs_dir);
    buildScePspnetAdhoc(b, target, stubs_dir);
    buildSceMusicExport(b, target, stubs_dir);
    buildSceNpMessage(b, target, stubs_dir);
    buildSceNetPsForDriver(b, target, stubs_dir);
    buildSceNetPs(b, target, stubs_dir);
    buildSceVshBridge(b, target, stubs_dir);
    buildSceUsbServ(b, target, stubs_dir);
    buildSceUsbServForDriver(b, target, stubs_dir);
    buildSceGxm(b, target, stubs_dir);
    buildSceLibKernel(b, target, stubs_dir);
    buildSceRtabi(b, target, stubs_dir);
    buildSceRtc(b, target, stubs_dir);
    buildSceRtcForDriver(b, target, stubs_dir);
    buildSceCommonDialog(b, target, stubs_dir);
    buildSceNet(b, target, stubs_dir);
    buildSceSblGcAuthMgrDrmBBForDriver(b, target, stubs_dir);
    buildSceSblGcAuthMgrGcAuthForDriver(b, target, stubs_dir);
    buildSceSblGcAuthMgr(b, target, stubs_dir);
    buildScePerf(b, target, stubs_dir);
    buildSceNpSignaling(b, target, stubs_dir);
    buildSceSblSmCommForKernel(b, target, stubs_dir);
    buildSceGameUpdate(b, target, stubs_dir);
    buildSceIofilemgr(b, target, stubs_dir);
    buildSceIofilemgrForDriver(b, target, stubs_dir);
    buildSceCtrl(b, target, stubs_dir);
    buildSceCtrlForDriver(b, target, stubs_dir);
    buildSceSdifForDriver(b, target, stubs_dir);
    buildSceTouch(b, target, stubs_dir);
    buildSceTouchForDriver(b, target, stubs_dir);
    buildSceNgsUser(b, target, stubs_dir);
    buildSceDTrace(b, target, stubs_dir);
    buildSceDisplay(b, target, stubs_dir);
    buildSceDisplayForDriver(b, target, stubs_dir);
    buildSceIncomingDialog(b, target, stubs_dir);
    buildSceBbmc(b, target, stubs_dir);
    buildSceAppMgr(b, target, stubs_dir);
    buildSceDriverUser(b, target, stubs_dir);
    buildSceMotion(b, target, stubs_dir);
    buildSceNotificationUtil(b, target, stubs_dir);
    buildSceKernelDmacMgr(b, target, stubs_dir);
    buildSceDmacmgrForDriver(b, target, stubs_dir);
    buildSceSulpha(b, target, stubs_dir);
    buildSceIdStorageForDriver(b, target, stubs_dir);
    buildSceKernelBootimage(b, target, stubs_dir);
    buildSceShutterSound(b, target, stubs_dir);
    buildSceVideoExport(b, target, stubs_dir);
    buildSceCamera(b, target, stubs_dir);
    buildSceCameraForDriver(b, target, stubs_dir);
    buildSceCompat(b, target, stubs_dir);
    buildSceJpegEncArm(b, target, stubs_dir);
    buildSceVoiceQoS(b, target, stubs_dir);
    buildSceLibXml(b, target, stubs_dir);
    buildSceLibMonoBridge(b, target, stubs_dir);
    buildScePfsMgrForKernel(b, target, stubs_dir);
    buildSceNpUtility(b, target, stubs_dir);
    buildSceSblAuthMgrForDriver(b, target, stubs_dir);
    buildSceSblAuthMgrForKernel(b, target, stubs_dir);
    buildSceCodecEngineWrapper(b, target, stubs_dir);
    buildSceHttp(b, target, stubs_dir);
    buildSceNpBasic(b, target, stubs_dir);
    buildSceBt(b, target, stubs_dir);
    buildSceBtForDriver(b, target, stubs_dir);
    buildSceAppUtil(b, target, stubs_dir);
    buildSceLedForDriver(b, target, stubs_dir);
    buildScePower(b, target, stubs_dir);
    buildScePowerForDriver(b, target, stubs_dir);
    buildSceSystimerForDriver(b, target, stubs_dir);
    buildSceLibMtp(b, target, stubs_dir);
    buildSceNetAdhocMatching(b, target, stubs_dir);
    buildSceNpDrm(b, target, stubs_dir);
    buildSceNpDrmForDriver(b, target, stubs_dir);
    buildScePsmDrmForDriver(b, target, stubs_dir);
    buildSceScreenShot(b, target, stubs_dir);
    buildSceRegistryMgr(b, target, stubs_dir);
    buildSceRegMgrForDriver(b, target, stubs_dir);
    buildSceRegMgrServiceForDriver(b, target, stubs_dir);
    buildSceNgs(b, target, stubs_dir);
    buildSceAppMgrForDriver(b, target, stubs_dir);
    buildSceRazorCapture(b, target, stubs_dir);
    buildSceAvPlayer(b, target, stubs_dir);
    buildSceKernelThreadMgr(b, target, stubs_dir);
    buildSceThreadmgrForDriver(b, target, stubs_dir);
    buildSceNpMatching2(b, target, stubs_dir);
    buildSceNpTrophy(b, target, stubs_dir);
    buildSceClipboard(b, target, stubs_dir);
    buildSceUsbPspcm(b, target, stubs_dir);
    buildSceWlanBt(b, target, stubs_dir);
    buildSceWlanBtForDriver(b, target, stubs_dir);
    buildSceShaccCg(b, target, stubs_dir);
    buildScePaf(b, target, stubs_dir);
    buildSceAudioenc(b, target, stubs_dir);
    buildSceAudiodec(b, target, stubs_dir);
    buildSceCodecEngine(b, target, stubs_dir);
    buildSceJpeg(b, target, stubs_dir);
    buildSceJpegEnc(b, target, stubs_dir);
    buildSceAvcodecUser(b, target, stubs_dir);
    buildSceVideodec(b, target, stubs_dir);
    buildSceSmart(b, target, stubs_dir);
    buildSceNpScore(b, target, stubs_dir);
    buildSceNpCommerce2(b, target, stubs_dir);
    buildSceVoice(b, target, stubs_dir);
    buildSceNpActivity(b, target, stubs_dir);
    buildSceJpegArm(b, target, stubs_dir);
    buildScePamgr(b, target, stubs_dir);
    buildSceSas(b, target, stubs_dir);
    buildSceProcessmgr(b, target, stubs_dir);
    buildSceProcessmgrForDriver(b, target, stubs_dir);
    buildlibScePiglet(b, target, stubs_dir);
    buildSceDsiForDriver(b, target, stubs_dir);
    buildSceGpioForDriver(b, target, stubs_dir);
    buildSceI2cForDriver(b, target, stubs_dir);
    buildSceIftuForDriver(b, target, stubs_dir);
    buildScePervasiveForDriver(b, target, stubs_dir);
    buildSceSblUpdateMgr(b, target, stubs_dir);
    buildScePromoterUtil(b, target, stubs_dir);
    buildSceSsl(b, target, stubs_dir);
    buildSceKernelModulemgr(b, target, stubs_dir);
    buildSceBacktraceForDriver(b, target, stubs_dir);
    buildSceModulemgrForDriver(b, target, stubs_dir);
    buildSceGpuEs4ForDriver(b, target, stubs_dir);
    buildSceGpuEs4(b, target, stubs_dir);
    buildSceTeleportClient(b, target, stubs_dir);
    buildSceUsbstorVStorDriver(b, target, stubs_dir);
    buildSceGps(b, target, stubs_dir);
    buildSceShellSvc(b, target, stubs_dir);
    buildSceFace(b, target, stubs_dir);
    buildSceAVConfig(b, target, stubs_dir);
    buildSceLibc(b, target, stubs_dir);
    buildSceUsbAudioForDriver(b, target, stubs_dir);
    buildSceUsbAudioIn(b, target, stubs_dir);
    buildSceSblSsMgr(b, target, stubs_dir);
    buildSceSblSsMgrForDriver(b, target, stubs_dir);
    buildSceSblSsMgrForKernel(b, target, stubs_dir);
    buildSceRudp(b, target, stubs_dir);
    buildSceSblSmSchedProxyForKernel(b, target, stubs_dir);
    buildSceNpManager(b, target, stubs_dir);
}
pub const Stubs = enum {
    SceSysmemForDriver,
    SceStdio,
    SceIntrmgrForKernel,
    SceProcessmgrForKernel,
    SceExcpmgrForKernel,
    SceSysmemForKernel,
    SceUartForKernel,
    SceDebugForKernel,
    SceCpuForKernel,
    SceThreadmgrForKernel,
    SceModulemgrForKernel,
    SceLibG729,
    SceIntrmgrForDriver,
    SceClockgenForDriver,
    SceTeleportServer,
    SceLocationExtension,
    SceOledForDriver,
    ScePgf,
    SceLocation,
    SceNpSnsFacebook,
    SceSysconForDriver,
    SceTriggerUtil,
    SceSystemGesture,
    SceNpWebApi,
    SceRazorHud,
    SceSysmodule,
    ScePvf,
    SceLsdb,
    SceNpCommon,
    SceNpTus,
    SceMtpIfDriver,
    SceLibJson,
    SceError,
    SceLibDbg,
    SceUlobjMgr,
    SceSqlite,
    SceNpParty,
    SceLibMono,
    SceHid,
    SceHidForDriver,
    SceSblFwLoaderForDriver,
    SceSblPostSsMgr,
    SceSblPostSsMgrForDriver,
    SceBgAppUtil,
    SceHandwriting,
    SceFiber,
    SceNetCtl,
    SceUsbdForDriver,
    SceUsbd,
    SceCodecEnginePerf,
    SceMsifForDriver,
    SceAtrac,
    SceFios2,
    SceDeci4pDbgpForDriver,
    SceNearDialogUtil,
    ScePhotoExport,
    SceAudioIn,
    SceFios2Kernel,
    SceFios2KernelForDriver,
    SceUsbSerial,
    SceUsbSerialForDriver,
    SceUdcd,
    SceUdcdForDriver,
    SceAvcodec,
    SceAvcodecForDriver,
    SceCoredump,
    SceCoredumpForDriver,
    SceLcdForDriver,
    SceDeci4pUserp,
    SceSysmem,
    SceCpuForDriver,
    SceDebugForDriver,
    SceDebugLedForDriver,
    SceDipswForDriver,
    SceKernelSuspendForDriver,
    SceKernelUtilsForDriver,
    ScePmMgrForDriver,
    SceProcEventForDriver,
    SceQafMgrForDriver,
    SceSblAIMgrForDriver,
    SceSysclibForDriver,
    SceSysrootForDriver,
    SceSysrootForKernel,
    SceAudio,
    SceNearUtil,
    SceLibMp4Recorder,
    SceUlt,
    SceIme,
    SceLiveArea,
    SceMotionDev,
    SceMotionDevForDriver,
    SceSblACMgr,
    SceSblACMgrForDriver,
    SceSblACMgrForKernel,
    ScePspnetAdhoc,
    SceMusicExport,
    SceNpMessage,
    SceNetPsForDriver,
    SceNetPs,
    SceVshBridge,
    SceUsbServ,
    SceUsbServForDriver,
    SceGxm,
    SceLibKernel,
    SceRtabi,
    SceRtc,
    SceRtcForDriver,
    SceCommonDialog,
    SceNet,
    SceSblGcAuthMgrDrmBBForDriver,
    SceSblGcAuthMgrGcAuthForDriver,
    SceSblGcAuthMgr,
    ScePerf,
    SceNpSignaling,
    SceSblSmCommForKernel,
    SceGameUpdate,
    SceIofilemgr,
    SceIofilemgrForDriver,
    SceCtrl,
    SceCtrlForDriver,
    SceSdifForDriver,
    SceTouch,
    SceTouchForDriver,
    SceNgsUser,
    SceDTrace,
    SceDisplay,
    SceDisplayForDriver,
    SceIncomingDialog,
    SceBbmc,
    SceAppMgr,
    SceDriverUser,
    SceMotion,
    SceNotificationUtil,
    SceKernelDmacMgr,
    SceDmacmgrForDriver,
    SceSulpha,
    SceIdStorageForDriver,
    SceKernelBootimage,
    SceShutterSound,
    SceVideoExport,
    SceCamera,
    SceCameraForDriver,
    SceCompat,
    SceJpegEncArm,
    SceVoiceQoS,
    SceLibXml,
    SceLibMonoBridge,
    ScePfsMgrForKernel,
    SceNpUtility,
    SceSblAuthMgrForDriver,
    SceSblAuthMgrForKernel,
    SceCodecEngineWrapper,
    SceHttp,
    SceNpBasic,
    SceBt,
    SceBtForDriver,
    SceAppUtil,
    SceLedForDriver,
    ScePower,
    ScePowerForDriver,
    SceSystimerForDriver,
    SceLibMtp,
    SceNetAdhocMatching,
    SceNpDrm,
    SceNpDrmForDriver,
    ScePsmDrmForDriver,
    SceScreenShot,
    SceRegistryMgr,
    SceRegMgrForDriver,
    SceRegMgrServiceForDriver,
    SceNgs,
    SceAppMgrForDriver,
    SceRazorCapture,
    SceAvPlayer,
    SceKernelThreadMgr,
    SceThreadmgrForDriver,
    SceNpMatching2,
    SceNpTrophy,
    SceClipboard,
    SceUsbPspcm,
    SceWlanBt,
    SceWlanBtForDriver,
    SceShaccCg,
    ScePaf,
    SceAudioenc,
    SceAudiodec,
    SceCodecEngine,
    SceJpeg,
    SceJpegEnc,
    SceAvcodecUser,
    SceVideodec,
    SceSmart,
    SceNpScore,
    SceNpCommerce2,
    SceVoice,
    SceNpActivity,
    SceJpegArm,
    ScePamgr,
    SceSas,
    SceProcessmgr,
    SceProcessmgrForDriver,
    libScePiglet,
    SceDsiForDriver,
    SceGpioForDriver,
    SceI2cForDriver,
    SceIftuForDriver,
    ScePervasiveForDriver,
    SceSblUpdateMgr,
    ScePromoterUtil,
    SceSsl,
    SceKernelModulemgr,
    SceBacktraceForDriver,
    SceModulemgrForDriver,
    SceGpuEs4ForDriver,
    SceGpuEs4,
    SceTeleportClient,
    SceUsbstorVStorDriver,
    SceGps,
    SceShellSvc,
    SceFace,
    SceAVConfig,
    SceLibc,
    SceUsbAudioForDriver,
    SceUsbAudioIn,
    SceSblSsMgr,
    SceSblSsMgrForDriver,
    SceSblSsMgrForKernel,
    SceRudp,
    SceSblSmSchedProxyForKernel,
    SceNpManager,
};
